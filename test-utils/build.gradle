import org.gradle.api.internal.artifacts.DefaultExcludeRule

plugins {
    id 'maven-publish'
}

description = 'APOC :: Test Utils'

javadoc {
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
}

dependencies {
    def withoutServers = {
        exclude group: 'org.eclipse.jetty'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'org.apache.hive', module: 'hive-service'
    }

    // The logger will come from the :common project via slf4j-simple
    def withoutLoggers = {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
    }

    api group: 'junit', name: 'junit', version: '4.13.2'
    api group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    api group: 'org.hamcrest', name: 'hamcrest-library', version: '2.2'
    api group: 'org.neo4j.community', name: 'it-test-support', version: neo4jVersionEffective // , classifier: "tests"
    api group: 'org.neo4j', name: 'log-test-utils', version: neo4jVersionEffective // , classifier: "tests"
    api group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '4.0.0'
    api group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '3.3.5', withoutServers.andThen(withoutLoggers)
    api group: 'org.apache.hadoop', name: 'hadoop-common', version: '3.3.5', withoutServers.andThen(withoutLoggers)
    api group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '3.3.5', withoutServers.andThen(withoutLoggers)
    api group: 'org.testcontainers', name: 'testcontainers', version: testContainersVersion
    api group: 'org.testcontainers', name: 'neo4j', version: testContainersVersion
    api group: 'org.testcontainers', name: 'elasticsearch', version: testContainersVersion
    api group: 'org.testcontainers', name: 'couchbase', version: testContainersVersion
    api group: 'org.testcontainers', name: 'mysql', version: testContainersVersion
    api group: 'org.testcontainers', name: 'postgresql', version: testContainersVersion
    api group: 'org.testcontainers', name: 'cassandra', version: testContainersVersion
    api group: 'org.testcontainers', name: 'localstack', version: testContainersVersion
    api group: 'org.apache.arrow', name: 'arrow-vector', version: '10.0.1'
    api group: 'org.apache.arrow', name: 'arrow-memory-netty', version: '10.0.1'

    implementation project(":common")
    implementation group: 'org.neo4j', name: 'neo4j-common', version: neo4jVersionEffective, classifier: "tests"
    implementation group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersionEffective, classifier: "tests"
    implementation group: 'org.neo4j', name: 'neo4j-io', version: neo4jVersionEffective, classifier: "tests"
    implementation group: 'org.gradle', name: 'gradle-tooling-api', version: '7.2'
    implementation group: 'org.jetbrains', name: 'annotations', version: "17.0.0"
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.425'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.13.2'
}


publishing {
    repositories {
        maven {
            name = 'pipeline'
            url = "file://${project(':core').buildDir}/repo"
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            artifactId("apoc-test-utils")
            artifact(mySourcesJar)
            artifact(myJavadocJar)
            artifact(jar)

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "neo4j-apoc-test-utils")
                root.appendNode("description", "Test utils for Neo4j Procedures")
                root.appendNode("url", "http://github.com/neo4j/apoc")

                def scmNode = root.appendNode("scm")
                scmNode.appendNode("url", "http://github.com/neo4j/apoc")

                def licensesNode = root.appendNode("licenses")
                def licenseNode = licensesNode.appendNode("license")
                licenseNode.appendNode("name", 'The Apache Software License, Version 2.0')
                licenseNode.appendNode("url", 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode("comments", 'Note that this license is for the project itself, and not for its dependencies.')
                licenseNode.appendNode("distribution", 'repo')

                def developersNode = root.appendNode("developers")
                def developerNode = developersNode.appendNode("developer")
                developerNode.appendNode("id", 'neo4j')
                developerNode.appendNode("name", 'The Neo4j Team')
                developerNode.appendNode("url", 'https://neo4j.com/')
                developerNode.appendNode("organization", 'Neo4j Inc.')
                developerNode.appendNode("organizationUrl", 'https://neo4j.com/')

                def dependenciesNode = root.get("dependencies")[0]
                if (dependenciesNode == null) {
                    dependenciesNode = root.appendNode("dependencies")
                }

                configurations.default.allDependencies.findAll {dependency -> dependency.group != "org.neo4j.procedure"}.forEach {
                    def dependency = dependenciesNode.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                    dependency.appendNode('scope', "compile")

                    def myExcludeRules = it.excludeRules
                    if (myExcludeRules.size() == 0) {
                        myExcludeRules = new HashSet<>()
                    }

                    myExcludeRules.add(new DefaultExcludeRule("org.slf4j", "slf4j-nop"))

                    // for exclusions
                    if (myExcludeRules.size() > 0) {
                        def exclusions = dependency.appendNode('exclusions')
                        myExcludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('artifactId', ex.module ? ex.module : "*")
                            exclusion.appendNode('groupId', ex.group)
                        }
                    }
                }
            }
        }
    }
}