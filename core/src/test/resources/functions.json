[
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.first(value :: ANY) :: ANY",
    "name": "apoc.agg.first",
    "description": "Returns the first value from the given collection.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "A value to be aggregated.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.graph(path :: ANY) :: MAP",
    "name": "apoc.agg.graph",
    "description": "Returns all distinct `NODE` and `RELATIONSHIP` values collected into a `MAP` with the keys `nodes` and `relationships`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "path",
        "description": "A path to return nodes and relationships from.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.last(value :: ANY) :: ANY",
    "name": "apoc.agg.last",
    "description": "Returns the last value from the given collection.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "A value to be aggregated.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.maxItems(item :: ANY, value :: ANY, groupLimit = -1 :: INTEGER) :: ANY",
    "name": "apoc.agg.maxItems",
    "description": "Returns a `MAP` `{items: LIST<ANY>, value: ANY}` where the `value` key is the maximum value present, and `items` represent all items with the same value. The size of the list of items can be limited to a given max size.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "item",
        "description": "A value to be aggregated.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "value",
        "description": "The value from which the max is selected.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "groupLimit",
        "description": "The limit on the number of items returned.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-1, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.median(value :: ANY) :: ANY",
    "name": "apoc.agg.median",
    "description": "Returns the mathematical median for all non-null `INTEGER` and `FLOAT` values.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "A value to be aggregated.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.minItems(item :: ANY, value :: ANY, groupLimit = -1 :: INTEGER) :: ANY",
    "name": "apoc.agg.minItems",
    "description": "Returns a `MAP` `{items: LIST<ANY>, value: ANY}` where the `value` key is the minimum value present, and `items` represent all items with the same value. The size of the list of items can be limited to a given max size.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "item",
        "description": "A value to be aggregated.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "value",
        "description": "The value from which the min is selected.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "groupLimit",
        "description": "The limit on the number of items returned.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-1, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.nth(value :: ANY, offset :: INTEGER) :: ANY",
    "name": "apoc.agg.nth",
    "description": "Returns the nth value in the given collection (to fetch the last item of an unknown length collection, -1 can be used).",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "A value to be aggregated.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "offset",
        "description": "The index of the value to be returned, or -1 to return the last item.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.percentiles(value :: INTEGER | FLOAT, percentiles = [0.5, 0.75, 0.9, 0.95, 0.99] :: LIST<FLOAT>) :: LIST<ANY>",
    "name": "apoc.agg.percentiles",
    "description": "Returns the given percentiles over the range of numerical values in the given collection.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "A value to be aggregated.",
        "isDeprecated": false,
        "type": "INTEGER | FLOAT"
      },
      {
        "name": "percentiles",
        "description": "The percentiles from which the values are obtained.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[0.5, 0.75, 0.9, 0.95, 0.99], type=LIST<FLOAT>}",
        "type": "LIST<FLOAT>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.product(value :: INTEGER | FLOAT) :: INTEGER | FLOAT",
    "name": "apoc.agg.product",
    "description": "Returns the product of all non-null `INTEGER` and `FLOAT` values in the collection.",
    "returnDescription": "INTEGER | FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "A value to be multiplied in the aggregate.",
        "isDeprecated": false,
        "type": "INTEGER | FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.slice(value :: ANY, from = 0 :: INTEGER, to = -1 :: INTEGER) :: LIST<ANY>",
    "name": "apoc.agg.slice",
    "description": "Returns a subset of non-null values from the given collection (the collection is considered to be zero-indexed).\nTo specify the range from start until the end of the collection, the length should be set to -1.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "A value to be multiplied in the aggregate.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "from",
        "description": "The index from which to start returning values in the specified range.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "to",
        "description": "The non-inclusive index of the final value in the range.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-1, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": true,
    "signature": "apoc.agg.statistics(value :: INTEGER | FLOAT, percentiles = [0.5, 0.75, 0.9, 0.95, 0.99] :: LIST<FLOAT>) :: MAP",
    "name": "apoc.agg.statistics",
    "description": "Returns the following statistics on the `INTEGER` and `FLOAT` values in the given collection: percentiles, min, minNonZero, max, total, mean, stdev.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "A value to be aggregated.",
        "isDeprecated": false,
        "type": "INTEGER | FLOAT"
      },
      {
        "name": "percentiles",
        "description": "The percentiles from which the values are obtained.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[0.5, 0.75, 0.9, 0.95, 0.99], type=LIST<FLOAT>}",
        "type": "LIST<FLOAT>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.any.isDeleted(object :: ANY) :: BOOLEAN",
    "name": "apoc.any.isDeleted",
    "description": "Returns true if the given `NODE` or `RELATIONSHIP` no longer exists.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "object",
        "description": "The node or relationship to check the non-existence of.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.any.properties(object :: ANY, keys = null :: LIST<STRING>) :: MAP",
    "name": "apoc.any.properties",
    "description": "Returns all properties of the given object.\nThe object can be a virtual `NODE`, a real `NODE`, a virtual `RELATIONSHIP`, a real `RELATIONSHIP`, or a `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "object",
        "description": "The object to return properties from.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "keys",
        "description": "The keys of the properties to be returned (if null then all keys are returned).",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=null, type=LIST<STRING>}",
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.any.property(object :: ANY, key :: STRING) :: ANY",
    "name": "apoc.any.property",
    "description": "Returns the property for the given key from an object.\nThe object can be a virtual `NODE`, a real `NODE`, a virtual `RELATIONSHIP`, a real `RELATIONSHIP`, or a `MAP`.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "object",
        "description": "The object to return a property from.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "key",
        "description": "The key of the property to return.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.bitwise.op(a :: INTEGER, operator :: STRING, b :: INTEGER) :: INTEGER",
    "name": "apoc.bitwise.op",
    "description": "Returns the result of the bitwise operation",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "a",
        "description": "The lefthand side value of the bitwise operation.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "operator",
        "description": "The type of bitwise operation to perform.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "b",
        "description": "The righthand side value of the bitwise operation.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.avg(coll :: LIST<INTEGER | FLOAT>) :: FLOAT",
    "name": "apoc.coll.avg",
    "description": "Returns the average of the numbers in the `LIST<INTEGER | FLOAT>`.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to return the average from.",
        "isDeprecated": false,
        "type": "LIST<INTEGER | FLOAT>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.combinations(coll :: LIST<ANY>, minSelect :: INTEGER, maxSelect = -1 :: INTEGER) :: LIST<ANY>",
    "name": "apoc.coll.combinations",
    "description": "Returns a collection of all combinations of `LIST<ANY>` elements between the selection size `minSelect` and `maxSelect` (default: `minSelect`).",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to return the combinations from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "minSelect",
        "description": "The minimum selection size of the combination.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "maxSelect",
        "description": "The maximum selection size of the combination.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-1, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.contains(coll :: LIST<ANY>, value :: ANY) :: BOOLEAN",
    "name": "apoc.coll.contains",
    "description": "Returns whether or not the given value exists in the given collection.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to search for the given value.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "value",
        "description": "The value in the list to check for the existence of.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.containsAll(coll1 :: LIST<ANY>, coll2 :: LIST<ANY>) :: BOOLEAN",
    "name": "apoc.coll.containsAll",
    "description": "Returns whether or not all of the given values exist in the given collection.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll1",
        "description": "The list to search for the given values in.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "coll2",
        "description": "The list of values in the given list to check for the existence of.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.containsAllSorted(coll1 :: LIST<ANY>, coll2 :: LIST<ANY>) :: BOOLEAN",
    "name": "apoc.coll.containsAllSorted",
    "description": "Returns whether or not all of the given values in the second `LIST<ANY>` exist in an already sorted collection (using a binary search).",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll1",
        "description": "The sorted list to search for the given values.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "coll2",
        "description": "The list of values to check for existence of in the given list.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.containsDuplicates(coll :: LIST<ANY>) :: BOOLEAN",
    "name": "apoc.coll.containsDuplicates",
    "description": "Returns true if a collection contains duplicate elements.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to check for duplicates in.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.containsSorted(coll :: LIST<ANY>, value :: ANY) :: BOOLEAN",
    "name": "apoc.coll.containsSorted",
    "description": "Returns whether or not the given value exists in an already sorted collection (using a binary search).",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The sorted list to search for the given value.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "value",
        "description": "The value to check for the existence of in the list.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.different(coll :: LIST<ANY>) :: BOOLEAN",
    "name": "apoc.coll.different",
    "description": "Returns true if all the values in the given `LIST<ANY>` are unique.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to check for duplicates.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.disjunction(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.disjunction",
    "description": "Returns the disjunct set from two `LIST<ANY>` values.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list1",
        "description": "The list of values to compare against `list2` and form a disjunction from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "list2",
        "description": "The list of values to compare against `list1` and form a disjunction from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.dropDuplicateNeighbors(list :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.dropDuplicateNeighbors",
    "description": "Removes duplicate consecutive objects in the `LIST<ANY>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "The list to remove duplicate consecutive values from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.duplicates(coll :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.duplicates",
    "description": "Returns a `LIST<ANY>` of duplicate items in the collection.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to collect duplicate values from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.duplicatesWithCount(coll :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.duplicatesWithCount",
    "description": "Returns a `LIST<ANY>` of duplicate items in the collection and their count, keyed by `item` and `count`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to collect duplicate values and their count from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.fill(item :: STRING, count :: INTEGER) :: LIST<ANY>",
    "name": "apoc.coll.fill",
    "description": "Returns a `LIST<ANY>` with the given count of items.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "item",
        "description": "The item to be present in the returned list.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "count",
        "description": "The number of times the given item should appear in the returned list.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.flatten(coll :: LIST<ANY>, recursive = false :: BOOLEAN) :: LIST<ANY>",
    "name": "apoc.coll.flatten",
    "description": "Flattens the given `LIST<ANY>` (to flatten nested `LIST<ANY>` values, set recursive to true).",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to flatten.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "recursive",
        "description": "Whether nested list items should also be flattened.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=false, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.frequencies(coll :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.frequencies",
    "description": "Returns a `LIST<ANY>` of frequencies of the items in the collection, keyed by `item` and `count`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to return items and their count from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.frequenciesAsMap(coll :: LIST<ANY>) :: MAP",
    "name": "apoc.coll.frequenciesAsMap",
    "description": "Returns a `MAP` of frequencies of the items in the collection, keyed by `item` and `count`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to return items and their count from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.indexOf(coll :: LIST<ANY>, value :: ANY) :: INTEGER",
    "name": "apoc.coll.indexOf",
    "description": "Returns the index for the first occurrence of the specified value in the `LIST<ANY>`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to find the given value in.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "value",
        "description": "The value to find the first occurrence of in the given list.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.insert(coll :: LIST<ANY>, index :: INTEGER, value :: ANY) :: LIST<ANY>",
    "name": "apoc.coll.insert",
    "description": "Inserts a value into the specified index in the `LIST<ANY>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to insert a value into.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "index",
        "description": "The position in the list to insert the given value.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "value",
        "description": "The value to be inserted.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.insertAll(coll :: LIST<ANY>, index :: INTEGER, values :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.insertAll",
    "description": "Inserts all of the values into the `LIST<ANY>`, starting at the specified index.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to insert the values into.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "index",
        "description": "The position in the list to start inserting the given values.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "values",
        "description": "The values to be inserted.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.intersection(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.intersection",
    "description": "Returns the distinct intersection of two `LIST<ANY>` values.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list1",
        "description": "The list of values to compare against `list2` and form an intersection from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "list2",
        "description": "The list of values to compare against `list1` and form an intersection from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.isEqualCollection(coll :: LIST<ANY>, values :: LIST<ANY>) :: BOOLEAN",
    "name": "apoc.coll.isEqualCollection",
    "description": "Returns true if the two collections contain the same elements with the same cardinality in any order.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list of values to compare against `list2` and check for equality.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "values",
        "description": "The list of values to compare against `list1` and check for equality.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.max(values :: LIST<ANY>) :: ANY",
    "name": "apoc.coll.max",
    "description": "Returns the maximum of all values in the given `LIST<ANY>`.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "The list to find the maximum in.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.min(values :: LIST<ANY>) :: ANY",
    "name": "apoc.coll.min",
    "description": "Returns the minimum of all values in the given `LIST<ANY>`.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "The list to find the minimum in.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.occurrences(coll :: LIST<ANY>, item :: ANY) :: INTEGER",
    "name": "apoc.coll.occurrences",
    "description": "Returns the count of the given item in the collection.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to collect the count of the given value from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "item",
        "description": "The value to count in the given list.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.pairWithOffset(coll :: LIST<ANY>, offset :: INTEGER) :: LIST<ANY>",
    "name": "apoc.coll.pairWithOffset",
    "description": "Returns a `LIST<ANY>` of pairs defined by the offset.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to create pairs from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "offset",
        "description": "The offset to make each pair with from the given list.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.pairs(list :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.pairs",
    "description": "Returns a `LIST<ANY>` of adjacent elements in the `LIST<ANY>` ([1,2],[2,3],[3,null]).",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "The list to create pairs from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.pairsMin(list :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.pairsMin",
    "description": "Returns `LIST<ANY>` values of adjacent elements in the `LIST<ANY>` ([1,2],[2,3]), skipping the final element.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "The list to create pairs from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.partition(coll :: LIST<ANY>, batchSize :: INTEGER) :: LIST<ANY>",
    "name": "apoc.coll.partition",
    "description": "Partitions the original `LIST<ANY>` into a new `LIST<ANY>` of the given batch size.\nThe final `LIST<ANY>` may be smaller than the given batch size.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to partition into smaller sublists.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "batchSize",
        "description": "The max size of each partitioned sublist.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.randomItem(coll :: LIST<ANY>) :: ANY",
    "name": "apoc.coll.randomItem",
    "description": "Returns a random item from the `LIST<ANY>`, or null on `LIST<NOTHING>` or `LIST<NULL>`.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to return a random item from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.randomItems(coll :: LIST<ANY>, itemCount :: INTEGER, allowRepick = false :: BOOLEAN) :: LIST<ANY>",
    "name": "apoc.coll.randomItems",
    "description": "Returns a `LIST<ANY>` of `itemCount` random items from the original `LIST<ANY>` (optionally allowing elements in the original `LIST<ANY>` to be selected more than once).",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to return random items from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "itemCount",
        "description": "The number of random items to return from the list.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "allowRepick",
        "description": "Whether elements from the original list can be selected more than once.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=false, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.remove(coll :: LIST<ANY>, index :: INTEGER, length = 1 :: INTEGER) :: LIST<ANY>",
    "name": "apoc.coll.remove",
    "description": "Removes a range of values from the `LIST<ANY>`, beginning at position index for the given length of values.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to remove values from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "index",
        "description": "The starting index in the list to begin removing values from.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "length",
        "description": "The number of values to remove.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=1, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.removeAll(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.removeAll",
    "description": "Returns the first `LIST<ANY>` with all elements also present in the second `LIST<ANY>` removed.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list1",
        "description": "The list to remove values from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "list2",
        "description": "The values to remove from the given list.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.runningTotal(list :: LIST<INTEGER | FLOAT>) :: LIST<ANY>",
    "name": "apoc.coll.runningTotal",
    "description": "Returns an accumulative `LIST<INTEGER | FLOAT>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "The list to return a running total from.",
        "isDeprecated": false,
        "type": "LIST<INTEGER | FLOAT>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.set(coll :: LIST<ANY>, index :: INTEGER, value :: ANY) :: LIST<ANY>",
    "name": "apoc.coll.set",
    "description": "Sets the element at the given index to the new value.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to be updated.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "index",
        "description": "The position of the value in the list to be updated.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "value",
        "description": "The new value to be set.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.shuffle(coll :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.shuffle",
    "description": "Returns the `LIST<ANY>` shuffled.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to be shuffled.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.sort(coll :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.sort",
    "description": "Sorts the given `LIST<ANY>` into ascending order.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to be sorted.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.sortMaps(list :: LIST<MAP>, prop :: STRING) :: LIST<ANY>",
    "name": "apoc.coll.sortMaps",
    "description": "Sorts the given `LIST<MAP<STRING, ANY>>` into descending order, based on the `MAP` property indicated by `prop`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "The list of maps to be sorted.",
        "isDeprecated": false,
        "type": "LIST<MAP>"
      },
      {
        "name": "prop",
        "description": "The property key to be used to sort the list of maps by.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.sortMulti(coll :: LIST<MAP>, orderFields = [] :: LIST<STRING>, limit = -1 :: INTEGER, skip = 0 :: INTEGER) :: LIST<ANY>",
    "name": "apoc.coll.sortMulti",
    "description": "Sorts the given `LIST<MAP<STRING, ANY>>` by the given fields.\nTo indicate that a field should be sorted according to ascending values, prefix it with a caret (^).\nIt is also possible to add limits to the `LIST<MAP<STRING, ANY>>` and to skip values.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list of maps to be sorted.",
        "isDeprecated": false,
        "type": "LIST<MAP>"
      },
      {
        "name": "orderFields",
        "description": "The property keys to be used to sort the list of maps by.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<STRING>}",
        "type": "LIST<STRING>"
      },
      {
        "name": "limit",
        "description": "The amount of results to return.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-1, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "skip",
        "description": "The amount to skip by.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.sortNodes(coll :: LIST<NODE>, prop :: STRING) :: LIST<ANY>",
    "name": "apoc.coll.sortNodes",
    "description": "Sorts the given `LIST<NODE>` by the property of the nodes into descending order.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list of nodes to be sorted.",
        "isDeprecated": false,
        "type": "LIST<NODE>"
      },
      {
        "name": "prop",
        "description": "The property key on the node to be used to sort the list by.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.sortText(coll :: LIST<STRING>, conf = {} :: MAP) :: LIST<ANY>",
    "name": "apoc.coll.sortText",
    "description": "Sorts the given `LIST<STRING>` into ascending order.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list of strings to be sorted.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "conf",
        "description": "A map containing a single key `locale` to indicate which language to use when sorting the strings.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.stdev(list :: LIST<INTEGER | FLOAT>, isBiasCorrected = true :: BOOLEAN) :: INTEGER | FLOAT",
    "name": "apoc.coll.stdev",
    "description": "Returns sample or population standard deviation with `isBiasCorrected` true or false respectively.",
    "returnDescription": "INTEGER | FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "A list to collect the standard deviation from.",
        "isDeprecated": false,
        "type": "LIST<INTEGER | FLOAT>"
      },
      {
        "name": "isBiasCorrected",
        "description": "Will perform a sample standard deviation if `isBiasCorrected`, otherwise a population standard deviation is performed.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=true, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.subtract(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.subtract",
    "description": "Returns the first `LIST<ANY>` as a set with all the elements of the second `LIST<ANY>` removed.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list1",
        "description": "The list to remove values from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "list2",
        "description": "The list of values to be removed from `list1`.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.sum(coll :: LIST<INTEGER | FLOAT>) :: FLOAT",
    "name": "apoc.coll.sum",
    "description": "Returns the sum of all the `INTEGER | FLOAT` in the `LIST<INTEGER | FLOAT>`.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list of numbers to create a sum from.",
        "isDeprecated": false,
        "type": "LIST<INTEGER | FLOAT>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.sumLongs(coll :: LIST<INTEGER | FLOAT>) :: INTEGER",
    "name": "apoc.coll.sumLongs",
    "description": "Returns the sum of all the `INTEGER | FLOAT` in the `LIST<INTEGER | FLOAT>`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list of numbers to create a sum from after each is cast to a java Long value.",
        "isDeprecated": false,
        "type": "LIST<INTEGER | FLOAT>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.toSet(coll :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.toSet",
    "description": "Returns a unique `LIST<ANY>` from the given `LIST<ANY>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list of values to remove all duplicates from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.union(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.union",
    "description": "Returns the distinct union of the two given `LIST<ANY>` values.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list1",
        "description": "The list of values to compare against `list2` and form a distinct union from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "list2",
        "description": "The list of values to compare against `list1` and form a distinct union from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.unionAll(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.unionAll",
    "description": "Returns the full union of the two given `LIST<ANY>` values (duplicates included).",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list1",
        "description": "The list of values to compare against `list2` and form a union from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "list2",
        "description": "The list of values to compare against `list1` and form a union from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.coll.zip(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>",
    "name": "apoc.coll.zip",
    "description": "Returns the two given `LIST<ANY>` values zipped together as a `LIST<LIST<ANY>>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list1",
        "description": "The list to zip together with `list2`.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "list2",
        "description": "The list to zip together with `list1`.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.fromJsonList(list :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: LIST<ANY>",
    "name": "apoc.convert.fromJsonList",
    "description": "Converts the given JSON list into a Cypher `LIST<STRING>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "A JSON stringified list.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "path",
        "description": "A JSON path expression used to extract a certain part from the list.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "pathOptions",
        "description": "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=null, type=LIST<STRING>}",
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.fromJsonMap(map :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: MAP",
    "name": "apoc.convert.fromJsonMap",
    "description": "Converts the given JSON map into a Cypher `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "A JSON stringified map.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "path",
        "description": "A JSON path expression used to extract a certain part from the map.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "pathOptions",
        "description": "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=null, type=LIST<STRING>}",
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.getJsonProperty(node :: NODE, key :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: ANY",
    "name": "apoc.convert.getJsonProperty",
    "description": "Converts a serialized JSON object from the property of the given `NODE` into the equivalent Cypher structure (e.g. `MAP`, `LIST<ANY>`).",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node containing a JSON string property.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "key",
        "description": "The property key to convert.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "path",
        "description": "A JSON path expression used to extract a certain part from the node property string.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "pathOptions",
        "description": "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=null, type=LIST<STRING>}",
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.getJsonPropertyMap(node :: NODE, key :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: MAP",
    "name": "apoc.convert.getJsonPropertyMap",
    "description": "Converts a serialized JSON object from the property of the given `NODE` into a Cypher `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node containing a JSON stringified map.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "key",
        "description": "The property key to convert.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "path",
        "description": "A JSON path expression used to extract a certain part from the node property string.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "pathOptions",
        "description": "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=null, type=LIST<STRING>}",
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toJson(value :: ANY) :: STRING",
    "name": "apoc.convert.toJson",
    "description": "Serializes the given JSON value.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "The value to serialize.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toList(value :: ANY) :: LIST<ANY>",
    "name": "apoc.convert.toList",
    "description": "Converts the given value into a `LIST<ANY>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "The value to convert into a list.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toMap(map :: ANY) :: MAP",
    "name": "apoc.convert.toMap",
    "description": "Converts the given value into a `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The value to convert into a map.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toNode(node :: ANY) :: NODE",
    "name": "apoc.convert.toNode",
    "description": "Converts the given value into a `NODE`.",
    "returnDescription": "NODE",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The value to convert into a node.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toNodeList(list :: ANY) :: LIST<ANY>",
    "name": "apoc.convert.toNodeList",
    "description": "Converts the given value into a `LIST<NODE>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "The value to covert into a node list.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toRelationship(rel :: ANY) :: RELATIONSHIP",
    "name": "apoc.convert.toRelationship",
    "description": "Converts the given value into a `RELATIONSHIP`.",
    "returnDescription": "RELATIONSHIP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "rel",
        "description": "The value to convert into a relationship.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toRelationshipList(relList :: ANY) :: LIST<ANY>",
    "name": "apoc.convert.toRelationshipList",
    "description": "Converts the given value into a `LIST<RELATIONSHIP>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "relList",
        "description": "The value to convert into a relationship list.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toSet(list :: ANY) :: LIST<ANY>",
    "name": "apoc.convert.toSet",
    "description": "Converts the given value into a set represented in Cypher as a `LIST<ANY>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "list",
        "description": "The list to convert into a set.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.convert.toSortedJsonMap(value :: ANY, ignoreCase = true :: BOOLEAN) :: STRING",
    "name": "apoc.convert.toSortedJsonMap",
    "description": "Converts a serialized JSON object from the property of a given `NODE` into a Cypher `MAP`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "The value to convert into a stringified JSON map.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "ignoreCase",
        "description": "Whether or not to ignore the case of the keys when sorting.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=true, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": true,
    "aggregating": false,
    "signature": "apoc.create.uuid() :: STRING",
    "name": "apoc.create.uuid",
    "description": "Returns a UUID.",
    "returnDescription": "STRING",
    "deprecatedBy": "Neo4j randomUUID() function",
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.create.uuidBase64() :: STRING",
    "name": "apoc.create.uuidBase64",
    "description": "Returns a UUID encoded with base64.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.create.uuidBase64ToHex(base64Uuid :: STRING) :: STRING",
    "name": "apoc.create.uuidBase64ToHex",
    "description": "Takes the given base64 encoded UUID and returns it as a hexadecimal `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "base64Uuid",
        "description": "The string representing a UUID encoded with Base64.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.create.uuidHexToBase64(uuid :: STRING) :: STRING",
    "name": "apoc.create.uuidHexToBase64",
    "description": "Takes the given UUID represented as a hexadecimal `STRING` and returns it encoded with base64.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "uuid",
        "description": "The UUID represented as a hexadecimal string.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.create.vNode(labels :: LIST<STRING>, props = {} :: MAP) :: NODE",
    "name": "apoc.create.vNode",
    "description": "Returns a virtual `NODE`.",
    "returnDescription": "NODE",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "labels",
        "description": "The list of labels to assign to the virtual node.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "props",
        "description": "The map of properties to assign to the virtual node.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.create.vRelationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: RELATIONSHIP",
    "name": "apoc.create.vRelationship",
    "description": "Returns a virtual `RELATIONSHIP`.",
    "returnDescription": "RELATIONSHIP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "from",
        "description": "The start node to assign to the virtual relationship.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "relType",
        "description": "The type to assign to the virtual relationship.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "props",
        "description": "The map of properties to assign to the virtual relationship.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "to",
        "description": "The end node to assign to the virtual relationship.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.create.virtual.fromNode(node :: NODE, propertyNames :: LIST<STRING>) :: NODE",
    "name": "apoc.create.virtual.fromNode",
    "description": "Returns a virtual `NODE` from the given existing `NODE`. The virtual `NODE` only contains the requested properties.",
    "returnDescription": "NODE",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node to generate a virtual node from.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "propertyNames",
        "description": "The properties to copy to the virtual node.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.cypher.runFirstColumnMany(statement :: STRING, params :: MAP) :: LIST<ANY>",
    "name": "apoc.cypher.runFirstColumnMany",
    "description": "Runs the given statement with the given parameters and returns the first column collected into a `LIST<ANY>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "statement",
        "description": "The Cypher query to execute.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters needed for input to the given Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.cypher.runFirstColumnSingle(statement :: STRING, params :: MAP) :: ANY",
    "name": "apoc.cypher.runFirstColumnSingle",
    "description": "Runs the given statement with the given parameters and returns the first element of the first column.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "statement",
        "description": "The Cypher query to execute.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters needed for input to the given Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.data.url(url :: STRING) :: MAP",
    "name": "apoc.data.url",
    "description": "Turns a URL into a `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "url",
        "description": "The URL to extract metadata from.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.add(time :: INTEGER, unit :: STRING, addValue :: INTEGER, addUnit :: STRING) :: INTEGER",
    "name": "apoc.date.add",
    "description": "Adds a unit of specified time to the given timestamp.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "time",
        "description": "The timestamp to add time to.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "unit",
        "description": "The unit the given timestamp is in.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "addValue",
        "description": "The amount of time to add to the given timestamp.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "addUnit",
        "description": "The unit the added value is in.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.convert(time :: INTEGER, unit :: STRING, toUnit :: STRING) :: INTEGER",
    "name": "apoc.date.convert",
    "description": "Converts the given timestamp from one time unit into a timestamp of a different time unit.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "time",
        "description": "The timestamp to be converted.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "unit",
        "description": "The unit the given timestamp is in.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "toUnit",
        "description": "The unit to convert the given timestamp to.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.convertFormat(temporal :: STRING, currentFormat :: STRING, convertTo = yyyy-MM-dd :: STRING) :: STRING",
    "name": "apoc.date.convertFormat",
    "description": "Converts a `STRING` of one type of date format into a `STRING` of another type of date format.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "temporal",
        "description": "A string representation of a temporal value.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "currentFormat",
        "description": "The format the given temporal is formatted as.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "convertTo",
        "description": "The format to convert the given temporal value to.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=yyyy-MM-dd, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.currentTimestamp() :: INTEGER",
    "name": "apoc.date.currentTimestamp",
    "description": "Returns the current Unix epoch timestamp in milliseconds.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.field(time :: INTEGER, unit = d :: STRING, timezone = UTC :: STRING) :: INTEGER",
    "name": "apoc.date.field",
    "description": "Returns the value of one field from the given date time.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "time",
        "description": "The timestamp in ms since epoch to return a field from.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "unit",
        "description": "The unit of the field to return the value of.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=d, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "timezone",
        "description": "The timezone the given timestamp is in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=UTC, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.fields(date :: STRING, pattern = yyyy-MM-dd HH:mm:ss :: STRING) :: MAP",
    "name": "apoc.date.fields",
    "description": "Splits the given date into fields returning a `MAP` containing the values of each field.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "date",
        "description": "A string representation of a temporal value.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "pattern",
        "description": "The format the given temporal is formatted as.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.format(time :: INTEGER, unit = ms :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone =  :: STRING) :: STRING",
    "name": "apoc.date.format",
    "description": "Returns a `STRING` representation of the time value.\nThe time unit (default: ms), date format (default: ISO), and time zone (default: current time zone) can all be changed.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "time",
        "description": "The timestamp since epoch to format.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "unit",
        "description": "The unit of the given timestamp.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=ms, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "format",
        "description": "The format to convert the given temporal value to.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "timezone",
        "description": "The timezone the given timestamp is in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.fromISO8601(time :: STRING) :: INTEGER",
    "name": "apoc.date.fromISO8601",
    "description": "Converts the given date `STRING` (ISO8601) to an `INTEGER` representing the time value in milliseconds.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "time",
        "description": "The datetime to convert to ms.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.parse(time :: STRING, unit = ms :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone =  :: STRING) :: INTEGER",
    "name": "apoc.date.parse",
    "description": "Parses the given date `STRING` from a specified format into the specified time unit.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "time",
        "description": "The datetime to convert.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "unit",
        "description": "The conversion unit.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=ms, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "format",
        "description": "The format the given datetime is in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "timezone",
        "description": "The timezone the given datetime is in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.systemTimezone() :: STRING",
    "name": "apoc.date.systemTimezone",
    "description": "Returns the display name of the system time zone (e.g. Europe/London).",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.toISO8601(time :: INTEGER, unit = ms :: STRING) :: STRING",
    "name": "apoc.date.toISO8601",
    "description": "Returns a `STRING` representation of a specified time value in the ISO8601 format.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "time",
        "description": "The timestamp since epoch to format.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "unit",
        "description": "The unit of the given timestamp.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=ms, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.date.toYears(value :: ANY, format = yyyy-MM-dd HH:mm:ss :: STRING) :: FLOAT",
    "name": "apoc.date.toYears",
    "description": "Converts the given timestamp or the given date into a `FLOAT` representing years.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "The timestamp or datetime string to extract the years from.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "format",
        "description": "The format the given datetime string is in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.diff.nodes(leftNode :: NODE, rightNode :: NODE) :: MAP",
    "name": "apoc.diff.nodes",
    "description": "Returns a `MAP` detailing the differences between the two given `NODE` values.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "leftNode",
        "description": "The first node to compare against the second node.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "rightNode",
        "description": "The second node to compare against the first node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.hashing.fingerprint(object :: ANY, excludedPropertyKeys = [] :: LIST<STRING>) :: STRING",
    "name": "apoc.hashing.fingerprint",
    "description": "Calculates a MD5 checksum over a `NODE` or `RELATIONSHIP` (identical entities share the same checksum).\nUnsuitable for cryptographic use-cases.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "object",
        "description": "A node or relationship to hash.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "excludedPropertyKeys",
        "description": "Property keys to exclude from the hashing.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<STRING>}",
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.hashing.fingerprintGraph(propertyExcludes = [] :: LIST<STRING>) :: STRING",
    "name": "apoc.hashing.fingerprintGraph",
    "description": "Calculates a MD5 checksum over the full graph.\nThis function uses in-memory data structures.\nUnsuitable for cryptographic use-cases.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "propertyExcludes",
        "description": "Property keys to exclude from the hashing.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<STRING>}",
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.hashing.fingerprinting(object :: ANY, config = {} :: MAP) :: STRING",
    "name": "apoc.hashing.fingerprinting",
    "description": "Calculates a MD5 checksum over a `NODE` or `RELATIONSHIP` (identical entities share the same checksum).\nUnlike `apoc.hashing.fingerprint()`, this function supports a number of config parameters.\nUnsuitable for cryptographic use-cases.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "object",
        "description": "A node or relationship to hash.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "config",
        "description": "{\n    digestAlgorithm = \"MD5\" :: STRING,\n    strategy = \"LAZY\" :: STRING,\n    nodeAllowMap = [] :: MAP<STRING, LIST<STRING>>,\n    relAllowMap = [] :: MAP<STRING, LIST<STRING>>,\n    relDisallowMap = [] :: MAP<STRING, LIST<STRING>>,\n    mapAllowList = [] :: LIST<STRING>,\n    mapDisallowList = [] :: LIST<STRING>,\n    allNodesAllowList = [] :: LIST<STRING>,\n    allNodesDisallowList = [] :: LIST<STRING>,\n    allRelsAllowList = [] :: LIST<STRING>,\n    allRelsDisallowList = [] :: LIST<STRING>\n}",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.json.path(json :: STRING, path = $ :: STRING, pathOptions = null :: LIST<STRING>) :: ANY",
    "name": "apoc.json.path",
    "description": "Returns the given JSON path.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "json",
        "description": "A JSON string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "path",
        "description": "The path to extract from the JSON string.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=$, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "pathOptions",
        "description": "A list of JSON path option enum values: ALWAYS_RETURN_LIST, AS_PATH_LIST, DEFAULT_PATH_LEAF_TO_NULL, REQUIRE_PROPERTIES, SUPPRESS_EXCEPTIONS.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=null, type=LIST<STRING>}",
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.label.exists(node :: ANY, label :: STRING) :: BOOLEAN",
    "name": "apoc.label.exists",
    "description": "Returns true or false depending on whether or not the given label exists.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "A node to check for the given label on.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "label",
        "description": "The given label to check for existence.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.clean(map :: MAP, keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP",
    "name": "apoc.map.clean",
    "description": "Filters the keys and values contained in the given `LIST<ANY>` values.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to clean.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "keys",
        "description": "The list of property keys to be removed.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "values",
        "description": "The list of values to be removed.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.flatten(map :: MAP, delimiter = . :: STRING) :: MAP",
    "name": "apoc.map.flatten",
    "description": "Flattens nested items in the given `MAP`.\nThis function is the reverse of the `apoc.map.unflatten` function.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "A nested map to flatten.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "delimiter",
        "description": "The delimiter used to separate the levels of the flattened map.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=., type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.fromLists(keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP",
    "name": "apoc.map.fromLists",
    "description": "Creates a `MAP` from the keys and values in the given `LIST<ANY>` values.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "keys",
        "description": "A list of keys to create a map from.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "values",
        "description": "A list of values associated with the keys to create a map from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.fromNodes(label :: STRING, prop :: STRING) :: MAP",
    "name": "apoc.map.fromNodes",
    "description": "Returns a `MAP` of the given prop to the node of the given label.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "label",
        "description": "The node labels from which the map will be created.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "prop",
        "description": "The property name to map the returned nodes by.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.fromPairs(pairs :: LIST<LIST<ANY>>) :: MAP",
    "name": "apoc.map.fromPairs",
    "description": "Creates a `MAP` from the given `LIST<LIST<ANY>>` of key-value pairs.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "pairs",
        "description": "A list of pairs to create a map from.",
        "isDeprecated": false,
        "type": "LIST<LIST<ANY>>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.fromValues(values :: LIST<ANY>) :: MAP",
    "name": "apoc.map.fromValues",
    "description": "Creates a `MAP` from the alternating keys and values in the given `LIST<ANY>`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "A list of keys and values listed pairwise to create a map from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.get(map :: MAP, key :: STRING, value = null :: ANY, fail = true :: BOOLEAN) :: ANY",
    "name": "apoc.map.get",
    "description": "Returns a value for the given key.\nIf the given key does not exist, or lacks a default value, this function will throw an exception.",
    "returnDescription": "ANY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to extract a value from.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "key",
        "description": "The key to extract.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "value",
        "description": "The default value of the given key.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=null, type=ANY}",
        "type": "ANY"
      },
      {
        "name": "fail",
        "description": "If a key is not present and no default is provided, it will either throw an exception if true, or return a null value",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=true, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.groupBy(values :: LIST<ANY>, key :: STRING) :: MAP",
    "name": "apoc.map.groupBy",
    "description": "Creates a `MAP` of the `LIST<ANY>` keyed by the given property, with single values.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "A list of map values to be grouped.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "key",
        "description": "The key to group the map values by.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.groupByMulti(values :: LIST<ANY>, key :: STRING) :: MAP",
    "name": "apoc.map.groupByMulti",
    "description": "Creates a `MAP` of the `LIST<ANY>` values keyed by the given property, with the `LIST<ANY>` values.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "A list of map values to be grouped.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "key",
        "description": "The key to group the map values by.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.merge(map1 :: MAP, map2 :: MAP) :: MAP",
    "name": "apoc.map.merge",
    "description": "Merges the two given `MAP` values into one `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map1",
        "description": "The first map to merge with the second map.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "map2",
        "description": "The second map to merge with the first map.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.mergeList(maps :: LIST<MAP>) :: MAP",
    "name": "apoc.map.mergeList",
    "description": "Merges all `MAP` values in the given `LIST<MAP<STRING, ANY>>` into one `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "maps",
        "description": "A list of maps to merge.",
        "isDeprecated": false,
        "type": "LIST<MAP>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.mget(map :: MAP, keys :: LIST<STRING>, values = [] :: LIST<ANY>, fail = true :: BOOLEAN) :: LIST<ANY>",
    "name": "apoc.map.mget",
    "description": "Returns a `LIST<ANY>` for the given keys.\nIf one of the keys does not exist, or lacks a default value, this function will throw an exception.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to extract a list of values from.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "keys",
        "description": "The list of keys to extract.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "values",
        "description": "The default values of the given keys.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<ANY>}",
        "type": "LIST<ANY>"
      },
      {
        "name": "fail",
        "description": "If a key is not present and no default is provided, it will either throw an exception if true, or return a null value",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=true, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.removeKey(map :: MAP, key :: STRING, config = {} :: MAP) :: MAP",
    "name": "apoc.map.removeKey",
    "description": "Removes the given key from the `MAP` (recursively if recursive is true).",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to be updated.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "key",
        "description": "The key to remove from the map.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "{ recursive = false :: BOOLEAN }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.removeKeys(map :: MAP, keys :: LIST<STRING>, config = {} :: MAP) :: MAP",
    "name": "apoc.map.removeKeys",
    "description": "Removes the given keys from the `MAP` (recursively if recursive is true).",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to be updated.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "keys",
        "description": "The keys to remove from the map.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "config",
        "description": "{ recursive = false :: BOOLEAN }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.setEntry(map :: MAP, key :: STRING, value :: ANY) :: MAP",
    "name": "apoc.map.setEntry",
    "description": "Adds or updates the given entry in the `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to be updated.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "key",
        "description": "The key to add or update the map with.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "value",
        "description": "The value to set the given key to.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.setKey(map :: MAP, key :: STRING, value :: ANY) :: MAP",
    "name": "apoc.map.setKey",
    "description": "Adds or updates the given entry in the `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to be updated.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "key",
        "description": "The key to add or update the map with.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "value",
        "description": "The value to set the given key to.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.setLists(map :: MAP, keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP",
    "name": "apoc.map.setLists",
    "description": "Adds or updates the given keys/value pairs provided in `LIST<ANY>` format (e.g. [key1, key2],[value1, value2]) in a `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to be updated.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "keys",
        "description": "A list of keys to add or update the map with.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "values",
        "description": "A list of values associated to the keys to add or update the map with.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.setPairs(map :: MAP, pairs :: LIST<LIST<ANY>>) :: MAP",
    "name": "apoc.map.setPairs",
    "description": "Adds or updates the given key/value pairs (e.g. [key1,value1],[key2,value2]) in a `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to be updated.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "pairs",
        "description": "A list of pairs to add or update the map with.",
        "isDeprecated": false,
        "type": "LIST<LIST<ANY>>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.setValues(map :: MAP, pairs :: LIST<ANY>) :: MAP",
    "name": "apoc.map.setValues",
    "description": "Adds or updates the alternating key/value pairs (e.g. [key1,value1,key2,value2]) in a `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to be updated.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "pairs",
        "description": "A list of items listed pairwise to add or update the map with.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.sortedProperties(map :: MAP, ignoreCase = true :: BOOLEAN) :: LIST<ANY>",
    "name": "apoc.map.sortedProperties",
    "description": "Returns a `LIST<ANY>` of key/value pairs.\nThe pairs are sorted by alphabetically by key, with optional case sensitivity.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to extract the properties from.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "ignoreCase",
        "description": "Whether or not to take the case into account when sorting.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=true, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.submap(map :: MAP, keys :: LIST<STRING>, values = [] :: LIST<ANY>, fail = true :: BOOLEAN) :: MAP",
    "name": "apoc.map.submap",
    "description": "Returns a sub-map for the given keys.\nIf one of the keys does not exist, or lacks a default value, this function will throw an exception.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to extract a submap from.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "keys",
        "description": "The list of keys to extract into a submap.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "values",
        "description": "The default values of the given keys.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<ANY>}",
        "type": "LIST<ANY>"
      },
      {
        "name": "fail",
        "description": "If a key is not present and no default is provided, it will either throw an exception if true, or return a null value.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=true, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.unflatten(map :: MAP, delimiter = . :: STRING) :: MAP",
    "name": "apoc.map.unflatten",
    "description": "Unflattens items in the given `MAP` to nested items.\nThis function is the reverse of the `apoc.map.flatten` function.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "The map to unflatten.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "delimiter",
        "description": "The delimiter used to separate the levels of the flattened map.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=., type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.updateTree(tree :: MAP, key :: STRING, data :: LIST<LIST<ANY>>) :: MAP",
    "name": "apoc.map.updateTree",
    "description": "Adds the data `MAP` on each level of the nested tree, where the key-value pairs match.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "tree",
        "description": "The map to be updated.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "key",
        "description": "The name of the key to match on.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "data",
        "description": "A list of pairs, where the first item is the value to match with the given key, and the second is a map to add to the tree.",
        "isDeprecated": false,
        "type": "LIST<LIST<ANY>>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.map.values(map :: MAP, keys = [] :: LIST<STRING>, addNullsForMissing = false :: BOOLEAN) :: LIST<ANY>",
    "name": "apoc.map.values",
    "description": "Returns a `LIST<ANY>` indicated by the given keys (returns a null value if a given key is missing).",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "map",
        "description": "A map to extract values from.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "keys",
        "description": "A list of keys to extract from the given map.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<STRING>}",
        "type": "LIST<STRING>"
      },
      {
        "name": "addNullsForMissing",
        "description": "Whether or not to return missing values as null values.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=false, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.cosh(value :: FLOAT) :: FLOAT",
    "name": "apoc.math.cosh",
    "description": "Returns the hyperbolic cosine.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An angle in radians.",
        "isDeprecated": false,
        "type": "FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.coth(value :: FLOAT) :: FLOAT",
    "name": "apoc.math.coth",
    "description": "Returns the hyperbolic cotangent.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An angle in radians.",
        "isDeprecated": false,
        "type": "FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.csch(value :: FLOAT) :: FLOAT",
    "name": "apoc.math.csch",
    "description": "Returns the hyperbolic cosecant.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An angle in radians.",
        "isDeprecated": false,
        "type": "FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.maxByte() :: INTEGER",
    "name": "apoc.math.maxByte",
    "description": "Returns the maximum value of a byte.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.maxDouble() :: FLOAT",
    "name": "apoc.math.maxDouble",
    "description": "Returns the largest positive finite value of type double.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.maxInt() :: INTEGER",
    "name": "apoc.math.maxInt",
    "description": "Returns the maximum value of an integer.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.maxLong() :: INTEGER",
    "name": "apoc.math.maxLong",
    "description": "Returns the maximum value of a long.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.minByte() :: INTEGER",
    "name": "apoc.math.minByte",
    "description": "Returns the minimum value of a byte.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.minDouble() :: FLOAT",
    "name": "apoc.math.minDouble",
    "description": "Returns the smallest positive non-zero value of type double.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.minInt() :: INTEGER",
    "name": "apoc.math.minInt",
    "description": "Returns the minimum value of an integer.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.minLong() :: INTEGER",
    "name": "apoc.math.minLong",
    "description": "Returns the minimum value of a long.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.sech(value :: FLOAT) :: FLOAT",
    "name": "apoc.math.sech",
    "description": "Returns the hyperbolic secant of the given value.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An angle in radians.",
        "isDeprecated": false,
        "type": "FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.sigmoid(value :: FLOAT) :: FLOAT",
    "name": "apoc.math.sigmoid",
    "description": "Returns the sigmoid of the given value.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An angle in radians.",
        "isDeprecated": false,
        "type": "FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.sigmoidPrime(value :: FLOAT) :: FLOAT",
    "name": "apoc.math.sigmoidPrime",
    "description": "Returns the sigmoid prime [ sigmoid(val) * (1 - sigmoid(val)) ] of the given value.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An angle in radians.",
        "isDeprecated": false,
        "type": "FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.sinh(value :: FLOAT) :: FLOAT",
    "name": "apoc.math.sinh",
    "description": "Returns the hyperbolic sine of the given value.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An angle in radians.",
        "isDeprecated": false,
        "type": "FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.math.tanh(value :: FLOAT) :: FLOAT",
    "name": "apoc.math.tanh",
    "description": "Returns the hyperbolic tangent of the given value.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An angle in radians.",
        "isDeprecated": false,
        "type": "FLOAT"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.meta.cypher.isType(value :: ANY, type :: STRING) :: BOOLEAN",
    "name": "apoc.meta.cypher.isType",
    "description": "Returns true if the given value matches the given type.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An object to check the type of.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "type",
        "description": "The verification type.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.meta.cypher.type(value :: ANY) :: STRING",
    "name": "apoc.meta.cypher.type",
    "description": "Returns the type name of the given value.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "An object to get the type of.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.meta.cypher.types(props :: ANY) :: MAP",
    "name": "apoc.meta.cypher.types",
    "description": "Returns a `MAP` containing the type names of the given values.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "props",
        "description": "A relationship, node or map to get the property types from.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.meta.nodes.count(nodes = [] :: LIST<STRING>, config = {} :: MAP) :: INTEGER",
    "name": "apoc.meta.nodes.count",
    "description": "Returns the sum of the `NODE` values with the given labels in the `LIST<STRING>`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "A list of node labels.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<STRING>}",
        "type": "LIST<STRING>"
      },
      {
        "name": "config",
        "description": "A relationship, node or map to get the property types from. { includeRels = [] :: LIST<STRING> }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.node.degree(node :: NODE, relTypes =  :: STRING) :: INTEGER",
    "name": "apoc.node.degree",
    "description": "Returns the total degrees of the given `NODE`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node to count the total number of relationships on.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "relTypes",
        "description": "The relationship types to restrict the count to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.node.degree.in(node :: NODE, relTypes =  :: STRING) :: INTEGER",
    "name": "apoc.node.degree.in",
    "description": "Returns the total number of incoming `RELATIONSHIP` values connected to the given `NODE`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node for which to count the total number of incoming relationships.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "relTypes",
        "description": "The relationship type to restrict the count to.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.node.degree.out(node :: NODE, relTypes =  :: STRING) :: INTEGER",
    "name": "apoc.node.degree.out",
    "description": "Returns the total number of outgoing `RELATIONSHIP` values from the given `NODE`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node for which to count the total number of outgoing relationships.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "relTypes",
        "description": "The relationship type to restrict the count to.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.node.id(node :: NODE) :: INTEGER",
    "name": "apoc.node.id",
    "description": "Returns the id for the given virtual `NODE`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node to return the id from.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.node.labels(node :: NODE) :: LIST<ANY>",
    "name": "apoc.node.labels",
    "description": "Returns the labels for the given virtual `NODE`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node to return labels from.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.node.relationship.exists(node :: NODE, relTypes =  :: STRING) :: BOOLEAN",
    "name": "apoc.node.relationship.exists",
    "description": "Returns a `BOOLEAN` based on whether the given `NODE` has a connecting `RELATIONSHIP` (or whether the given `NODE` has a connecting `RELATIONSHIP` of the given type and direction).",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node to check for the specified relationship types.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "relTypes",
        "description": "The relationship types to check for on the given node. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.node.relationship.types(node :: NODE, relTypes =  :: STRING) :: LIST<ANY>",
    "name": "apoc.node.relationship.types",
    "description": "Returns a `LIST<STRING>` of distinct `RELATIONSHIP` types for the given `NODE`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node to return the connected relationship types from.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "relTypes",
        "description": "If not empty, provides an allow list of relationship types to be returned. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.node.relationships.exist(node :: NODE, relTypes =  :: STRING) :: MAP",
    "name": "apoc.node.relationships.exist",
    "description": "Returns a `BOOLEAN` based on whether the given `NODE` has connecting `RELATIONSHIP` values (or whether the given `NODE` has connecting `RELATIONSHIP` values of the given type and direction).",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node to check for the specified relationship types.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "relTypes",
        "description": "The relationship types to check for on the given node. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|....",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.nodes.connected(startNode :: NODE, endNode :: NODE, types =  :: STRING) :: BOOLEAN",
    "name": "apoc.nodes.connected",
    "description": "Returns true when a given `NODE` is directly connected to another given `NODE`.\nThis function is optimized for dense nodes.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "startNode",
        "description": "The node to check if it is directly connected to the second node.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "endNode",
        "description": "The node to check if it is directly connected to the first node.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "types",
        "description": "If not empty, provides an allow list of relationship types the nodes can be connected by. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.nodes.isDense(node :: NODE) :: BOOLEAN",
    "name": "apoc.nodes.isDense",
    "description": "Returns true if the given `NODE` is a dense node.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "node",
        "description": "The node to check for being dense or not.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.nodes.relationship.types(nodes :: ANY, types =  :: STRING) :: LIST<ANY>",
    "name": "apoc.nodes.relationship.types",
    "description": "Returns a `LIST<STRING>` of distinct `RELATIONSHIP` types from the given `LIST<NODE>` values.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "Nodes to return connected relationship types from.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "types",
        "description": "If not empty, provides an allow list of relationship types to be returned. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.nodes.relationships.exist(nodes :: ANY, types =  :: STRING) :: LIST<ANY>",
    "name": "apoc.nodes.relationships.exist",
    "description": "Returns a `BOOLEAN` based on whether or not the given `NODE` values have the given `RELATIONSHIP` values.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "Nodes to check for the specified relationship types.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "types",
        "description": "The relationship types to check for on the given nodes. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.arabicToRoman(number :: ANY) :: STRING",
    "name": "apoc.number.arabicToRoman",
    "description": "Converts the given Arabic numbers to Roman numbers.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "number",
        "description": "A number to be converted to a Roman number represented as a string.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.exact.add(stringA :: STRING, stringB :: STRING) :: STRING",
    "name": "apoc.number.exact.add",
    "description": "Returns the result of adding the two given large numbers (using Java BigDecimal).",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "stringA",
        "description": "A string representation of a number to be added to the second number.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "stringB",
        "description": "A string representation of a number to be added to the first number.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.exact.div(stringA :: STRING, stringB :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: STRING",
    "name": "apoc.number.exact.div",
    "description": "Returns the result of dividing a given large number with another given large number (using Java BigDecimal).",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "stringA",
        "description": "A string representation of a number to be divided by the second number.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "stringB",
        "description": "A string representation of a number to divide the first number by.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "precision",
        "description": "The rounding precision.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "roundingMode",
        "description": "A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=HALF_UP, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.exact.mul(stringA :: STRING, stringB :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: STRING",
    "name": "apoc.number.exact.mul",
    "description": "Returns the result of multiplying two given large numbers (using Java BigDecimal).",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "stringA",
        "description": "A string representation of a number to multiply by the second number.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "stringB",
        "description": "A string representation of a number to multiply by the first number.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "precision",
        "description": "The rounding precision.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "roundingMode",
        "description": "A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=HALF_UP, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.exact.sub(stringA :: STRING, stringB :: STRING) :: STRING",
    "name": "apoc.number.exact.sub",
    "description": "Returns the result of subtracting a given large number from another given large number (using Java BigDecimal).",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "stringA",
        "description": "A string representation of a number to have a second number subtracted from.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "stringB",
        "description": "A string representation of a number to subtract from the first number.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.exact.toExact(number :: INTEGER) :: INTEGER",
    "name": "apoc.number.exact.toExact",
    "description": "Returns the exact value of the given number (using Java BigDecimal).",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "number",
        "description": "An integer to receive the exact value of.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.exact.toFloat(string :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: FLOAT",
    "name": "apoc.number.exact.toFloat",
    "description": "Returns the `FLOAT` of the given large number (using Java BigDecimal).",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "string",
        "description": "A large number represented as a string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "precision",
        "description": "The rounding precision.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "roundingMode",
        "description": "A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=HALF_UP, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.exact.toInteger(string :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: INTEGER",
    "name": "apoc.number.exact.toInteger",
    "description": "Returns the `INTEGER` of the given large number (using Java BigDecimal).",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "string",
        "description": "A large number represented as a string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "precision",
        "description": "The rounding precision.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "roundingMode",
        "description": "A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=HALF_UP, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.format(number :: ANY, pattern =  :: STRING, language =  :: STRING) :: STRING",
    "name": "apoc.number.format",
    "description": "Formats the given `INTEGER` or `FLOAT` using the given pattern and language to produce a `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "number",
        "description": "The number to format.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "pattern",
        "description": "The pattern to format the number in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "language",
        "description": "An ISO-compliant language tag.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.parseFloat(text :: STRING, pattern =  :: STRING, language =  :: STRING) :: FLOAT",
    "name": "apoc.number.parseFloat",
    "description": "Parses the given `STRING` using the given pattern and language to produce a `FLOAT`.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to parse a float from.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "pattern",
        "description": "The pattern the given string is in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "language",
        "description": "An ISO-compliant language tag.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.parseInt(text :: STRING, pattern =  :: STRING, language =  :: STRING) :: INTEGER",
    "name": "apoc.number.parseInt",
    "description": "Parses the given `STRING` using the given pattern and language to produce a `INTEGER`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to parse an integer from.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "pattern",
        "description": "The pattern the given string is in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "language",
        "description": "An ISO-compliant language tag.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.number.romanToArabic(romanNumber :: STRING) :: INTEGER | FLOAT",
    "name": "apoc.number.romanToArabic",
    "description": "Converts the given Roman numbers to Arabic numbers.",
    "returnDescription": "INTEGER | FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "romanNumber",
        "description": "A Roman number to be converted.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.path.combine(path1 :: PATH, path2 :: PATH) :: PATH",
    "name": "apoc.path.combine",
    "description": "Combines the two given `PATH` values into one `PATH`.",
    "returnDescription": "PATH",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "path1",
        "description": "The first path to combine with the second path.",
        "isDeprecated": false,
        "type": "PATH"
      },
      {
        "name": "path2",
        "description": "The second path to combine with the first path.",
        "isDeprecated": false,
        "type": "PATH"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.path.create(startNode :: NODE, rels = [] :: LIST<RELATIONSHIP>) :: PATH",
    "name": "apoc.path.create",
    "description": "Returns a `PATH` from the given start `NODE` and `LIST<RELATIONSHIP>`.",
    "returnDescription": "PATH",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "startNode",
        "description": "The starting node of the new path.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "rels",
        "description": "The list of relationships to create the path from.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}",
        "type": "LIST<RELATIONSHIP>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.path.elements(path :: PATH) :: LIST<ANY>",
    "name": "apoc.path.elements",
    "description": "Converts the given `PATH` into a `LIST<NODE | RELATIONSHIP>`.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "path",
        "description": "The path to be converted into a list of nodes and relationships.",
        "isDeprecated": false,
        "type": "PATH"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.path.slice(path :: PATH, offset = 0 :: INTEGER, length = -1 :: INTEGER) :: PATH",
    "name": "apoc.path.slice",
    "description": "Returns a new `PATH` of the given length, taken from the given `PATH` at the given offset.",
    "returnDescription": "PATH",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "path",
        "description": "The path to be sliced.",
        "isDeprecated": false,
        "type": "PATH"
      },
      {
        "name": "offset",
        "description": "The offset to begin the new path from.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "length",
        "description": "The length of the new path.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-1, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.rel.endNode(rel :: RELATIONSHIP) :: NODE",
    "name": "apoc.rel.endNode",
    "description": "Returns the end `NODE` for the given virtual `RELATIONSHIP`.",
    "returnDescription": "NODE",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "rel",
        "description": "The relationship to get the end node from.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.rel.id(rel :: RELATIONSHIP) :: INTEGER",
    "name": "apoc.rel.id",
    "description": "Returns the id for the given virtual `RELATIONSHIP`.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "rel",
        "description": "The relationship to get the id from.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.rel.startNode(rel :: RELATIONSHIP) :: NODE",
    "name": "apoc.rel.startNode",
    "description": "Returns the start `NODE` for the given virtual `RELATIONSHIP`.",
    "returnDescription": "NODE",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "rel",
        "description": "The relationship to get the start node from.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.rel.type(rel :: RELATIONSHIP) :: STRING",
    "name": "apoc.rel.type",
    "description": "Returns the type for the given virtual `RELATIONSHIP`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "rel",
        "description": "The relationship to get the type from.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.schema.node.constraintExists(labelName :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN",
    "name": "apoc.schema.node.constraintExists",
    "description": "Returns a `BOOLEAN` depending on whether or not a constraint exists for the given `NODE` label with the given property names.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "labelName",
        "description": "The node label to check for a constraint on.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "propertyName",
        "description": "The property names to check for a constraint on.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.schema.node.indexExists(labelName :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN",
    "name": "apoc.schema.node.indexExists",
    "description": "Returns a `BOOLEAN` depending on whether or not an index exists for the given `NODE` label with the given property names.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "labelName",
        "description": "The node label to check for an index on.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "propertyName",
        "description": "The property names to check for an index on.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.schema.relationship.constraintExists(type :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN",
    "name": "apoc.schema.relationship.constraintExists",
    "description": "Returns a `BOOLEAN` depending on whether or not a constraint exists for the given `RELATIONSHIP` type with the given property names.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "type",
        "description": "The relationship type to check for a constraint on.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "propertyName",
        "description": "The property names to check for a constraint on.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.schema.relationship.indexExists(type :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN",
    "name": "apoc.schema.relationship.indexExists",
    "description": "Returns a `BOOLEAN` depending on whether or not an index exists for the given `RELATIONSHIP` type with the given property names.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "type",
        "description": "The relationship type to check for an index on.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "propertyName",
        "description": "The property names to check for an index on.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.scoring.existence(score :: INTEGER, exists :: BOOLEAN) :: FLOAT",
    "name": "apoc.scoring.existence",
    "description": "Returns the given score if true, 0 if false.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "score",
        "description": "The score to return if the exists is true.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "exists",
        "description": "Whether or not to return the score.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.scoring.pareto(minimumThreshold :: INTEGER, eightyPercentValue :: INTEGER, maximumValue :: INTEGER, score :: INTEGER) :: FLOAT",
    "name": "apoc.scoring.pareto",
    "description": "Applies a Pareto scoring function over the given `INTEGER` values.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "minimumThreshold",
        "description": "The minimum threshold for the score.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "eightyPercentValue",
        "description": "The eighty percent value.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "maximumValue",
        "description": "The maximum value.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "score",
        "description": "The score.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.temporal.format(temporal :: ANY, format = yyyy-MM-dd :: STRING) :: STRING",
    "name": "apoc.temporal.format",
    "description": "Formats the given temporal value into the given time format.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "temporal",
        "description": "A temporal value to be formatted.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "format",
        "description": "The format to return the temporal value in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=yyyy-MM-dd, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.temporal.formatDuration(input :: ANY, format :: STRING) :: STRING",
    "name": "apoc.temporal.formatDuration",
    "description": "Formats the given duration into the given time format.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "input",
        "description": "The duration value to be formatted into a string.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "format",
        "description": "The format to return the duration in.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.temporal.toZonedTemporal(time :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone = UTC :: STRING) :: ZONED DATETIME",
    "name": "apoc.temporal.toZonedTemporal",
    "description": "Parses the given date `STRING` using the specified format into the given time zone.",
    "returnDescription": "ZONED DATETIME",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "time",
        "description": "The date string to be parsed.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "format",
        "description": "The format of the given date string.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "timezone",
        "description": "The timezone the given string is in.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=UTC, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.base64Decode(text :: STRING) :: STRING",
    "name": "apoc.text.base64Decode",
    "description": "Decodes the given Base64 encoded `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to be decoded using base64.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.base64Encode(text :: STRING) :: STRING",
    "name": "apoc.text.base64Encode",
    "description": "Encodes the given `STRING` with Base64.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to be encoded using base64.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.base64UrlDecode(url :: STRING) :: STRING",
    "name": "apoc.text.base64UrlDecode",
    "description": "Decodes the given Base64 encoded URL.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "url",
        "description": "The url to be decoded using base64.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.base64UrlEncode(url :: STRING) :: STRING",
    "name": "apoc.text.base64UrlEncode",
    "description": "Encodes the given URL with Base64.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "url",
        "description": "The url to be encoded with base64.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.byteCount(text :: STRING, charset = UTF-8 :: STRING) :: INTEGER",
    "name": "apoc.text.byteCount",
    "description": "Returns the size of the given `STRING` in bytes.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to get the size of in bytes.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "charset",
        "description": "The name of a supported charset.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=UTF-8, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.bytes(text :: STRING, charset = UTF-8 :: STRING) :: LIST<ANY>",
    "name": "apoc.text.bytes",
    "description": "Returns the given `STRING` as bytes.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to get the bytes from.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "charset",
        "description": "The name of a supported charset.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=UTF-8, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.camelCase(text :: STRING) :: STRING",
    "name": "apoc.text.camelCase",
    "description": "Converts the given `STRING` to camel case.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to be converted to camel case.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.capitalize(text :: STRING) :: STRING",
    "name": "apoc.text.capitalize",
    "description": "Capitalizes the first letter of the given `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string in which to capitalize the first letter.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.capitalizeAll(text :: STRING) :: STRING",
    "name": "apoc.text.capitalizeAll",
    "description": "Capitalizes the first letter of every word in the given `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string in which to capitalize every word.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.charAt(text :: STRING, index :: INTEGER) :: INTEGER",
    "name": "apoc.text.charAt",
    "description": "Returns the `INTEGER` value of the character at the given index.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string from which a character is taken to be converted into an integer value.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "index",
        "description": "The index of the character in the given string to convert.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.clean(text :: STRING) :: STRING",
    "name": "apoc.text.clean",
    "description": "Strips the given `STRING` of everything except alpha numeric characters and converts it to lower case.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to be stripped of all non-alphanumeric characters and converted to lowercase.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.code(codepoint :: INTEGER) :: STRING",
    "name": "apoc.text.code",
    "description": "Converts the `INTEGER` value into a `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "codepoint",
        "description": "An integer to be converted into a character.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.compareCleaned(text1 :: STRING, text2 :: STRING) :: BOOLEAN",
    "name": "apoc.text.compareCleaned",
    "description": "Compares two given `STRING` values stripped of everything except alpha numeric characters converted to lower case.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text1",
        "description": "The first string to be stripped of all non-alphanumeric characters and compared to the second string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "text2",
        "description": "The second string to be stripped of all non-alphanumeric characters and compared to the first string.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.decapitalize(text :: STRING) :: STRING",
    "name": "apoc.text.decapitalize",
    "description": "Turns the first letter of the given `STRING` from upper case to lower case.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string in which to decapitalize the first letter.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.decapitalizeAll(text :: STRING) :: STRING",
    "name": "apoc.text.decapitalizeAll",
    "description": "Turns the first letter of every word in the given `STRING` to lower case.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string in which to decapitalize every word.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.distance(text1 :: STRING, text2 :: STRING) :: INTEGER",
    "name": "apoc.text.distance",
    "description": "Compares the two given `STRING` values using the Levenshtein distance algorithm.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text1",
        "description": "The first string to be compared against the second.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "text2",
        "description": "The second string to be compared against the first.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.doubleMetaphone(value :: STRING) :: STRING",
    "name": "apoc.text.doubleMetaphone",
    "description": "Returns the double metaphone phonetic encoding of all words in the given `STRING` value.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "The string to be encoded using the double metaphone phonetic encoding.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.format(text :: STRING, params :: LIST<ANY>, language = en :: STRING) :: STRING",
    "name": "apoc.text.format",
    "description": "Formats the given `STRING` with the given parameters.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The format string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "Arguments referenced by the format specifiers in the format string.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "language",
        "description": "An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=en, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.fuzzyMatch(text1 :: STRING, text2 :: STRING) :: BOOLEAN",
    "name": "apoc.text.fuzzyMatch",
    "description": "Performs a fuzzy match search of the two given `STRING` values.",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text1",
        "description": "The first string to be compared against the second.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "text2",
        "description": "The second string to be compared against the first.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.hammingDistance(text1 :: STRING, text2 :: STRING) :: INTEGER",
    "name": "apoc.text.hammingDistance",
    "description": "Compares the two given `STRING` values using the Hamming distance algorithm.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text1",
        "description": "The first string to be compared against the second.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "text2",
        "description": "The second string to be compared against the first.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.hexCharAt(text :: STRING, index :: INTEGER) :: STRING",
    "name": "apoc.text.hexCharAt",
    "description": "Returns the hexadecimal value of the given `STRING` at the given index.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string from which to take a character and convert it into a hexadecimal value represented as a string",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "index",
        "description": "The index of the character in the given string to convert.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.hexValue(value :: INTEGER) :: STRING",
    "name": "apoc.text.hexValue",
    "description": "Returns the hexadecimal value of the given value.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "The value to convert into a hexidecimal value represented as a string.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.indexOf(text :: STRING, lookup :: STRING, from = 0 :: INTEGER, to = -1 :: INTEGER) :: INTEGER",
    "name": "apoc.text.indexOf",
    "description": "Returns the first occurrence of the lookup `STRING` in the given `STRING`, or -1 if not found.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to search for the lookup string in.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "lookup",
        "description": "The lookup string to search for in the given string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "from",
        "description": "The index at which to start the search.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "to",
        "description": "The index at which to stop the search.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-1, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.indexesOf(text :: STRING, lookup :: STRING, from = 0 :: INTEGER, to = -1 :: INTEGER) :: LIST<ANY>",
    "name": "apoc.text.indexesOf",
    "description": "Returns all occurrences of the lookup `STRING` in the given `STRING`, or an empty list if not found.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to search for the lookup string in.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "lookup",
        "description": "The lookup string to search for in the given string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "from",
        "description": "The index at which to start the search.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      },
      {
        "name": "to",
        "description": "The index at which to stop the search.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-1, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.jaroWinklerDistance(text1 :: STRING, text2 :: STRING) :: FLOAT",
    "name": "apoc.text.jaroWinklerDistance",
    "description": "Compares the two given `STRING` values using the Jaro-Winkler distance algorithm.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text1",
        "description": "The first string to be compared against the second.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "text2",
        "description": "The second string to be compared against the first.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.join(texts :: LIST<STRING>, delimiter :: STRING) :: STRING",
    "name": "apoc.text.join",
    "description": "Joins the given `STRING` values using the given delimiter.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "texts",
        "description": "The list of strings to be concatenated using the given delimiter.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "delimiter",
        "description": "The given delimiter to join the given strings with.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.levenshteinDistance(text1 :: STRING, text2 :: STRING) :: INTEGER",
    "name": "apoc.text.levenshteinDistance",
    "description": "Compares the given `STRING` values using the Levenshtein distance algorithm.",
    "returnDescription": "INTEGER",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text1",
        "description": "The first string to be compared against the second.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "text2",
        "description": "The second string to be compared against the first.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.levenshteinSimilarity(text1 :: STRING, text2 :: STRING) :: FLOAT",
    "name": "apoc.text.levenshteinSimilarity",
    "description": "Returns the similarity (a value within 0 and 1) between the two given `STRING` values based on the Levenshtein distance algorithm.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text1",
        "description": "The first string to be compared against the second.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "text2",
        "description": "The second string to be compared against the first.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.lpad(text :: STRING, count :: INTEGER, delimiter =   :: STRING) :: STRING",
    "name": "apoc.text.lpad",
    "description": "Left pads the given `STRING` by the given width.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to be padded.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "count",
        "description": "The number of delimiters to pad the given string with.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "delimiter",
        "description": "The delimiter to pad the given string with.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value= , type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.phonetic(text :: STRING) :: STRING",
    "name": "apoc.text.phonetic",
    "description": "Returns the US_ENGLISH phonetic soundex encoding of all words of the `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to encode using US_ENGLISH phonetic soundex.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.random(length :: INTEGER, valid = A-Za-z0-9 :: STRING) :: STRING",
    "name": "apoc.text.random",
    "description": "Generates a random `STRING` to the given length using a length parameter and an optional `STRING` of valid characters.\nUnsuitable for cryptographic use-cases.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "length",
        "description": "The length of the random string.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "valid",
        "description": "The valid characters the random string can contain.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=A-Za-z0-9, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.regexGroups(text :: STRING, regex :: STRING) :: LIST<ANY>",
    "name": "apoc.text.regexGroups",
    "description": "Returns all groups matching the given regular expression in the given text.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The text to extract matches from.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "regex",
        "description": "The regex pattern to match.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.regexGroupsByName(text :: STRING, regex :: STRING) :: LIST<ANY>",
    "name": "apoc.text.regexGroupsByName",
    "description": "Returns all groups with their group name matching the given regular expression in the given text.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The text to extract matches from.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "regex",
        "description": "The regex pattern to match.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.regreplace(text :: STRING, regex :: STRING, replacement :: STRING) :: STRING",
    "name": "apoc.text.regreplace",
    "description": "Finds and replaces all matches found by the given regular expression with the given replacement.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to be modified.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "regex",
        "description": "The regular expression pattern to replace in the original string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "replacement",
        "description": "The value to be inserted in the original string.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.repeat(item :: STRING, count :: INTEGER) :: STRING",
    "name": "apoc.text.repeat",
    "description": "Returns the result of the given item multiplied by the given count.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "item",
        "description": "The string to be repeated.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "count",
        "description": "The number of times to repeat the given string.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.replace(text :: STRING, regex :: STRING, replacement :: STRING) :: STRING",
    "name": "apoc.text.replace",
    "description": "Finds and replaces all matches found by the given regular expression with the given replacement.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to be modified.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "regex",
        "description": "The regular expression pattern to replace in the original string.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "replacement",
        "description": "The value to be inserted in the original string.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.rpad(text :: STRING, count :: INTEGER, delimiter =   :: STRING) :: STRING",
    "name": "apoc.text.rpad",
    "description": "Right pads the given `STRING` by the given width.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to be padded.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "count",
        "description": "The number of delimiters to pad the given string with.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "delimiter",
        "description": "The delimiter to pad the given string with.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value= , type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.slug(text :: STRING, delimiter = - :: STRING) :: STRING",
    "name": "apoc.text.slug",
    "description": "Replaces the whitespace in the given `STRING` with the given delimiter.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string whose whitespace is to be replaced.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "delimiter",
        "description": "The delimiter to replace the whitespace with.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=-, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.snakeCase(text :: STRING) :: STRING",
    "name": "apoc.text.snakeCase",
    "description": "Converts the given `STRING` to snake case.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to convert to snake case.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.sorensenDiceSimilarity(text1 :: STRING, text2 :: STRING, languageTag = en :: STRING) :: FLOAT",
    "name": "apoc.text.sorensenDiceSimilarity",
    "description": "Compares the two given `STRING` values using the Sørensen–Dice coefficient formula, with the provided IETF language tag.",
    "returnDescription": "FLOAT",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text1",
        "description": "A string to be compared against `text2`.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "text2",
        "description": "A string to be compared against `text1`.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "languageTag",
        "description": "A language tag string specified by IETF BCP 47.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=en, type=STRING}",
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.split(text :: STRING, regex :: STRING, limit = 0 :: INTEGER) :: LIST<ANY>",
    "name": "apoc.text.split",
    "description": "Splits the given `STRING` using a given regular expression as a separator.",
    "returnDescription": "LIST<ANY>",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to split.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "regex",
        "description": "The delimiting regular expression.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "limit",
        "description": "The number of times the regex pattern is applied; if set to 0, it will be applied as many times as possible.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=0, type=INTEGER}",
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.swapCase(text :: STRING) :: STRING",
    "name": "apoc.text.swapCase",
    "description": "Swaps the cases in the given `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to swap the case of.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.toCypher(value :: ANY, config = {} :: MAP) :: STRING",
    "name": "apoc.text.toCypher",
    "description": "Converts the given value to a Cypher property `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "value",
        "description": "The value to convert to a Cypher property string.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "config",
        "description": "{ keepValues :: LIST<ANY> , skipValues :: LIST<ANY> }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.toUpperCase(text :: STRING) :: STRING",
    "name": "apoc.text.toUpperCase",
    "description": "Converts the given `STRING` to upper case.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to convert to upper case.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.upperCamelCase(text :: STRING) :: STRING",
    "name": "apoc.text.upperCamelCase",
    "description": "Converts the given `STRING` to upper camel case.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to convert to camel case.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.urldecode(text :: STRING) :: STRING",
    "name": "apoc.text.urldecode",
    "description": "Decodes the given URL encoded `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to url decode.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.text.urlencode(text :: STRING) :: STRING",
    "name": "apoc.text.urlencode",
    "description": "Encodes the given URL `STRING`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "text",
        "description": "The string to url encode.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.util.compress(data :: STRING, config = {} :: MAP) :: BYTEARRAY",
    "name": "apoc.util.compress",
    "description": "Zips the given `STRING`.",
    "returnDescription": "BYTEARRAY",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "data",
        "description": "The string to be compressed.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "{ compression = \"GZIP\" :: [\"GZIP\", \"BZIP2\", \"DEFLATE\", \"BLOCK_LZ4\", \"FRAMED_SNAPPY\", \"NONE\"], charset = \"UTF_8\" ::[\"UTF-8\", \"UTF-16\", \"UTF-16BE\", \"UTF-16LE\", \"UTF-32\", \"US-ASCII\", \"ISO-8859-1\"] }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.util.decompress(data :: BYTEARRAY, config = {} :: MAP) :: STRING",
    "name": "apoc.util.decompress",
    "description": "Unzips the given byte array.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "data",
        "description": "The bytearray of data to decompress.",
        "isDeprecated": false,
        "type": "BYTEARRAY"
      },
      {
        "name": "config",
        "description": "{ compression = \"GZIP\" :: [\"GZIP\", \"BZIP2\", \"DEFLATE\", \"BLOCK_LZ4\", \"FRAMED_SNAPPY\", \"NONE\"], charset = \"UTF_8\" ::[\"UTF-8\", \"UTF-16\", \"UTF-16BE\", \"UTF-16LE\", \"UTF-32\", \"US-ASCII\", \"ISO-8859-1\"] }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.util.md5(values :: LIST<ANY>) :: STRING",
    "name": "apoc.util.md5",
    "description": "Returns the MD5 checksum of the concatenation of all `STRING` values in the given `LIST<ANY>`.\nMD5 is a weak hashing algorithm which is unsuitable for cryptographic use-cases.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "The list of values to concatenate and generate an md5 checksum from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.util.sha1(values :: LIST<ANY>) :: STRING",
    "name": "apoc.util.sha1",
    "description": "Returns the SHA1 of the concatenation of all `STRING` values in the given `LIST<ANY>`.\nSHA1 is a weak hashing algorithm which is unsuitable for cryptographic use-cases.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "The list of values to concatenate and generate a sha1 checksum from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.util.sha256(values :: LIST<ANY>) :: STRING",
    "name": "apoc.util.sha256",
    "description": "Returns the SHA256 of the concatenation of all `STRING` values in the given `LIST<ANY>`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "The list of values to concatenate and generate a sha256 checksum from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.util.sha384(values :: LIST<ANY>) :: STRING",
    "name": "apoc.util.sha384",
    "description": "Returns the SHA384 of the concatenation of all `STRING` values in the given `LIST<ANY>`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "The list of values to concatenate and generate a sha384 checksum from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.util.sha512(values :: LIST<ANY>) :: STRING",
    "name": "apoc.util.sha512",
    "description": "Returns the SHA512 of the concatenation of all `STRING` values in the `LIST<ANY>`.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "values",
        "description": "The list of values to concatenate and generate a sha512 checksum from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.util.validatePredicate(predicate :: BOOLEAN, message :: STRING, params :: LIST<ANY>) :: BOOLEAN",
    "name": "apoc.util.validatePredicate",
    "description": "If the given predicate is true an exception is thrown, otherwise it returns true (for use inside `WHERE` subclauses).",
    "returnDescription": "BOOLEAN",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "predicate",
        "description": "The predicate to be evaluated.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "message",
        "description": "The error message thrown if the predicate evaluates to `true`.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "Parameters to format the message with.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.version() :: STRING",
    "name": "apoc.version",
    "description": "Returns the APOC version currently installed.",
    "returnDescription": "STRING",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": []
  },
  {
    "isDeprecated": false,
    "aggregating": false,
    "signature": "apoc.xml.parse(data :: STRING, path = / :: STRING, config = {} :: MAP, simple = false :: BOOLEAN) :: MAP",
    "name": "apoc.xml.parse",
    "description": "Parses the given XML `STRING` as a `MAP`.",
    "returnDescription": "MAP",
    "deprecatedBy": null,
    "category": "",
    "isBuiltIn": false,
    "argumentDescription": [
      {
        "name": "data",
        "description": "The XML data to parse.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "path",
        "description": "An xPath expression.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=/, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "A config map describing whether or not to fail on an encountered error; { failOnError = true :: BOOLEAN }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      },
      {
        "name": "simple",
        "description": "Specify simple mode to make XML elements accessible via a property of the element name prefixed with an `_`.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=false, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  }
]