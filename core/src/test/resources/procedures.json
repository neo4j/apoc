[ {
  "isDeprecated" : false,
  "signature" : "apoc.algo.aStar(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, weightPropertyName :: STRING, latPropertyName :: STRING, lonPropertyName :: STRING) :: (path :: PATH, weight :: FLOAT)",
  "name" : "apoc.algo.aStar",
  "description" : "Runs the A* search algorithm to find the optimal path between two `NODE` values, using the given `RELATIONSHIP` property name for the cost function.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The path result.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "weight",
    "description" : "The weight of the given path.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the search from.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "endNode",
    "description" : "The node to end the search on.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypesAndDirections",
    "description" : "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "weightPropertyName",
    "description" : "The name of the property to use as the weight.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "latPropertyName",
    "description" : "The name of the property to use as the latitude.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "lonPropertyName",
    "description" : "The name of the property to use as the longitude.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.algo.aStarConfig(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, config :: MAP) :: (path :: PATH, weight :: FLOAT)",
  "name" : "apoc.algo.aStarConfig",
  "description" : "Runs the A* search algorithm to find the optimal path between two `NODE` values, using the given `RELATIONSHIP` property name for the cost function.\nThis procedure looks for weight, latitude and longitude properties in the config.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The path result.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "weight",
    "description" : "The weight of the given path.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the search from.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "endNode",
    "description" : "The node to end the search on.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypesAndDirections",
    "description" : "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{ weight = 'distance' :: STRING, default = Double.MAX_VALUE :: FLOAT, y = 'latitude' :: STRING, x = 'longitude' :: STRING, pointPropName :: STRING }",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.algo.allSimplePaths(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, maxNodes :: INTEGER) :: (path :: PATH)",
  "name" : "apoc.algo.allSimplePaths",
  "description" : "Runs a search algorithm to find all of the simple paths between the given `RELATIONSHIP` values, up to a max depth described by `maxNodes`.\nThe returned paths will not contain loops.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The path result.",
    "isDeprecated" : false,
    "type" : "PATH"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the search from.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "endNode",
    "description" : "The node to end the search on.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypesAndDirections",
    "description" : "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "maxNodes",
    "description" : "The max depth (in terms of nodes) the algorithm will explore.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.algo.cover(nodes :: ANY) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.algo.cover",
  "description" : "Returns all `RELATIONSHIP` values connecting the given set of `NODE` values.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The relationships connected to the given nodes.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to look for connected relationships on.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.algo.dijkstra(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, weightPropertyName :: STRING, defaultWeight = NaN :: FLOAT, numberOfWantedPaths = 1 :: INTEGER) :: (path :: PATH, weight :: FLOAT)",
  "name" : "apoc.algo.dijkstra",
  "description" : "Runs Dijkstra's algorithm using the given `RELATIONSHIP` property as the cost function.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The path result.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "weight",
    "description" : "The weight of the given path.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the search from.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "endNode",
    "description" : "The node to end the search on.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypesAndDirections",
    "description" : "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "weightPropertyName",
    "description" : "The name of the property to use as the weight.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "defaultWeight",
    "description" : "The `defaultWeight` is used when no specific weight is provided for the given relationship or node. The default value for defaultWeight is NaN.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=NaN, type=FLOAT}",
    "type" : "FLOAT"
  }, {
    "name" : "numberOfWantedPaths",
    "description" : "The number of wanted paths to return.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=1, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.atomic.add(container :: ANY, propertyName :: STRING, number :: INTEGER | FLOAT, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)",
  "name" : "apoc.atomic.add",
  "description" : "Sets the given property to the sum of itself and the given `INTEGER` or `FLOAT` value.\nThe procedure then sets the property to the returned sum.",
  "returnDescription" : [ {
    "name" : "container",
    "description" : "The updated node or relationship.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "property",
    "description" : "The name of the updated property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "oldValue",
    "description" : "The original value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "newValue",
    "description" : "The new value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "container",
    "description" : "The node or relationship that contains the property to which the value will be added.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "propertyName",
    "description" : "The name of the property whose value will be added to.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "number",
    "description" : "The number to add.",
    "isDeprecated" : false,
    "type" : "INTEGER | FLOAT"
  }, {
    "name" : "retryAttempts",
    "description" : "The max retry attempts.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=5, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.atomic.concat(container :: ANY, propertyName :: STRING, string :: STRING, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)",
  "name" : "apoc.atomic.concat",
  "description" : "Sets the given property to the concatenation of itself and the `STRING` value.\nThe procedure then sets the property to the returned `STRING`.",
  "returnDescription" : [ {
    "name" : "container",
    "description" : "The updated node or relationship.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "property",
    "description" : "The name of the updated property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "oldValue",
    "description" : "The original value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "newValue",
    "description" : "The new value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "container",
    "description" : "The node or relationship that contains the property to which the value will be concatenated.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "propertyName",
    "description" : "The name of the property to be concatenated.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "string",
    "description" : "The string value to concatenate with the property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "retryAttempts",
    "description" : "The max retry attempts.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=5, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.atomic.insert(container :: ANY, propertyName :: STRING, position :: INTEGER, value :: ANY, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)",
  "name" : "apoc.atomic.insert",
  "description" : "Inserts a value at position into the `LIST<ANY>` value of a property.\nThe procedure then sets the result back on the property.",
  "returnDescription" : [ {
    "name" : "container",
    "description" : "The updated node or relationship.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "property",
    "description" : "The name of the updated property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "oldValue",
    "description" : "The original value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "newValue",
    "description" : "The new value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "container",
    "description" : "The node or relationship that has a property containing a list.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "propertyName",
    "description" : "The name of the property into which the value will be inserted.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "position",
    "description" : "The position in the list to insert the item into.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "value",
    "description" : "The value to insert.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "retryAttempts",
    "description" : "The max retry attempts.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=5, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.atomic.remove(container :: ANY, propertyName :: STRING, position :: INTEGER, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)",
  "name" : "apoc.atomic.remove",
  "description" : "Removes the element at position from the `LIST<ANY>` value of a property.\nThe procedure then sets the property to the resulting `LIST<ANY>` value.",
  "returnDescription" : [ {
    "name" : "container",
    "description" : "The updated node or relationship.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "property",
    "description" : "The name of the updated property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "oldValue",
    "description" : "The original value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "newValue",
    "description" : "The new value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "container",
    "description" : "The node or relationship that has a property containing a list.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "propertyName",
    "description" : "The name of the property from which the value will be removed.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "position",
    "description" : "The position in the list to remove the item from.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "retryAttempts",
    "description" : "The max retry attempts.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=5, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.atomic.subtract(container :: ANY, propertyName :: STRING, number :: INTEGER | FLOAT, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)",
  "name" : "apoc.atomic.subtract",
  "description" : "Sets the property of a value to itself minus the given `INTEGER` or `FLOAT` value.\nThe procedure then sets the property to the returned sum.",
  "returnDescription" : [ {
    "name" : "container",
    "description" : "The updated node or relationship.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "property",
    "description" : "The name of the updated property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "oldValue",
    "description" : "The original value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "newValue",
    "description" : "The new value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "container",
    "description" : "The node or relationship that contains the property from which the value will be subtracted.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "propertyName",
    "description" : "The name of the property from which the value will be subtracted.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "number",
    "description" : "The number to subtract.",
    "isDeprecated" : false,
    "type" : "INTEGER | FLOAT"
  }, {
    "name" : "retryAttempts",
    "description" : "The max retry attempts.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=5, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.atomic.update(container :: ANY, propertyName :: STRING, operation :: STRING, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)",
  "name" : "apoc.atomic.update",
  "description" : "Updates the value of a property with a Cypher operation.",
  "returnDescription" : [ {
    "name" : "container",
    "description" : "The updated node or relationship.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "property",
    "description" : "The name of the updated property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "oldValue",
    "description" : "The original value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "newValue",
    "description" : "The new value on the property.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "container",
    "description" : "The node or relationship with the property to be updated.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "propertyName",
    "description" : "The name of the property to be updated.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "operation",
    "description" : "The operation to perform to update the property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "retryAttempts",
    "description" : "The max retry attempts.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=5, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.case",
  "description" : "For each pair of conditional and read-only queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true. If none of the conditionals are true, the `ELSE` query will run instead.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the evaluated Cypher query.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "conditionals",
    "description" : "A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "elseQuery",
    "description" : "A Cypher query to evaluate if all conditionals evaluate to false.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "A map of parameters to be used in the executed Cypher query.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.coll.elements(coll :: LIST<ANY>, limit = -1 :: INTEGER, offset = 0 :: INTEGER) :: (_1 :: ANY, _2 :: ANY, _3 :: ANY, _4 :: ANY, _5 :: ANY, _6 :: ANY, _7 :: ANY, _8 :: ANY, _9 :: ANY, _10 :: ANY, _1s :: STRING, _2s :: STRING, _3s :: STRING, _4s :: STRING, _5s :: STRING, _6s :: STRING, _7s :: STRING, _8s :: STRING, _9s :: STRING, _10s :: STRING, _1i :: INTEGER, _2i :: INTEGER, _3i :: INTEGER, _4i :: INTEGER, _5i :: INTEGER, _6i :: INTEGER, _7i :: INTEGER, _8i :: INTEGER, _9i :: INTEGER, _10i :: INTEGER, _1f :: FLOAT, _2f :: FLOAT, _3f :: FLOAT, _4f :: FLOAT, _5f :: FLOAT, _6f :: FLOAT, _7f :: FLOAT, _8f :: FLOAT, _9f :: FLOAT, _10f :: FLOAT, _1b :: BOOLEAN, _2b :: BOOLEAN, _3b :: BOOLEAN, _4b :: BOOLEAN, _5b :: BOOLEAN, _6b :: BOOLEAN, _7b :: BOOLEAN, _8b :: BOOLEAN, _9b :: BOOLEAN, _10b :: BOOLEAN, _1l :: LIST<ANY>, _2l :: LIST<ANY>, _3l :: LIST<ANY>, _4l :: LIST<ANY>, _5l :: LIST<ANY>, _6l :: LIST<ANY>, _7l :: LIST<ANY>, _8l :: LIST<ANY>, _9l :: LIST<ANY>, _10l :: LIST<ANY>, _1m :: MAP, _2m :: MAP, _3m :: MAP, _4m :: MAP, _5m :: MAP, _6m :: MAP, _7m :: MAP, _8m :: MAP, _9m :: MAP, _10m :: MAP, _1n :: NODE, _2n :: NODE, _3n :: NODE, _4n :: NODE, _5n :: NODE, _6n :: NODE, _7n :: NODE, _8n :: NODE, _9n :: NODE, _10n :: NODE, _1r :: RELATIONSHIP, _2r :: RELATIONSHIP, _3r :: RELATIONSHIP, _4r :: RELATIONSHIP, _5r :: RELATIONSHIP, _6r :: RELATIONSHIP, _7r :: RELATIONSHIP, _8r :: RELATIONSHIP, _9r :: RELATIONSHIP, _10r :: RELATIONSHIP, _1p :: PATH, _2p :: PATH, _3p :: PATH, _4p :: PATH, _5p :: PATH, _6p :: PATH, _7p :: PATH, _8p :: PATH, _9p :: PATH, _10p :: PATH, elements :: INTEGER)",
  "name" : "apoc.coll.elements",
  "description" : "Deconstructs a `LIST<ANY>` into identifiers indicating their specific type.",
  "returnDescription" : [ {
    "name" : "_1",
    "description" : "The value of the first item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_2",
    "description" : "The value of the second item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_3",
    "description" : "The value of the third item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_4",
    "description" : "The value of the fourth item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_5",
    "description" : "The value of the fifth item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_6",
    "description" : "The value of the sixth item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_7",
    "description" : "The value of the seventh item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_8",
    "description" : "The value of the eighth item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_9",
    "description" : "The value of the ninth item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_10",
    "description" : "The value of the tenth item.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "_1s",
    "description" : "The value of the first item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_2s",
    "description" : "The value of the second item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_3s",
    "description" : "The value of the third item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_4s",
    "description" : "The value of the fourth item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_5s",
    "description" : "The value of the fifth item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_6s",
    "description" : "The value of the sixth item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_7s",
    "description" : "The value of the seventh item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_8s",
    "description" : "The value of the eighth item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_9s",
    "description" : "The value of the ninth item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_10s",
    "description" : "The value of the tenth item, if it is a string value.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "_1i",
    "description" : "The value of the first item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_2i",
    "description" : "The value of the second item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_3i",
    "description" : "The value of the third item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_4i",
    "description" : "The value of the fourth item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_5i",
    "description" : "The value of the fifth item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_6i",
    "description" : "The value of the sixth item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_7i",
    "description" : "The value of the seventh item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_8i",
    "description" : "The value of the eighth item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_9i",
    "description" : "The value of the ninth item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_10i",
    "description" : "The value of the tenth item, if it is an integer value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "_1f",
    "description" : "The value of the first item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_2f",
    "description" : "The value of the second item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_3f",
    "description" : "The value of the third item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_4f",
    "description" : "The value of the fourth item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_5f",
    "description" : "The value of the fifth item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_6f",
    "description" : "The value of the sixth item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_7f",
    "description" : "The value of the seventh item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_8f",
    "description" : "The value of the eighth item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_9f",
    "description" : "The value of the ninth item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_10f",
    "description" : "The value of the tenth item, if it is a float value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "_1b",
    "description" : "The value of the first item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_2b",
    "description" : "The value of the second item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_3b",
    "description" : "The value of the third item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_4b",
    "description" : "The value of the fourth item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_5b",
    "description" : "The value of the fifth item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_6b",
    "description" : "The value of the sixth item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_7b",
    "description" : "The value of the seventh item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_8b",
    "description" : "The value of the eighth item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_9b",
    "description" : "The value of the ninth item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_10b",
    "description" : "The value of the tenth item, if it is a boolean value.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "_1l",
    "description" : "The value of the first item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_2l",
    "description" : "The value of the second item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_3l",
    "description" : "The value of the third item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_4l",
    "description" : "The value of the fourth item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_5l",
    "description" : "The value of the fifth item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_6l",
    "description" : "The value of the sixth item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_7l",
    "description" : "The value of the seventh item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_8l",
    "description" : "The value of the eighth item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_9l",
    "description" : "The value of the ninth item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_10l",
    "description" : "The value of the tenth item, if it is a list value.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "_1m",
    "description" : "The value of the first item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_2m",
    "description" : "The value of the second item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_3m",
    "description" : "The value of the third item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_4m",
    "description" : "The value of the fourth item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_5m",
    "description" : "The value of the fifth item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_6m",
    "description" : "The value of the sixth item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_7m",
    "description" : "The value of the seventh item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_8m",
    "description" : "The value of the eighth item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_9m",
    "description" : "The value of the ninth item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_10m",
    "description" : "The value of the tenth item, if it is a map value.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "_1n",
    "description" : "The value of the first item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_2n",
    "description" : "The value of the second item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_3n",
    "description" : "The value of the third item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_4n",
    "description" : "The value of the fourth item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_5n",
    "description" : "The value of the fifth item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_6n",
    "description" : "The value of the sixth item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_7n",
    "description" : "The value of the seventh item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_8n",
    "description" : "The value of the eighth item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_9n",
    "description" : "The value of the ninth item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_10n",
    "description" : "The value of the tenth item, if it is a node value.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "_1r",
    "description" : "The value of the first item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_2r",
    "description" : "The value of the second item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_3r",
    "description" : "The value of the third item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_4r",
    "description" : "The value of the fourth item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_5r",
    "description" : "The value of the fifth item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_6r",
    "description" : "The value of the sixth item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_7r",
    "description" : "The value of the seventh item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_8r",
    "description" : "The value of the eighth item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_9r",
    "description" : "The value of the ninth item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_10r",
    "description" : "The value of the tenth item, if it is a relationship value.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "_1p",
    "description" : "The value of the first item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_2p",
    "description" : "The value of the second item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_3p",
    "description" : "The value of the third item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_4p",
    "description" : "The value of the fourth item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_5p",
    "description" : "The value of the fifth item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_6p",
    "description" : "The value of the sixth item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_7p",
    "description" : "The value of the seventh item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_8p",
    "description" : "The value of the eighth item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_9p",
    "description" : "The value of the ninth item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "_10p",
    "description" : "The value of the tenth item, if it is a path value.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "elements",
    "description" : "The number of deconstructed elements.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "coll",
    "description" : "A list of values to deconstruct.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "limit",
    "description" : "The maximum size of elements to deconstruct from the given list.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=-1, type=INTEGER}",
    "type" : "INTEGER"
  }, {
    "name" : "offset",
    "description" : "The offset to start deconstructing from.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=0, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.coll.pairWithOffset(coll :: LIST<ANY>, offset :: INTEGER) :: (value :: LIST<ANY>)",
  "name" : "apoc.coll.pairWithOffset",
  "description" : "Returns a `LIST<ANY>` of pairs defined by the offset.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The created pair.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "coll",
    "description" : "The list to create pairs from.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "offset",
    "description" : "The offset to make each pair with from the given list.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.coll.partition(coll :: LIST<ANY>, batchSize :: INTEGER) :: (value :: LIST<ANY>)",
  "name" : "apoc.coll.partition",
  "description" : "Partitions the original `LIST<ANY>` into a new `LIST<ANY>` of the given batch size.\nThe final `LIST<ANY>` may be smaller than the given batch size.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The partitioned list.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "coll",
    "description" : "The list to partition into smaller sublists.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "batchSize",
    "description" : "The max size of each partitioned sublist.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.coll.split(coll :: LIST<ANY>, value :: ANY) :: (value :: LIST<ANY>)",
  "name" : "apoc.coll.split",
  "description" : "Splits a collection by the given value.\nThe value itself will not be part of the resulting `LIST<ANY>` values.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The split list.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "coll",
    "description" : "The list to split into parts.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "value",
    "description" : "The value to split the given list by.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.coll.zipToRows(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: (value :: LIST<ANY>)",
  "name" : "apoc.coll.zipToRows",
  "description" : "Returns the two `LIST<ANY>` values zipped together, with one row per zipped pair.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "A zipped pair.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "list1",
    "description" : "The list to zip together with `list2`.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "list2",
    "description" : "The list to zip together with `list1`.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.convert.setJsonProperty(node :: NODE, key :: STRING, value :: ANY)",
  "name" : "apoc.convert.setJsonProperty",
  "description" : "Serializes the given JSON object and sets it as a property on the given `NODE`.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "node",
    "description" : "The node to set the JSON property on.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "key",
    "description" : "The name of the property to set.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The property to serialize as a JSON object.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.convert.toTree(paths :: LIST<PATH>, lowerCaseRels = true :: BOOLEAN, config = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.convert.toTree",
  "description" : "Returns a stream of `MAP` values, representing the given `PATH` values as a tree with at least one root.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The resulting tree.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : "apoc.paths.toJsonTree",
  "argumentDescription" : [ {
    "name" : "paths",
    "description" : "A list of paths to convert into a tree.",
    "isDeprecated" : false,
    "type" : "LIST<PATH>"
  }, {
    "name" : "lowerCaseRels",
    "description" : "Whether or not to convert relationship types to lower case.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=true, type=BOOLEAN}",
    "type" : "BOOLEAN"
  }, {
    "name" : "config",
    "description" : "{ nodes = {} :: MAP, rels = {} :: MAP, sortPaths = true :: BOOLEAN }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.addLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)",
  "name" : "apoc.create.addLabels",
  "description" : "Adds the given labels to the given `NODE` values.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to add labels to.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "labels",
    "description" : "The labels to add to the nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.clonePathToVirtual(path :: PATH) :: (path :: PATH)",
  "name" : "apoc.create.clonePathToVirtual",
  "description" : "Takes the given `PATH` and returns a virtual representation of it.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The path result.",
    "isDeprecated" : false,
    "type" : "PATH"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "path",
    "description" : "The path to create a virtual path from.",
    "isDeprecated" : false,
    "type" : "PATH"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.clonePathsToVirtual(paths :: LIST<PATH>) :: (path :: PATH)",
  "name" : "apoc.create.clonePathsToVirtual",
  "description" : "Takes the given `LIST<PATH>` and returns a virtual representation of them.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The path result.",
    "isDeprecated" : false,
    "type" : "PATH"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "paths",
    "description" : "The paths to create virtual paths from.",
    "isDeprecated" : false,
    "type" : "LIST<PATH>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.node(labels :: LIST<STRING>, props :: MAP) :: (node :: NODE)",
  "name" : "apoc.create.node",
  "description" : "Creates a `NODE` with the given dynamic labels.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The created node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The labels to assign to the new node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "props",
    "description" : "The properties to assign to the new node.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.nodes(labels :: LIST<STRING>, props :: LIST<MAP>) :: (node :: NODE)",
  "name" : "apoc.create.nodes",
  "description" : "Creates `NODE` values with the given dynamic labels.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The created node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The labels to assign to the new nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "props",
    "description" : "The properties to assign to the new nodes.",
    "isDeprecated" : false,
    "type" : "LIST<MAP>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.relationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.create.relationship",
  "description" : "Creates a `RELATIONSHIP` with the given dynamic relationship type.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The created relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "from",
    "description" : "The node from which the outgoing relationship will start.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relType",
    "description" : "The type to assign to the new relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to assign to the new relationship.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "to",
    "description" : "The node to which the incoming relationship will be connected.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.removeLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)",
  "name" : "apoc.create.removeLabels",
  "description" : "Removes the given labels from the given `NODE` values.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The node to remove labels from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "labels",
    "description" : "The labels to remove from the given node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.removeProperties(nodes :: ANY, keys :: LIST<STRING>) :: (node :: NODE)",
  "name" : "apoc.create.removeProperties",
  "description" : "Removes the given properties from the given `NODE` values.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to remove properties from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "keys",
    "description" : "The property keys to remove from the given nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.removeRelProperties(rels :: ANY, keys :: LIST<STRING>) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.create.removeRelProperties",
  "description" : "Removes the given properties from the given `RELATIONSHIP` values.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The updated relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rels",
    "description" : "The relationships to remove properties from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "keys",
    "description" : "The property keys to remove from the given nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.setLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)",
  "name" : "apoc.create.setLabels",
  "description" : "Sets the given labels to the given `NODE` values. Non-matching labels are removed from the nodes.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to set labels on.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "labels",
    "description" : "The labels to set on the given nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.setProperties(nodes :: ANY, keys :: LIST<STRING>, values :: LIST<ANY>) :: (node :: NODE)",
  "name" : "apoc.create.setProperties",
  "description" : "Sets the given properties to the given `NODE` values.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to set properties on.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "keys",
    "description" : "The property keys to set on the given nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "values",
    "description" : "The values to assign to the properties on the given nodes.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.setProperty(nodes :: ANY, key :: STRING, value :: ANY) :: (node :: NODE)",
  "name" : "apoc.create.setProperty",
  "description" : "Sets the given property to the given `NODE` values.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to set a property on.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "key",
    "description" : "The name of the property key to set.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The value of the property to set.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.setRelProperties(rels :: ANY, keys :: LIST<STRING>, values :: LIST<ANY>) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.create.setRelProperties",
  "description" : "Sets the given properties on the `RELATIONSHIP` values.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The updated relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rels",
    "description" : "The relationships to set properties on.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "keys",
    "description" : "The keys of the properties to set on the given relationships.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "values",
    "description" : "The values of the properties to set on the given relationships.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.setRelProperty(rels :: ANY, key :: STRING, value :: ANY) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.create.setRelProperty",
  "description" : "Sets the given property on the `RELATIONSHIP` values.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The updated relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rels",
    "description" : "The relationships to set a property on.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "key",
    "description" : "The name of the property key to set.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The value of the property to set.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.create.uuids(count :: INTEGER) :: (row :: INTEGER, uuid :: STRING)",
  "name" : "apoc.create.uuids",
  "description" : "Returns a stream of UUIDs.",
  "returnDescription" : [ {
    "name" : "row",
    "description" : "The row number of the generated UUID.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "uuid",
    "description" : "The generated UUID value.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : "Neo4j's randomUUID() function can be used as a replacement, for example: `UNWIND range(0,$count) AS row RETURN row, randomUUID() AS uuid`",
  "argumentDescription" : [ {
    "name" : "count",
    "description" : "The number of UUID values to generate.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.vNode(labels :: LIST<STRING>, props :: MAP) :: (node :: NODE)",
  "name" : "apoc.create.vNode",
  "description" : "Returns a virtual `NODE`.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The created virtual node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The labels to assign to the new virtual node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "props",
    "description" : "The properties to assign to the new virtual node.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.vNodes(labels :: LIST<STRING>, props :: LIST<MAP>) :: (node :: NODE)",
  "name" : "apoc.create.vNodes",
  "description" : "Returns virtual `NODE` values.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The created virtual node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The labels to assign to the new virtual node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "props",
    "description" : "The properties to assign to the new virtual nodes.",
    "isDeprecated" : false,
    "type" : "LIST<MAP>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.vRelationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.create.vRelationship",
  "description" : "Returns a virtual `RELATIONSHIP`.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The created virtual relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "from",
    "description" : "The node to connect the outgoing virtual relationship from.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relType",
    "description" : "The type to assign to the new virtual relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to assign to the new virtual relationship.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "to",
    "description" : "The node to which the incoming virtual relationship will be connected.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.create.virtualPath(labelsN :: LIST<STRING>, n :: MAP, arelType :: STRING, props :: MAP, labelsM :: LIST<STRING>, m :: MAP) :: (from :: NODE, rel :: RELATIONSHIP, to :: NODE)",
  "name" : "apoc.create.virtualPath",
  "description" : "Returns a virtual `PATH`.",
  "returnDescription" : [ {
    "name" : "from",
    "description" : "The created virtual start node.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "rel",
    "description" : "The created virtual relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "to",
    "description" : "The created virtual end node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labelsN",
    "description" : "The labels to assign to the new virtual start node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "n",
    "description" : "The properties to assign to the new virtual start node.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "arelType",
    "description" : "The type to assign to the new virtual relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to assign to the new virtual relationship.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "labelsM",
    "description" : "The labels to assign to the new virtual node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "m",
    "description" : "The properties to assign to the new virtual node.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.cypher.doIt(statement :: STRING, params :: MAP) :: (value :: MAP)",
  "name" : "apoc.cypher.doIt",
  "description" : "Runs a dynamically constructed statement with the given parameters. This procedure allows for both read and write statements.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher statement to run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.cypher.run(statement :: STRING, params :: MAP) :: (value :: MAP)",
  "name" : "apoc.cypher.run",
  "description" : "Runs a dynamically constructed read-only statement with the given parameters.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher statement to run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.cypher.runMany(statement :: STRING, params :: MAP, config = {} :: MAP) :: (row :: INTEGER, result :: MAP)",
  "name" : "apoc.cypher.runMany",
  "description" : "Runs each semicolon separated statement and returns a summary of the statement outcomes.",
  "returnDescription" : [ {
    "name" : "row",
    "description" : "The row number of the run Cypher statement.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "result",
    "description" : "The result returned from the Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher statements to run, semicolon separated (;).",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statements.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "config",
    "description" : "{ statistics = true :: BOOLEAN }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.cypher.runManyReadOnly(statement :: STRING, params :: MAP, config = {} :: MAP) :: (row :: INTEGER, result :: MAP)",
  "name" : "apoc.cypher.runManyReadOnly",
  "description" : "Runs each semicolon separated read-only statement and returns a summary of the statement outcomes.",
  "returnDescription" : [ {
    "name" : "row",
    "description" : "The row number of the run Cypher statement.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "result",
    "description" : "The result returned from the Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher statements to run, semicolon separated (;).",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statements.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "config",
    "description" : "{ statistics = true :: BOOLEAN }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.cypher.runSchema(statement :: STRING, params :: MAP) :: (value :: MAP)",
  "name" : "apoc.cypher.runSchema",
  "description" : "Runs the given query schema statement with the given parameters.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher schema statement to run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.cypher.runTimeboxed(statement :: STRING, params :: MAP, timeout :: INTEGER) :: (value :: MAP)",
  "name" : "apoc.cypher.runTimeboxed",
  "description" : "Terminates a Cypher statement if it has not finished before the set timeout (ms).",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher statement to run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "timeout",
    "description" : "The maximum time the statement can run for.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.cypher.runWrite(statement :: STRING, params :: MAP) :: (value :: MAP)",
  "name" : "apoc.cypher.runWrite",
  "description" : "Alias for `apoc.cypher.doIt`.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher statement to run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.do.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.do.case",
  "description" : "For each pair of conditional queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true.\nIf none of the conditionals are true, the `ELSE` query will run instead.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the evaluated Cypher query.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "conditionals",
    "description" : "A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "elseQuery",
    "description" : "A Cypher query to evaluate if all conditionals evaluate to false.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "A map of parameters to be used in the executed Cypher query.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.do.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery :: STRING, params = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.do.when",
  "description" : "Runs the given read/write `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the evaluated Cypher query.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "condition",
    "description" : "The predicate that determines whether to execute the `ifQuery`.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "ifQuery",
    "description" : "The Cypher statement to run if the condition is true.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "elseQuery",
    "description" : "The Cypher statement to run if the condition is false.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.example.movies() :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.example.movies",
  "description" : "Seeds the database with the Neo4j movie dataset.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file containing the movies example.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "Where the examples were sourced from.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the movies file was in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of nodes imported.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of relationships imported.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of properties imported.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the import.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the import was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the import was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the import ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the import.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.export.arrow.all(file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.arrow.all",
  "description" : "Exports the full database as an arrow file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to export the data to.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{ batchSize = 2000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.export.arrow.graph(file :: STRING, graph :: ANY, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.arrow.graph",
  "description" : "Exports the given graph as an arrow file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to export the data to.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "graph",
    "description" : "The graph to export.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{ batchSize = 2000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.export.arrow.query(file :: STRING, query :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.arrow.query",
  "description" : "Exports the results from the given Cypher query as an arrow file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query to use to collect the data for export.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{ batchSize = 2000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.export.arrow.stream.all(config = {} :: MAP) :: (value :: BYTEARRAY)",
  "name" : "apoc.export.arrow.stream.all",
  "description" : "Exports the full database as an arrow byte array.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The data as a bytearray.",
    "isDeprecated" : false,
    "type" : "BYTEARRAY"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "{ batchSize = 2000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.export.arrow.stream.graph(graph :: ANY, config = {} :: MAP) :: (value :: BYTEARRAY)",
  "name" : "apoc.export.arrow.stream.graph",
  "description" : "Exports the given graph as an arrow byte array.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The data as a bytearray.",
    "isDeprecated" : false,
    "type" : "BYTEARRAY"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "graph",
    "description" : "The graph to export.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{ batchSize = 2000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.export.arrow.stream.query(query :: STRING, config = {} :: MAP) :: (value :: BYTEARRAY)",
  "name" : "apoc.export.arrow.stream.query",
  "description" : "Exports the given Cypher query as an arrow byte array.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The data as a bytearray.",
    "isDeprecated" : false,
    "type" : "BYTEARRAY"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "query",
    "description" : "The query used to collect the data for export.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{ batchSize = 2000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.csv.all(file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.csv.all",
  "description" : "Exports the full database to the provided CSV file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.csv.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.csv.data",
  "description" : "Exports the given `NODE` and `RELATIONSHIP` values to the provided CSV file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "A list of nodes to export.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "rels",
    "description" : "A list of relationships to export.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.csv.graph(graph :: MAP, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.csv.graph",
  "description" : "Exports the given graph to the provided CSV file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "graph",
    "description" : "The graph to export.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.csv.query(query :: STRING, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.csv.query",
  "description" : "Exports the results from running the given Cypher query to the provided CSV file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "query",
    "description" : "The query used to collect the data for export.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None':: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.cypher.all(file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)",
  "name" : "apoc.export.cypher.all",
  "description" : "Exports the full database (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "cypherStatements",
    "description" : "The executed Cypher Statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "nodeStatements",
    "description" : "The executed node statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "relationshipStatements",
    "description" : "The executed relationship statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "schemaStatements",
    "description" : "The executed schema statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "cleanupStatements",
    "description" : "The executed cleanup statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.cypher.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)",
  "name" : "apoc.export.cypher.data",
  "description" : "Exports the given `NODE` and `RELATIONSHIP` values (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "cypherStatements",
    "description" : "The executed Cypher Statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "nodeStatements",
    "description" : "The executed node statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "relationshipStatements",
    "description" : "The executed relationship statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "schemaStatements",
    "description" : "The executed schema statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "cleanupStatements",
    "description" : "The executed cleanup statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "A list of nodes to export.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "rels",
    "description" : "A list of relationships to export.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.cypher.graph(graph :: MAP, file :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)",
  "name" : "apoc.export.cypher.graph",
  "description" : "Exports the given graph (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "cypherStatements",
    "description" : "The executed Cypher Statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "nodeStatements",
    "description" : "The executed node statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "relationshipStatements",
    "description" : "The executed relationship statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "schemaStatements",
    "description" : "The executed schema statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "cleanupStatements",
    "description" : "The executed cleanup statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "graph",
    "description" : "The graph to export.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.cypher.query(statement :: STRING, file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)",
  "name" : "apoc.export.cypher.query",
  "description" : "Exports the `NODE` and `RELATIONSHIP` values from the given Cypher query (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "cypherStatements",
    "description" : "The executed Cypher Statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "nodeStatements",
    "description" : "The executed node statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "relationshipStatements",
    "description" : "The executed relationship statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "schemaStatements",
    "description" : "The executed schema statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "cleanupStatements",
    "description" : "The executed cleanup statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The query used to collect the data for export.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.cypher.schema(file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)",
  "name" : "apoc.export.cypher.schema",
  "description" : "Exports all schema indexes and constraints to Cypher statements.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "cypherStatements",
    "description" : "The executed Cypher Statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "nodeStatements",
    "description" : "The executed node statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "relationshipStatements",
    "description" : "The executed relationship statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "schemaStatements",
    "description" : "The executed schema statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "cleanupStatements",
    "description" : "The executed cleanup statements.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.graphml.all(file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.graphml.all",
  "description" : "Exports the full database to the provided GraphML file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.graphml.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.graphml.data",
  "description" : "Exports the given `NODE` and `RELATIONSHIP` values to the provided GraphML file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "A list of nodes to export.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "rels",
    "description" : "A list of relationships to export.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.graphml.graph(graph :: MAP, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.graphml.graph",
  "description" : "Exports the given graph to the provided GraphML file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "graph",
    "description" : "The graph to export.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.graphml.query(statement :: STRING, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.graphml.query",
  "description" : "Exports the given `NODE` and `RELATIONSHIP` values from the Cypher statement to the provided GraphML file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The query used to collect the data for export.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.json.all(file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.json.all",
  "description" : "Exports the full database to the provided JSON file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.json.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.json.data",
  "description" : "Exports the given `NODE` and `RELATIONSHIP` values to the provided JSON file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "A list of nodes to export.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "rels",
    "description" : "A list of relationships to export.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.json.graph(graph :: MAP, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.json.graph",
  "description" : "Exports the given graph to the provided JSON file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "graph",
    "description" : "The graph to export.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.export.json.query(statement :: STRING, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.export.json.query",
  "description" : "Exports the results from the Cypher statement to the provided JSON file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to which the data was exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "A summary of the exported data.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format the file is exported in.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of exported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of exported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of exported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the export.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the export was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the export ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the export.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The query used to collect the data for export.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "file",
    "description" : "The name of the file to which the data will be exported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.graph.from(data :: ANY, name :: STRING, props :: MAP) :: (graph :: MAP)",
  "name" : "apoc.graph.from",
  "description" : "Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the given data.",
  "returnDescription" : [ {
    "name" : "graph",
    "description" : "The resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "data",
    "description" : "An object to extract nodes and relationships from. It can be of type; NODE | RELATIONSHIP | PATH | LIST<ANY>.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "name",
    "description" : "The name of the resulting graph.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to be present in the resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.graph.fromCypher(statement :: STRING, params :: MAP, name :: STRING, props :: MAP) :: (graph :: MAP)",
  "name" : "apoc.graph.fromCypher",
  "description" : "Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given Cypher statement.",
  "returnDescription" : [ {
    "name" : "graph",
    "description" : "The resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher statement to create the graph from.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "name",
    "description" : "The name of the resulting graph.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to include in the resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.graph.fromDB(name :: STRING, props :: MAP) :: (graph :: MAP)",
  "name" : "apoc.graph.fromDB",
  "description" : "Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given database.",
  "returnDescription" : [ {
    "name" : "graph",
    "description" : "The resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the resulting graph.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to be present in the resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.graph.fromData(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, name :: STRING, props :: MAP) :: (graph :: MAP)",
  "name" : "apoc.graph.fromData",
  "description" : "Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the given data.",
  "returnDescription" : [ {
    "name" : "graph",
    "description" : "The resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to include in the resulting graph.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "rels",
    "description" : "The relationship to include in the resulting graph.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "name",
    "description" : "The name of the resulting graph.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to include in the resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.graph.fromDocument(json :: ANY, config = {} :: MAP) :: (graph :: MAP)",
  "name" : "apoc.graph.fromDocument",
  "description" : "Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given JSON file.",
  "returnDescription" : [ {
    "name" : "graph",
    "description" : "The resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "json",
    "description" : "A JSON object to generate a graph from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n        write = false :: BOOLEAN,\n        labelField = 'type' :: STRING.\n        idField = 'id' :: STRING,\n        generateID = true :: BOOLEAN,\n        defaultLabel = '' :: STRING,\n        skipValidation = false :: BOOLEAN,\n        mappings = {} :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.graph.fromPath(path :: PATH, name :: STRING, props :: MAP) :: (graph :: MAP)",
  "name" : "apoc.graph.fromPath",
  "description" : "Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given `PATH`.",
  "returnDescription" : [ {
    "name" : "graph",
    "description" : "The resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "path",
    "description" : "A path to extract the nodes and relationships from.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "name",
    "description" : "The name to give the resulting graph.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to include in the resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.graph.fromPaths(paths :: LIST<PATH>, name :: STRING, props :: MAP) :: (graph :: MAP)",
  "name" : "apoc.graph.fromPaths",
  "description" : "Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given `PATH` values.",
  "returnDescription" : [ {
    "name" : "graph",
    "description" : "The resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "paths",
    "description" : "A list of paths to extract nodes and relationships from.",
    "isDeprecated" : false,
    "type" : "LIST<PATH>"
  }, {
    "name" : "name",
    "description" : "The name of the resulting graph.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "props",
    "description" : "The properties to include in the resulting graph.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.graph.validateDocument(json :: ANY, config = {} :: MAP) :: (row :: MAP)",
  "name" : "apoc.graph.validateDocument",
  "description" : "Validates the JSON file and returns the result of the validation.",
  "returnDescription" : [ {
    "name" : "row",
    "description" : "The result of the validation.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "json",
    "description" : "The JSON object to validate.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n        write = false :: BOOLEAN,\n        labelField = 'type' :: STRING.\n        idField = 'id' :: STRING,\n        generateID = true :: BOOLEAN,\n        defaultLabel = '' :: STRING,\n        skipValidation = false :: BOOLEAN,\n        mappings = {} :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.help(proc :: STRING) :: (type :: STRING, name :: STRING, text :: STRING, signature :: STRING, roles :: LIST<STRING>, writes :: BOOLEAN, core :: BOOLEAN, isDeprecated :: BOOLEAN)",
  "name" : "apoc.help",
  "description" : "Returns descriptions of the available APOC procedures and functions. If a keyword is provided, it will return only those procedures and functions that have the keyword in their name.",
  "returnDescription" : [ {
    "name" : "type",
    "description" : "Whether it is a function or a procedure.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "name",
    "description" : "The name of the function or procedure.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "text",
    "description" : "The description of the function or procedure.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "signature",
    "description" : "The signature of the function or procedure.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "roles",
    "description" : "This value is always null.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "writes",
    "description" : "This value is always null.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "core",
    "description" : "If the function or procedure belongs to APOC Core.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "isDeprecated",
    "description" : "If the function or procedure is deprecated.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "proc",
    "description" : "A keyword to filter the results by.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.import.csv(nodes :: LIST<MAP>, rels :: LIST<MAP>, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.import.csv",
  "description" : "Imports `NODE` and `RELATIONSHIP` values with the given labels and types from the provided CSV file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file from which the data was imported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "The source of the imported data: \"file\", \"binary\" or \"file/binary\".",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format of the file: [\"csv\", \"graphml\", \"json\"].",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of imported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of imported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of imported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the import.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the import was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the import was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the import ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the import.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "List of map values of where to import the node values from; { fileName :: STRING, data :: BYTEARRAY, labels :: LIST<STRING> }.",
    "isDeprecated" : false,
    "type" : "LIST<MAP>"
  }, {
    "name" : "rels",
    "description" : "List of map values specifying where to import relationship values from: { fileName :: STRING, data :: BYTEARRAY, type :: STRING }.",
    "isDeprecated" : false,
    "type" : "LIST<MAP>"
  }, {
    "name" : "config",
    "description" : "{\n    delimiter = \",\" :: STRING,\n    arrayDelimiter = \";\" :: STRING,\n    ignoreDuplicateNodes = false :: BOOLEAN,\n    quotationCharacter = \"\"\" :: STRING,\n    stringIds = true :: BOOLEAN,\n    skipLines = 1 :: INTEGER,\n    ignoreBlankString = false :: BOOLEAN,\n    ignoreEmptyCellArray = false :: BOOLEAN,\n    compression = \"NONE\" :: [\"NONE\", \"BYTES\", \"GZIP\", \"BZIP2\", \"DEFLATE\", \"BLOCK_LZ4\", \"FRAMED_SNAPPY\"],\n    charset = \"UTF-8\" :: STRING,\n    batchSize = 2000 :: INTEGER\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.import.graphml(urlOrBinaryFile :: ANY, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.import.graphml",
  "description" : "Imports a graph from the provided GraphML file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file from which the data was imported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "The source of the imported data: \"file\", \"binary\" or \"file/binary\".",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format of the file: [\"csv\", \"graphml\", \"json\"].",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of imported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of imported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of imported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the import.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the import was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the import was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the import ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the import.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "urlOrBinaryFile",
    "description" : "The name of the file or binary data to import the data from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n    readLabels = false :: BOOLEAN,\n    defaultRelationshipType = \"RELATED\" :: STRING,\n    storeNodeIds = false :: BOOLEAN,\n    batchSize = 20000 :: INTEGER,\n    compression = \"NONE\" :: [\"NONE\", \"BYTES\", \"GZIP\", \"BZIP2\", \"DEFLATE\", \"BLOCK_LZ4\", \"FRAMED_SNAPPY\"],\n    source = {} :: MAP,\n    target = {} :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.import.json(urlOrBinaryFile :: ANY, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
  "name" : "apoc.import.json",
  "description" : "Imports a graph from the provided JSON file.",
  "returnDescription" : [ {
    "name" : "file",
    "description" : "The name of the file from which the data was imported.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "source",
    "description" : "The source of the imported data: \"file\", \"binary\" or \"file/binary\".",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "format",
    "description" : "The format of the file: [\"csv\", \"graphml\", \"json\"].",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The number of imported nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relationships",
    "description" : "The number of imported relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "properties",
    "description" : "The number of imported properties.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "time",
    "description" : "The duration of the import.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rows",
    "description" : "The number of rows returned.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchSize",
    "description" : "The size of the batches the import was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of batches the import was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "Whether the import ran successfully.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "data",
    "description" : "The data returned by the import.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "urlOrBinaryFile",
    "description" : "The name of the file or binary data to import the data from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n    unwindBatchSize = 5000 :: INTEGER,\n    txBatchSize = 5000 :: INTEGER,\n    importIdName = \"neo4jImportId\" :: STRING,\n    nodePropertyMappings = {} :: MAP,\n    relPropertyMappings = {} :: MAP,\n    compression = \"NONE\" :: [\"NONE\", \"BYTES\", \"GZIP\", \"BZIP2\", \"DEFLATE\", \"BLOCK_LZ4\", \"FRAMED_SNAPPY\"],\n    cleanup = false :: BOOLEAN,\n    nodePropFilter = {} :: MAP,\n    relPropFilter = {} :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.import.xml(urlOrBinary :: ANY, config = {} :: MAP) :: (node :: NODE)",
  "name" : "apoc.import.xml",
  "description" : "Imports a graph from the provided XML file.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "An imported node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "urlOrBinary",
    "description" : "The name of the file or binary data to import the data from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n    connectCharacters = false :: BOOLEAN,\n    filterLeadingWhitespace = false :: BOOLEAN,\n    delimiter = \" \" :: STRING,\n    label :: STRING,\n    relType :: STRING,\n    charactersForTag :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.load.arrow(file :: STRING, config = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.load.arrow",
  "description" : "Imports `NODE` and `RELATIONSHIP` values from the provided arrow file.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "A map of data loaded from the given file.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "file",
    "description" : "The name of the file to import data from.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "This value is never used.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.load.arrow.stream(source :: BYTEARRAY, config = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.load.arrow.stream",
  "description" : "Imports `NODE` and `RELATIONSHIP` values from the provided arrow byte array.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "A map of data loaded from the given file.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "source",
    "description" : "The data to load.",
    "isDeprecated" : false,
    "type" : "BYTEARRAY"
  }, {
    "name" : "config",
    "description" : "This value is never used.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.load.json(urlOrKeyOrBinary :: ANY, path =  :: STRING, config = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.load.json",
  "description" : "Imports JSON file as a stream of values if the given JSON file is a `LIST<ANY>`.\nIf the given JSON file is a `MAP`, this procedure imports a single value instead.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "A map of data loaded from the given file.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "urlOrKeyOrBinary",
    "description" : "The name of the file or binary data to import the data from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "path",
    "description" : "A JSON path expression used to extract a certain part from the list.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = \"NONE\" :: [\"NONE\", \"BYTES\", \"GZIP\", \"BZIP2\", \"DEFLATE\", \"BLOCK_LZ4\", \"FRAMED_SNAPPY\"]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.load.jsonArray(url :: STRING, path =  :: STRING, config = {} :: MAP) :: (value :: ANY)",
  "name" : "apoc.load.jsonArray",
  "description" : "Loads array from a JSON URL (e.g. web-API) to then import the given JSON file as a stream of values.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "Data loaded from the given file.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "url",
    "description" : "The path to the JSON file.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "path",
    "description" : "A JSON path expression used to extract a certain part from the list.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = \"NONE\" :: [\"NONE\", \"BYTES\", \"GZIP\", \"BZIP2\"\", \"DEFLATE\", \"BLOCK_LZ4\", \"FRAMED_SNAPPY\"]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.load.jsonParams(urlOrKeyOrBinary :: ANY, headers :: MAP, payload :: STRING, path =  :: STRING, config = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.load.jsonParams",
  "description" : "Loads a JSON document from a URL (e.g. web-API) as a stream of values if the given JSON document is a `LIST<ANY>`.\nIf the given JSON file is a `MAP`, this procedure imports a single value instead.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "A map of data loaded from the given file.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "urlOrKeyOrBinary",
    "description" : "The name of the file or binary data to import the data from. Note that a URL needs to be properly encoded to conform with the URI standard.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "headers",
    "description" : "Headers to be used when connecting to the given URL.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "payload",
    "description" : "The payload to send when connecting to the given URL.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "path",
    "description" : "A JSON path expression used to extract specific subparts of the JSON document (extracted by a link:https://en.wikipedia.org/wiki/JSONPath[JSONPath] expression). The default is: ``.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = \"\"NONE\"\" :: [\"\"NONE\"\", \"\"BYTES\"\", \"\"GZIP\"\", \"\"BZIP2\"\", \"\"DEFLATE\"\", \"\"BLOCK_LZ4\"\", \"\"FRAMED_SNAPPY”]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.load.xml(urlOrBinary :: ANY, path = / :: STRING, config = {} :: MAP, simple = false :: BOOLEAN) :: (value :: MAP)",
  "name" : "apoc.load.xml",
  "description" : "Loads a single nested `MAP` from an XML URL (e.g. web-API).",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "A map of data loaded from the given file.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "urlOrBinary",
    "description" : "The name of the file or binary data to import the data from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "path",
    "description" : "An xPath expression to select nodes from the given XML document.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=/, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n    failOnError = true :: BOOLEAN,\n    headers = {} :: MAP,\n    compression = \"NONE\" :: [\"NONE\", \"BYTES\", \"GZIP\", \"BZIP2\", \"DEFLATE\", \"BLOCK_LZ4\", \"FRAMED_SNAPPY\"]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  }, {
    "name" : "simple",
    "description" : "Whether or not to parse the given XML in simple mode.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=false, type=BOOLEAN}",
    "type" : "BOOLEAN"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.lock.all(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>)",
  "name" : "apoc.lock.all",
  "description" : "Acquires a write lock on the given `NODE` and `RELATIONSHIP` values.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The list of nodes to acquire a write lock on.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "rels",
    "description" : "The list of relationships to acquire a write lock on.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.lock.nodes(nodes :: LIST<NODE>)",
  "name" : "apoc.lock.nodes",
  "description" : "Acquires a write lock on the given `NODE` values.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The list of nodes to acquire a write lock on.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.lock.read.nodes(nodes :: LIST<NODE>)",
  "name" : "apoc.lock.read.nodes",
  "description" : "Acquires a read lock on the given `NODE` values.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The list of nodes to acquire a read lock on.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.lock.read.rels(rels :: LIST<RELATIONSHIP>)",
  "name" : "apoc.lock.read.rels",
  "description" : "Acquires a read lock on the given `RELATIONSHIP` values.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rels",
    "description" : "The list of relationships to acquire a read lock on.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.lock.rels(rels :: LIST<RELATIONSHIP>)",
  "name" : "apoc.lock.rels",
  "description" : "Acquires a write lock on the given `RELATIONSHIP` values.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rels",
    "description" : "The list of relationships to acquire a write lock on.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.log.stream(path :: STRING, config = {} :: MAP) :: (lineNo :: INTEGER, line :: STRING, path :: STRING)",
  "name" : "apoc.log.stream",
  "description" : "Returns the file contents from the given log, optionally returning only the last n lines.\nThis procedure requires users to have an admin role.",
  "returnDescription" : [ {
    "name" : "lineNo",
    "description" : "The line number.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "line",
    "description" : "The content of the line.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "path",
    "description" : "The path to the log file.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : "This procedure is being moved to APOC Extended.",
  "argumentDescription" : [ {
    "name" : "path",
    "description" : "The name of the log file to read.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{ last :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.math.regr(label :: STRING, propertyY :: STRING, propertyX :: STRING) :: (r2 :: FLOAT, avgX :: FLOAT, avgY :: FLOAT, slope :: FLOAT)",
  "name" : "apoc.math.regr",
  "description" : "Returns the coefficient of determination (R-squared) for the values of propertyY and propertyX in the given label.",
  "returnDescription" : [ {
    "name" : "r2",
    "description" : "The coefficient of determination.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "avgX",
    "description" : "The average of the x values.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "avgY",
    "description" : "The average of the y values.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "slope",
    "description" : "The calculated slope.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "label",
    "description" : "The label of the nodes to perform the regression on.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "propertyY",
    "description" : "The name of the y property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "propertyX",
    "description" : "The name of the x property.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.merge.node(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (node :: NODE)",
  "name" : "apoc.merge.node",
  "description" : "Merges the given `NODE` values with the given dynamic labels.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The list of labels used for the generated MERGE statement.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "identProps",
    "description" : "Properties on the node that are always merged.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "onCreateProps",
    "description" : "Properties that are merged when a node is created.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  }, {
    "name" : "onMatchProps",
    "description" : "Properties that are merged when a node is matched.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.merge.node.eager(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (node :: NODE)",
  "name" : "apoc.merge.node.eager",
  "description" : "Merges the given `NODE` values with the given dynamic labels eagerly.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The list of labels used for the generated MERGE statement.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "identProps",
    "description" : "Properties on the node that are always merged.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "onCreateProps",
    "description" : "Properties that are merged when a node is created.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  }, {
    "name" : "onMatchProps",
    "description" : "Properties that are merged when a node is matched.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.merge.nodeWithStats(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (stats :: MAP, node :: NODE)",
  "name" : "apoc.merge.nodeWithStats",
  "description" : "Merges the given `NODE` values with the given dynamic labels. Provides queryStatistics in the result.",
  "returnDescription" : [ {
    "name" : "stats",
    "description" : "The returned query statistics.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The list of labels used for the generated MERGE statement.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "identProps",
    "description" : "Properties on the node that are always merged.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "onCreateProps",
    "description" : "Properties that are merged when a node is created.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  }, {
    "name" : "onMatchProps",
    "description" : "Properties that are merged when a node is matched.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.merge.nodeWithStats.eager(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (stats :: MAP, node :: NODE)",
  "name" : "apoc.merge.nodeWithStats.eager",
  "description" : "Merges the given `NODE` values with the given dynamic labels eagerly. Provides queryStatistics in the result.",
  "returnDescription" : [ {
    "name" : "stats",
    "description" : "The returned query statistics.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "node",
    "description" : "The updated node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The list of labels used for the generated MERGE statement.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "identProps",
    "description" : "Properties on the node that are always merged.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "onCreateProps",
    "description" : "Properties that are merged when a node is created.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  }, {
    "name" : "onMatchProps",
    "description" : "Properties that are merged when a node is matched.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.merge.relationship(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.merge.relationship",
  "description" : "Merges the given `RELATIONSHIP` values with the given dynamic types/properties.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The updated relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The start node of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relType",
    "description" : "The type of the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "identProps",
    "description" : "Properties on the relationship that are always merged.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "onCreateProps",
    "description" : "Properties that are merged when a relationship is created.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "endNode",
    "description" : "The end node of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "onMatchProps",
    "description" : "Properties that are merged when a relationship is matched.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.merge.relationship.eager(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.merge.relationship.eager",
  "description" : "Merges the given `RELATIONSHIP` values with the given dynamic types/properties eagerly.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The updated relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The start node of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relType",
    "description" : "The type of the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "identProps",
    "description" : "Properties on the relationship that are always merged.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "onCreateProps",
    "description" : "Properties that are merged when a relationship is created.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "endNode",
    "description" : "The end node of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "onMatchProps",
    "description" : "Properties that are merged when a relationship is matched.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.merge.relationshipWithStats(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (stats :: MAP, rel :: RELATIONSHIP)",
  "name" : "apoc.merge.relationshipWithStats",
  "description" : "Merges the given `RELATIONSHIP` values with the given dynamic types/properties. Provides queryStatistics in the result.",
  "returnDescription" : [ {
    "name" : "stats",
    "description" : "The returned query statistics.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "rel",
    "description" : "The updated relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The start node of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relType",
    "description" : "The type of the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "identProps",
    "description" : "Properties on the relationship that are always merged.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "onCreateProps",
    "description" : "Properties that are merged when a relationship is created.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "endNode",
    "description" : "The end node of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "onMatchProps",
    "description" : "Properties that are merged when a relationship is matched.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.merge.relationshipWithStats.eager(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (stats :: MAP, rel :: RELATIONSHIP)",
  "name" : "apoc.merge.relationshipWithStats.eager",
  "description" : "Merges the given `RELATIONSHIP` values with the given dynamic types/properties eagerly. Provides queryStatistics in the result.",
  "returnDescription" : [ {
    "name" : "stats",
    "description" : "The returned query statistics.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "rel",
    "description" : "The updated relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The start node of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relType",
    "description" : "The type of the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "identProps",
    "description" : "Properties on the relationship that are always merged.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "onCreateProps",
    "description" : "Properties that are merged when a relationship is created.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "endNode",
    "description" : "The end node of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "onMatchProps",
    "description" : "Properties that are merged when a relationship is matched.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.data(config = {} :: MAP) :: (label :: STRING, property :: STRING, count :: INTEGER, unique :: BOOLEAN, index :: BOOLEAN, existence :: BOOLEAN, type :: STRING, array :: BOOLEAN, sample :: LIST<ANY>, left :: INTEGER, right :: INTEGER, other :: LIST<STRING>, otherLabels :: LIST<STRING>, elementType :: STRING)",
  "name" : "apoc.meta.data",
  "description" : "Examines the full graph and returns a table of metadata.",
  "returnDescription" : [ {
    "name" : "label",
    "description" : "The label or type name.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "property",
    "description" : "The property name.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "count",
    "description" : "The count of seen values.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "unique",
    "description" : "If all seen values are unique.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "index",
    "description" : "If an index exists for this property.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "existence",
    "description" : "If an existence constraint exists for this property.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "type",
    "description" : "The type represented by this row.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "array",
    "description" : "Indicates whether the property is an array. If the type column is \"RELATIONSHIP,\" this will be true if there is at least one node with two outgoing relationships of the type specified by the label or property column.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "sample",
    "description" : "This is always null.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "left",
    "description" : "The ratio (rounded down) of the count of outgoing relationships for a specific label and relationship type relative to the total count of those patterns.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "right",
    "description" : "The ratio (rounded down) of the count of incoming relationships for a specific label and relationship type relative to the total count of those patterns.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "other",
    "description" : "The labels of connect nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "otherLabels",
    "description" : "For uniqueness constraints, this field shows other labels present on nodes that also contain the uniqueness constraint.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "elementType",
    "description" : "Whether this refers to a node or a relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.data.of(graph :: ANY, config = {} :: MAP) :: (label :: STRING, property :: STRING, count :: INTEGER, unique :: BOOLEAN, index :: BOOLEAN, existence :: BOOLEAN, type :: STRING, array :: BOOLEAN, sample :: LIST<ANY>, left :: INTEGER, right :: INTEGER, other :: LIST<STRING>, otherLabels :: LIST<STRING>, elementType :: STRING)",
  "name" : "apoc.meta.data.of",
  "description" : "Examines the given sub-graph and returns a table of metadata.",
  "returnDescription" : [ {
    "name" : "label",
    "description" : "The label or type name.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "property",
    "description" : "The property name.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "count",
    "description" : "The count of seen values.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "unique",
    "description" : "If all seen values are unique.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "index",
    "description" : "If an index exists for this property.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "existence",
    "description" : "If an existence constraint exists for this property.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "type",
    "description" : "The type represented by this row.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "array",
    "description" : "Indicates whether the property is an array. If the type column is \"RELATIONSHIP,\" this will be true if there is at least one node with two outgoing relationships of the type specified by the label or property column.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "sample",
    "description" : "This is always null.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "left",
    "description" : "The ratio (rounded down) of the count of outgoing relationships for a specific label and relationship type relative to the total count of those patterns.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "right",
    "description" : "The ratio (rounded down) of the count of incoming relationships for a specific label and relationship type relative to the total count of those patterns.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "other",
    "description" : "The labels of connect nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "otherLabels",
    "description" : "For uniqueness constraints, this field shows other labels present on nodes that also contain the uniqueness constraint.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "elementType",
    "description" : "Whether this refers to a node or a relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "graph",
    "description" : "The graph to extract metadata from.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.graph(config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
  "name" : "apoc.meta.graph",
  "description" : "Examines the full graph and returns a meta-graph.",
  "returnDescription" : [ {
    "name" : "nodes",
    "description" : "Nodes representing the meta data.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "relationships",
    "description" : "Relationships representing the meta data.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "The number of nodes whose relationships are checked to remove false positives and the number of relationships to read per sampled node. A value of -1 will read all; { sample = 1 :: INTEGER, maxRels = -1 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.graph.of(graph = {} :: ANY, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
  "name" : "apoc.meta.graph.of",
  "description" : "Examines the given sub-graph and returns a meta-graph.",
  "returnDescription" : [ {
    "name" : "nodes",
    "description" : "Nodes representing the meta data.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "relationships",
    "description" : "Relationships representing the meta data.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "graph",
    "description" : "The graph to extract metadata from.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=ANY}",
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "The number of nodes whose relationships are checked to remove false positives and the number of relationships to read per sampled node. A value of -1 will read all; { sample = 1 :: INTEGER, maxRels = -1 :: INTEGER, addRelationshipsBetweenNodes = true :: BOOLEAN }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.graphSample(config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
  "name" : "apoc.meta.graphSample",
  "description" : "Examines the full graph and returns a meta-graph.\nUnlike `apoc.meta.graph`, this procedure does not filter away non-existing paths.",
  "returnDescription" : [ {
    "name" : "nodes",
    "description" : "Nodes representing the meta data.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "relationships",
    "description" : "Relationships representing the meta data.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "Empty map (deprecated).",
    "isDeprecated" : true,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.nodeTypeProperties(config = {} :: MAP) :: (nodeType :: STRING, nodeLabels :: LIST<STRING>, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN, propertyObservations :: INTEGER, totalObservations :: INTEGER)",
  "name" : "apoc.meta.nodeTypeProperties",
  "description" : "Examines the full graph and returns a table of metadata with information about the `NODE` values therein.",
  "returnDescription" : [ {
    "name" : "nodeType",
    "description" : "The type of the node.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodeLabels",
    "description" : "The labels on the node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "propertyName",
    "description" : "The name of the property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "propertyTypes",
    "description" : "The types this property has.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "mandatory",
    "description" : "Whether or not this property exists on all nodes of the given type.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "propertyObservations",
    "description" : "The number of times this property was observed.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "totalObservations",
    "description" : "The number of times the label was seen.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "{\n        includeLabels = [] :: LIST<STRING>,\n        includeRels = [] :: LIST<STRING>,\n        excludeLabels = [] :: LIST<STRING>,\n        excludeRels = [] :: LIST<STRING>,\n        sample = 1000 :: INTEGER,\n        maxRels = 100 :: INTEGER\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.relTypeProperties(config = {} :: MAP) :: (relType :: STRING, sourceNodeLabels :: LIST<STRING>, targetNodeLabels :: LIST<STRING>, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN, propertyObservations :: INTEGER, totalObservations :: INTEGER)",
  "name" : "apoc.meta.relTypeProperties",
  "description" : "Examines the full graph and returns a table of metadata with information about the `RELATIONSHIP` values therein.",
  "returnDescription" : [ {
    "name" : "relType",
    "description" : "The type of the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "sourceNodeLabels",
    "description" : "The labels belonging to the start node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "targetNodeLabels",
    "description" : "The labels belonging to the end node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "propertyName",
    "description" : "The name of the property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "propertyTypes",
    "description" : "The types this property has.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "mandatory",
    "description" : "Whether or not this property exists on all nodes of the given type.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "propertyObservations",
    "description" : "The number of times this property was observed.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "totalObservations",
    "description" : "The number of times the label was seen.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "{\n        includeLabels = [] :: LIST<STRING>,\n        includeRels = [] :: LIST<STRING>,\n        excludeLabels = [] :: LIST<STRING>,\n        excludeRels = [] :: LIST<STRING>,\n        sample = 1000 :: INTEGER,\n        maxRels = 100 :: INTEGER\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.schema(config = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.meta.schema",
  "description" : "Examines the given sub-graph and returns metadata as a `MAP`.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "Meta information represented as a map.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.stats() :: (labelCount :: INTEGER, relTypeCount :: INTEGER, propertyKeyCount :: INTEGER, nodeCount :: INTEGER, relCount :: INTEGER, labels :: MAP, relTypes :: MAP, relTypesCount :: MAP, stats :: MAP)",
  "name" : "apoc.meta.stats",
  "description" : "Returns the metadata stored in the transactional database statistics.",
  "returnDescription" : [ {
    "name" : "labelCount",
    "description" : "The total number of distinct node labels.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relTypeCount",
    "description" : "The total number of distinct relationship types.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "propertyKeyCount",
    "description" : "The count of property keys.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "nodeCount",
    "description" : "The total number of nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relCount",
    "description" : "The total number of relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "labels",
    "description" : "A map of labels to their count.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "relTypes",
    "description" : "A map of relationship types per start or end node label.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "relTypesCount",
    "description" : "A map of relationship types to their count.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "stats",
    "description" : "A map containing all the given return fields from this procedure.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.meta.subGraph(config :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
  "name" : "apoc.meta.subGraph",
  "description" : "Examines the given sub-graph and returns a meta-graph.",
  "returnDescription" : [ {
    "name" : "nodes",
    "description" : "Nodes representing the meta data.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "relationships",
    "description" : "Relationships representing the meta data.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "{\n    excludeLabels :: LIST<STRING>,\n    includeLabels :: LIST<STRING>,\n    includeRels :: LIST<STRING>,\n    maxRels = -1 :: INTEGER,\n    sample = 1 :: INTEGER\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.neighbors.athop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (node :: NODE)",
  "name" : "apoc.neighbors.athop",
  "description" : "Returns all `NODE` values connected by the given `RELATIONSHIP` types at the specified distance.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "A neighboring node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "node",
    "description" : "The starting node for the algorithm.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypes",
    "description" : "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "distance",
    "description" : "The number of hops to take.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=1, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.neighbors.athop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: INTEGER)",
  "name" : "apoc.neighbors.athop.count",
  "description" : "Returns the count of all `NODE` values connected by the given `RELATIONSHIP` types at the specified distance.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The total count of neighboring nodes at the given hop distance.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "node",
    "description" : "The starting node for the algorithm.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypes",
    "description" : "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "distance",
    "description" : "The number of hops to take.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=1, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.neighbors.byhop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (nodes :: LIST<NODE>)",
  "name" : "apoc.neighbors.byhop",
  "description" : "Returns all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance. Returns `LIST<NODE>` values, where each `PATH` of `NODE` values represents one row of the `LIST<NODE>` values.",
  "returnDescription" : [ {
    "name" : "nodes",
    "description" : "A list of neighboring nodes at a distinct hop distance.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "node",
    "description" : "The starting node for the algorithm.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypes",
    "description" : "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "distance",
    "description" : "The max number of hops to take.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=1, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.neighbors.byhop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: LIST<ANY>)",
  "name" : "apoc.neighbors.byhop.count",
  "description" : "Returns the count of all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "A list of neighbor counts for each distinct hop distance.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "node",
    "description" : "The starting node for the algorithm.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypes",
    "description" : "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "distance",
    "description" : "The max number of hops to take.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=1, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.neighbors.tohop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (node :: NODE)",
  "name" : "apoc.neighbors.tohop",
  "description" : "Returns all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance.\n`NODE` values are returned individually for each row.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "A neighboring node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "node",
    "description" : "The starting node for the algorithm.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypes",
    "description" : "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "distance",
    "description" : "The max number of hops to take.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=1, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.neighbors.tohop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: INTEGER)",
  "name" : "apoc.neighbors.tohop.count",
  "description" : "Returns the count of all `NODE` values connected by the given `RELATIONSHIP` values in the pattern within the specified distance.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The total count of neighboring nodes within the given hop distance.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "node",
    "description" : "The starting node for the algorithm.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relTypes",
    "description" : "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "distance",
    "description" : "The max number of hops to take.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=1, type=INTEGER}",
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.nodes.collapse(nodes :: LIST<NODE>, config = {} :: MAP) :: (from :: NODE, rel :: RELATIONSHIP, to :: NODE)",
  "name" : "apoc.nodes.collapse",
  "description" : "Merges `NODE` values together in the given `LIST<NODE>`.\nThe `NODE` values are then combined to become one `NODE`, with all labels of the previous `NODE` values attached to it, and all `RELATIONSHIP` values pointing to it.",
  "returnDescription" : [ {
    "name" : "from",
    "description" : "The recently collapsed virtual node.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "rel",
    "description" : "A relationship connected to the collapsed node.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "to",
    "description" : "A node connected to the other end of the relationship.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The list of node values to merge.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "config",
    "description" : "{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = \"incoming\" :: [\"incoming\", \"outgoing\", \"merge\"]\n    properties :: [\"overwrite\", \"discard\", \"combine\"]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.nodes.cycles(nodes :: LIST<NODE>, config = {} :: MAP) :: (path :: PATH)",
  "name" : "apoc.nodes.cycles",
  "description" : "Detects all `PATH` cycles in the given `LIST<NODE>`.\nThis procedure can be limited on `RELATIONSHIP` values as well.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "A path containing a found cycle.",
    "isDeprecated" : false,
    "type" : "PATH"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The list of nodes to check for path cycles.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "config",
    "description" : "{\n    maxDepth :: INTEGER,\n    relTypes = [] :: LIST<STRING>\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.nodes.delete(nodes :: ANY, batchSize :: INTEGER) :: (value :: INTEGER)",
  "name" : "apoc.nodes.delete",
  "description" : "Deletes all `NODE` values with the given ids.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The number of deleted nodes.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to be deleted. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "batchSize",
    "description" : "The number of node values to delete in a single batch.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.nodes.get(nodes :: ANY) :: (node :: NODE)",
  "name" : "apoc.nodes.get",
  "description" : "Returns all `NODE` values with the given ids.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "A node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to be returned. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.nodes.group(labels :: LIST<STRING>, groupByProperties :: LIST<STRING>, aggregations = [{*=count}, {*=count}] :: LIST<MAP>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>, node :: NODE, relationship :: RELATIONSHIP)",
  "name" : "apoc.nodes.group",
  "description" : "Allows for the aggregation of `NODE` values based on the given properties.\nThis procedure returns virtual `NODE` values.",
  "returnDescription" : [ {
    "name" : "nodes",
    "description" : "A list of grouped nodes represented as virtual nodes.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "relationships",
    "description" : "A list of grouped relationships represented as virtual relationships.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "node",
    "description" : "The grouping node.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "relationship",
    "description" : "The grouping relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labels",
    "description" : "The list of node labels to aggregate over. Use `['*']` to indicate all node labels should be looked at.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "groupByProperties",
    "description" : "The property keys to group the nodes by.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "aggregations",
    "description" : "The first map specifies the node properties to aggregate with their corresponding aggregation functions, while the second map specifies the relationship properties for aggregation.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=[{*=count}, {*=count}], type=LIST<MAP>}",
    "type" : "LIST<MAP>"
  }, {
    "name" : "config",
    "description" : "{\n    includeRels :: STRING | LIST<STRING>\n    excludeRels :: STRING | LIST<STRING>,\n    orphans = true :: BOOLEAN,\n    selfRels = true :: BOOLEAN,\n    limitNodes = -1 :: INTEGER,\n    limitRels = -1 :: INTEGER,\n    relsPerNode = -1 :: INTEGER,\n    filter :: MAP\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.nodes.link(nodes :: LIST<NODE>, type :: STRING, config = {} :: MAP)",
  "name" : "apoc.nodes.link",
  "description" : "Creates a linked list of the given `NODE` values connected by the given `RELATIONSHIP` type.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The list of nodes to be linked.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "type",
    "description" : "The relationship type name to link the nodes with.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{ avoidDuplicates = false :: BOOLEAN }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.nodes.rels(rels :: ANY) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.nodes.rels",
  "description" : "Returns all `RELATIONSHIP` values with the given ids.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "A relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rels",
    "description" : "The relationships to be returned. Relationships can be of type `STRING` (elementId()), `INTEGER` (id()), `RELATIONSHIP`, or `LIST<STRING | INTEGER | RELATIONSHIP>",
    "isDeprecated" : false,
    "type" : "ANY"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.path.expand(startNode :: ANY, relFilter :: STRING, labelFilter :: STRING, minDepth :: INTEGER, maxDepth :: INTEGER) :: (path :: PATH)",
  "name" : "apoc.path.expand",
  "description" : "Returns `PATH` values expanded from the start `NODE` following the given `RELATIONSHIP` types from min-depth to max-depth.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The expanded path.",
    "isDeprecated" : false,
    "type" : "PATH"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "relFilter",
    "description" : "An allow list of types allowed on the returned relationships.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "labelFilter",
    "description" : "An allow list of labels allowed on the returned nodes.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "minDepth",
    "description" : "The minimum number of hops allowed in the returned paths.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "maxDepth",
    "description" : "The maximum number of hops allowed in the returned paths.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.path.expandConfig(startNode :: ANY, config :: MAP) :: (path :: PATH)",
  "name" : "apoc.path.expandConfig",
  "description" : "Returns `PATH` values expanded from the start `NODE` with the given `RELATIONSHIP` types from min-depth to max-depth.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The expanded path.",
    "isDeprecated" : false,
    "type" : "PATH"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = \"RELATIONSHIP_PATH\" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.path.spanningTree(startNode :: ANY, config :: MAP) :: (path :: PATH)",
  "name" : "apoc.path.spanningTree",
  "description" : "Returns spanning tree `PATH` values expanded from the start `NODE` following the given `RELATIONSHIP` types to max-depth.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "A spanning tree path.",
    "isDeprecated" : false,
    "type" : "PATH"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = \"RELATIONSHIP_PATH\" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.path.subgraphAll(startNode :: ANY, config :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
  "name" : "apoc.path.subgraphAll",
  "description" : "Returns the sub-graph reachable from the start `NODE` following the given `RELATIONSHIP` types to max-depth.",
  "returnDescription" : [ {
    "name" : "nodes",
    "description" : "Nodes part of the returned subgraph.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "relationships",
    "description" : "Relationships part of the returned subgraph.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = \"RELATIONSHIP_PATH\" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.path.subgraphNodes(startNode :: ANY, config :: MAP) :: (node :: NODE)",
  "name" : "apoc.path.subgraphNodes",
  "description" : "Returns the `NODE` values in the sub-graph reachable from the start `NODE` following the given `RELATIONSHIP` types to max-depth.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "Nodes part of the returned subgraph.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "startNode",
    "description" : "The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "config",
    "description" : "{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = \"RELATIONSHIP_PATH\" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.paths.toJsonTree(paths :: LIST<PATH>, lowerCaseRels = true :: BOOLEAN, config = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.paths.toJsonTree",
  "description" : "Creates a stream of nested documents representing the graph as a tree by traversing outgoing relationships.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The resulting tree.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "paths",
    "description" : "A list of paths to convert into a tree.",
    "isDeprecated" : false,
    "type" : "LIST<PATH>"
  }, {
    "name" : "lowerCaseRels",
    "description" : "Whether or not to convert relationship types to lower case.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=true, type=BOOLEAN}",
    "type" : "BOOLEAN"
  }, {
    "name" : "config",
    "description" : "{ nodes = {} :: MAP, rels = {} :: MAP, sortPaths = true :: BOOLEAN }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.periodic.cancel(name :: STRING) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)",
  "name" : "apoc.periodic.cancel",
  "description" : "Cancels the given background job.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the job.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "delay",
    "description" : "The delay on the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rate",
    "description" : "The rate of the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "If the job has completed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "cancelled",
    "description" : "If the job has been cancelled.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the job to cancel.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.periodic.commit(statement :: STRING, params = {} :: MAP) :: (updates :: INTEGER, executions :: INTEGER, runtime :: INTEGER, batches :: INTEGER, failedBatches :: INTEGER, batchErrors :: MAP, failedCommits :: INTEGER, commitErrors :: MAP, wasTerminated :: BOOLEAN)",
  "name" : "apoc.periodic.commit",
  "description" : "Runs the given statement in separate batched transactions.",
  "returnDescription" : [ {
    "name" : "updates",
    "description" : "The total number of updates.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "executions",
    "description" : "The total number of executions.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "runtime",
    "description" : "The total time taken in nanoseconds.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batches",
    "description" : "The number of run batches.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedBatches",
    "description" : "The number of failed batches.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "batchErrors",
    "description" : "Errors returned from the failed batches.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "failedCommits",
    "description" : "The number of failed commits.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "commitErrors",
    "description" : "Errors returned from the failed commits.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "wasTerminated",
    "description" : "If the job was terminated.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "statement",
    "description" : "The Cypher statement to run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.periodic.countdown(name :: STRING, statement :: STRING, delay :: INTEGER) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)",
  "name" : "apoc.periodic.countdown",
  "description" : "Runs a repeatedly called background statement until it returns 0.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the job.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "delay",
    "description" : "The delay on the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rate",
    "description" : "The rate of the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "If the job has completed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "cancelled",
    "description" : "If the job has been cancelled.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the job.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "statement",
    "description" : "The Cypher statement to run, returning a count on each run indicating the remaining iterations.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "delay",
    "description" : "The delay in seconds to wait between each job execution.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.periodic.iterate(cypherIterate :: STRING, cypherAction :: STRING, config :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, wasTerminated :: BOOLEAN, failedParams :: MAP, updateStatistics :: MAP)",
  "name" : "apoc.periodic.iterate",
  "description" : "Runs the second statement for each item returned by the first statement.\nThis procedure returns the number of batches and the total number of processed rows.",
  "returnDescription" : [ {
    "name" : "batches",
    "description" : "The total number of batches.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "total",
    "description" : "The number of processed input rows.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "timeTaken",
    "description" : "The duration taken in seconds.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "committedOperations",
    "description" : "The number of successful inner queries (actions).",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedOperations",
    "description" : "The number of failed inner queries (actions).",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedBatches",
    "description" : "The number of failed batches.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "retries",
    "description" : "The number of retries.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "errorMessages",
    "description" : "A map of batch error messages paired with their corresponding error counts.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "batch",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "operations",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "wasTerminated",
    "description" : "If the transaction was terminated before completion.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "failedParams",
    "description" : "Parameters of failed batches. The key is the batch number as a STRING and the value is a list of batch parameters.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "updateStatistics",
    "description" : "{\n    nodesCreated :: INTEGER,\n    nodesDeleted :: INTEGER,\n    relationshipsCreated :: INTEGER,\n    relationshipsDeleted :: INTEGER,\n    propertiesSet :: INTEGER,\n    labelsAdded :: INTEGER,\n    labelsRemoved :: INTEGER\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "cypherIterate",
    "description" : "The first Cypher statement to be run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "cypherAction",
    "description" : "The Cypher statement to run for each item returned by the initial Cypher statement.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n    batchSize = 10000 :: INTEGER,\n    parallel = false :: BOOLEAN,\n    retries = 0 :: INTEGER,\n    batchMode = \"BATCH\" :: STRING,\n    params = {} :: MAP,\n    concurrency :: INTEGER,\n    failedParams = -1 :: INTEGER,\n    planner = \"DEFAULT\" :: [\"DEFAULT\", \"COST\", \"IDP\", \"DP\"]\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.periodic.list() :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)",
  "name" : "apoc.periodic.list",
  "description" : "Returns a `LIST<ANY>` of all background jobs.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the job.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "delay",
    "description" : "The delay on the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rate",
    "description" : "The rate of the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "If the job has completed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "cancelled",
    "description" : "If the job has been cancelled.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.periodic.repeat(name :: STRING, statement :: STRING, rate :: INTEGER, config = {} :: MAP) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)",
  "name" : "apoc.periodic.repeat",
  "description" : "Runs a repeatedly called background job.\nTo stop this procedure, use `apoc.periodic.cancel`.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the job.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "delay",
    "description" : "The delay on the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rate",
    "description" : "The rate of the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "If the job has completed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "cancelled",
    "description" : "If the job has been cancelled.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the job.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "statement",
    "description" : "The Cypher statement to run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "rate",
    "description" : "The delay in seconds to wait between each job execution.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "config",
    "description" : "{ params = {} :: MAP }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.periodic.submit(name :: STRING, statement :: STRING, params = {} :: MAP) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)",
  "name" : "apoc.periodic.submit",
  "description" : "Creates a background job which runs the given Cypher statement once.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the job.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "delay",
    "description" : "The delay on the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "rate",
    "description" : "The rate of the job.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "done",
    "description" : "If the job has completed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "cancelled",
    "description" : "If the job has been cancelled.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the job.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "statement",
    "description" : "The Cypher statement to run.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "{ params = {} :: MAP }",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.periodic.truncate(config = {} :: MAP)",
  "name" : "apoc.periodic.truncate",
  "description" : "Removes all entities (and optionally indexes and constraints) from the database using the `apoc.periodic.iterate` procedure.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "{\n    dropSchema = true :: BOOLEAN,\n    batchSize = 10000 :: INTEGER,\n    parallel = false :: BOOLEAN,\n    retries = 0 :: INTEGER,\n    batchMode = \"BATCH\" :: STRING,\n    params = {} :: MAP,\n    concurrency :: INTEGER,\n    failedParams = -1 :: INTEGER,\n    planner = \"DEFAULT\" :: [\"DEFAULT\", \"COST\", \"IDP\", \"DP\"]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.categorize(sourceKey :: STRING, type :: STRING, outgoing :: BOOLEAN, label :: STRING, targetKey :: STRING, copiedKeys :: LIST<STRING>, batchSize :: INTEGER)",
  "name" : "apoc.refactor.categorize",
  "description" : "Creates new category `NODE` values from `NODE` values in the graph with the specified `sourceKey` as one of its property keys.\nThe new category `NODE` values are then connected to the original `NODE` values with a `RELATIONSHIP` of the given type.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "sourceKey",
    "description" : "The property key to add to the on the new node.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "type",
    "description" : "The relationship type to connect to the new node.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "outgoing",
    "description" : "Whether the relationship should be outgoing or not.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "label",
    "description" : "The label of the new node.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "targetKey",
    "description" : "The name by which the source key value will be referenced on the new node.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "copiedKeys",
    "description" : "A list of additional property keys to be copied to the new node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "batchSize",
    "description" : "The max size of each batch.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.cloneNodes(nodes :: LIST<NODE>, withRelationships = false :: BOOLEAN, skipProperties = [] :: LIST<STRING>) :: (input :: INTEGER, output :: NODE, error :: STRING)",
  "name" : "apoc.refactor.cloneNodes",
  "description" : "Clones the given `NODE` values with their labels and properties.\nIt is possible to skip any `NODE` properties using skipProperties (note: this only skips properties on `NODE` values and not their `RELATIONSHIP` values).",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The internal id of the original entity.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The copied entity.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "error",
    "description" : "Any error that occurred during the copy process.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to be cloned.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "withRelationships",
    "description" : "Whether or not the connected relationships should also be cloned.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=false, type=BOOLEAN}",
    "type" : "BOOLEAN"
  }, {
    "name" : "skipProperties",
    "description" : "Whether or not to skip the node properties when cloning.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=[], type=LIST<STRING>}",
    "type" : "LIST<STRING>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.cloneSubgraph(nodes :: LIST<NODE>, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (input :: INTEGER, output :: NODE, error :: STRING)",
  "name" : "apoc.refactor.cloneSubgraph",
  "description" : "Clones the given `NODE` values with their labels and properties (optionally skipping any properties in the `skipProperties` `LIST<STRING>` via the config `MAP`), and clones the given `RELATIONSHIP` values.\nIf no `RELATIONSHIP` values are provided, all existing `RELATIONSHIP` values between the given `NODE` values will be cloned.",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The internal id of the original entity.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The copied entity.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "error",
    "description" : "Any error that occurred during the copy process.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to be cloned.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "rels",
    "description" : "The relationships to be cloned. If left empty all relationships between the given nodes will be cloned.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}",
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "config",
    "description" : "{\n    standinNodes :: LIST<LIST<NODE>>,\n    skipProperties :: LIST<STRING>,\n    createNodesInNewTransactions = false :: BOOLEAN\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.cloneSubgraphFromPaths(paths :: LIST<PATH>, config = {} :: MAP) :: (input :: INTEGER, output :: NODE, error :: STRING)",
  "name" : "apoc.refactor.cloneSubgraphFromPaths",
  "description" : "Clones a sub-graph defined by the given `LIST<PATH>` values.\nIt is possible to skip any `NODE` properties using the `skipProperties` `LIST<STRING>` via the config `MAP`.",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The internal id of the original entity.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The copied entity.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "error",
    "description" : "Any error that occurred during the copy process.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "paths",
    "description" : "The paths to be cloned.",
    "isDeprecated" : false,
    "type" : "LIST<PATH>"
  }, {
    "name" : "config",
    "description" : "{\n    standinNodes :: LIST<LIST<NODE>>,\n    skipProperties :: LIST<STRING>\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.collapseNode(nodes :: ANY, relType :: STRING) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)",
  "name" : "apoc.refactor.collapseNode",
  "description" : "Collapses the given `NODE` and replaces it with a `RELATIONSHIP` of the given type.",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The id of the given relationship.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The id of the new relationship with the updated type.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "error",
    "description" : "The message if an error occurred.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to collapse. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "relType",
    "description" : "The name of the resulting relationship type.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.deleteAndReconnect(path :: PATH, nodes :: LIST<NODE>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
  "name" : "apoc.refactor.deleteAndReconnect",
  "description" : "Removes the given `NODE` values from the `PATH` (and graph, including all of its relationships) and reconnects the remaining `NODE` values.\nNote, undefined behaviour for paths that visits the same node multiple times.\nNote, nodes that are not connected in the same direction as the path will not be reconnected, for example `MATCH p=(:A)-->(b:B)<--(:C) CALL apoc.refactor.deleteAndReconnect(p, [b]) ...` will not reconnect the :A and :C nodes.",
  "returnDescription" : [ {
    "name" : "nodes",
    "description" : "The remaining nodes.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "relationships",
    "description" : "The new connecting relationships.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "path",
    "description" : "The path containing the nodes to delete and the remaining nodes to reconnect.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "nodes",
    "description" : "The nodes to delete.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "config",
    "description" : "{\n    relationshipSelectionStrategy = \"incoming\" :: [\"incoming\", \"outgoing\", \"merge\"]\n    properties :: [\"overwrite\", \"discard\", \"combine\"]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.extractNode(rels :: ANY, labels :: LIST<STRING>, outType :: STRING, inType :: STRING) :: (input :: INTEGER, output :: NODE, error :: STRING)",
  "name" : "apoc.refactor.extractNode",
  "description" : "Expands the given `RELATIONSHIP` VALUES into intermediate `NODE` VALUES.\nThe intermediate `NODE` values are connected by the given `outType` and `inType`.",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The internal id of the original entity.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The copied entity.",
    "isDeprecated" : false,
    "type" : "NODE"
  }, {
    "name" : "error",
    "description" : "Any error that occurred during the copy process.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rels",
    "description" : "The relationships to turn into new nodes. Relationships can be of type `STRING` (elementId()), `INTEGER` (id()), `RELATIONSHIP`, or `LIST<STRING | INTEGER | RELATIONSHIP>`.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "labels",
    "description" : "The labels to be added to the new nodes.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "outType",
    "description" : "The type of the outgoing relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "inType",
    "description" : "The type of the ingoing relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.from(rel :: RELATIONSHIP, newNode :: NODE) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)",
  "name" : "apoc.refactor.from",
  "description" : "Redirects the given `RELATIONSHIP` to the given start `NODE`.",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The internal id of the original entity.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The copied entity.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "error",
    "description" : "Any error that occurred during the copy process.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rel",
    "description" : "The relationship to redirect.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "newNode",
    "description" : "The node to redirect the given relationship to.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.invert(rel :: RELATIONSHIP) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)",
  "name" : "apoc.refactor.invert",
  "description" : "Inverts the direction of the given `RELATIONSHIP`.",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The internal id of the original entity.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The copied entity.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "error",
    "description" : "Any error that occurred during the copy process.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rel",
    "description" : "The relationship to reverse.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.mergeNodes(nodes :: LIST<NODE>, config = {} :: MAP) :: (node :: NODE)",
  "name" : "apoc.refactor.mergeNodes",
  "description" : "Merges the given `LIST<NODE>` onto the first `NODE` in the `LIST<NODE>`.\nAll `RELATIONSHIP` values are merged onto that `NODE` as well.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The merged node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "nodes",
    "description" : "The nodes to be merged onto the first node.",
    "isDeprecated" : false,
    "type" : "LIST<NODE>"
  }, {
    "name" : "config",
    "description" : "{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = \"incoming\" :: [\"incoming\", \"outgoing\", \"merge\"]\n    properties :: [\"overwrite\", \"\"discard\", \"combine\"]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.mergeRelationships(rels :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (rel :: RELATIONSHIP)",
  "name" : "apoc.refactor.mergeRelationships",
  "description" : "Merges the given `LIST<RELATIONSHIP>` onto the first `RELATIONSHIP` in the `LIST<RELATIONSHIP>`.",
  "returnDescription" : [ {
    "name" : "rel",
    "description" : "The merged relationship.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rels",
    "description" : "The relationships to be merged onto the first relationship.",
    "isDeprecated" : false,
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "config",
    "description" : "{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = \"incoming\" :: [\"incoming\", \"outgoing\", \"merge\"]\n    properties :: [\"overwrite\", \"discard\", \"combine\"]\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.normalizeAsBoolean(entity :: ANY, propertyKey :: STRING, trueValues :: LIST<ANY>, falseValues :: LIST<ANY>)",
  "name" : "apoc.refactor.normalizeAsBoolean",
  "description" : "Refactors the given property to a `BOOLEAN`.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "entity",
    "description" : "The node or relationship whose properties will be normalized to booleans.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "propertyKey",
    "description" : "The name of the property key to normalize.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "trueValues",
    "description" : "The possible representations of true values.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  }, {
    "name" : "falseValues",
    "description" : "The possible representations of false values.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.rename.label(oldLabel :: STRING, newLabel :: STRING, nodes = [] :: LIST<NODE>) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)",
  "name" : "apoc.refactor.rename.label",
  "description" : "Renames the given label from `oldLabel` to `newLabel` for all `NODE` values.\nIf a `LIST<NODE>` is provided, the renaming is applied to the `NODE` values within this `LIST<NODE>` only.",
  "returnDescription" : [ {
    "name" : "batches",
    "description" : "The number of batches the operation was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "total",
    "description" : "The total number of renamings performed.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "timeTaken",
    "description" : "The time taken to complete the operation.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "committedOperations",
    "description" : "The total number of committed operations.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedOperations",
    "description" : "The total number of failed operations.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedBatches",
    "description" : "The total number of failed batches.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "retries",
    "description" : "The total number of retries.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "errorMessages",
    "description" : "The collected error messages.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "batch",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "operations",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "constraints",
    "description" : "Constraints associated with the given label or type.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "indexes",
    "description" : "Indexes associated with the given label or type.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "oldLabel",
    "description" : "The label to rename.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "newLabel",
    "description" : "The new name to give the label.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The nodes to apply the new name to. If this list is empty, all nodes with the old label will be renamed.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=[], type=LIST<NODE>}",
    "type" : "LIST<NODE>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.rename.nodeProperty(oldName :: STRING, newName :: STRING, nodes = [] :: LIST<NODE>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)",
  "name" : "apoc.refactor.rename.nodeProperty",
  "description" : "Renames the given property from `oldName` to `newName` for all `NODE` values.\nIf a `LIST<NODE>` is provided, the renaming is applied to the `NODE` values within this `LIST<NODE>` only.",
  "returnDescription" : [ {
    "name" : "batches",
    "description" : "The number of batches the operation was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "total",
    "description" : "The total number of renamings performed.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "timeTaken",
    "description" : "The time taken to complete the operation.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "committedOperations",
    "description" : "The total number of committed operations.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedOperations",
    "description" : "The total number of failed operations.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedBatches",
    "description" : "The total number of failed batches.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "retries",
    "description" : "The total number of retries.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "errorMessages",
    "description" : "The collected error messages.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "batch",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "operations",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "constraints",
    "description" : "Constraints associated with the given label or type.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "indexes",
    "description" : "Indexes associated with the given label or type.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "oldName",
    "description" : "The property to rename.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "newName",
    "description" : "The new name to give the property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "nodes",
    "description" : "The nodes to apply the new name to. If this list is empty, all nodes with the old property name will be renamed.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=[], type=LIST<NODE>}",
    "type" : "LIST<NODE>"
  }, {
    "name" : "config",
    "description" : "{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = \"BATCH\" :: STRING\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.rename.type(oldType :: STRING, newType :: STRING, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)",
  "name" : "apoc.refactor.rename.type",
  "description" : "Renames all `RELATIONSHIP` values with type `oldType` to `newType`.\nIf a `LIST<RELATIONSHIP>` is provided, the renaming is applied to the `RELATIONSHIP` values within this `LIST<RELATIONSHIP>` only.",
  "returnDescription" : [ {
    "name" : "batches",
    "description" : "The number of batches the operation was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "total",
    "description" : "The total number of renamings performed.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "timeTaken",
    "description" : "The time taken to complete the operation.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "committedOperations",
    "description" : "The total number of committed operations.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedOperations",
    "description" : "The total number of failed operations.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedBatches",
    "description" : "The total number of failed batches.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "retries",
    "description" : "The total number of retries.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "errorMessages",
    "description" : "The collected error messages.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "batch",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "operations",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "constraints",
    "description" : "Constraints associated with the given label or type.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "indexes",
    "description" : "Indexes associated with the given label or type.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "oldType",
    "description" : "The type to rename.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "newType",
    "description" : "The new type for the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "rels",
    "description" : "The relationships to apply the new name to. If this list is empty, all relationships with the old type will be renamed.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}",
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "config",
    "description" : "{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = \"BATCH\" :: STRING\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.rename.typeProperty(oldName :: STRING, newName :: STRING, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)",
  "name" : "apoc.refactor.rename.typeProperty",
  "description" : "Renames the given property from `oldName` to `newName` for all `RELATIONSHIP` values.\nIf a `LIST<RELATIONSHIP>` is provided, the renaming is applied to the `RELATIONSHIP` values within this `LIST<RELATIONSHIP>` only.",
  "returnDescription" : [ {
    "name" : "batches",
    "description" : "The number of batches the operation was run in.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "total",
    "description" : "The total number of renamings performed.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "timeTaken",
    "description" : "The time taken to complete the operation.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "committedOperations",
    "description" : "The total number of committed operations.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedOperations",
    "description" : "The total number of failed operations.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "failedBatches",
    "description" : "The total number of failed batches.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "retries",
    "description" : "The total number of retries.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "errorMessages",
    "description" : "The collected error messages.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "batch",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "operations",
    "description" : "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "constraints",
    "description" : "Constraints associated with the given label or type.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "indexes",
    "description" : "Indexes associated with the given label or type.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "oldName",
    "description" : "The property to rename.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "newName",
    "description" : "The new name to give the property.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "rels",
    "description" : "The relationships to apply the new name to. If this list is empty, all relationships with the old properties name will be renamed.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}",
    "type" : "LIST<RELATIONSHIP>"
  }, {
    "name" : "config",
    "description" : "{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = \"BATCH\" :: STRING\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.setType(rel :: RELATIONSHIP, newType :: STRING) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)",
  "name" : "apoc.refactor.setType",
  "description" : "Changes the type of the given `RELATIONSHIP`.",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The id of the given relationship.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The id of the new relationship with the updated type.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "error",
    "description" : "The message if an error occurred.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rel",
    "description" : "The relationship to change the type of.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "newType",
    "description" : "The new type for the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.refactor.to(rel :: RELATIONSHIP, endNode :: NODE) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)",
  "name" : "apoc.refactor.to",
  "description" : "Redirects the given `RELATIONSHIP` to the given end `NODE`.",
  "returnDescription" : [ {
    "name" : "input",
    "description" : "The id of the given relationship.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "output",
    "description" : "The id of the new relationship with the updated type.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "error",
    "description" : "The message if an error occurred.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "rel",
    "description" : "The relationship to redirect.",
    "isDeprecated" : false,
    "type" : "RELATIONSHIP"
  }, {
    "name" : "endNode",
    "description" : "The new end node the relationship should point to.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.schema.assert(indexes :: MAP, constraints :: MAP, dropExisting = true :: BOOLEAN) :: (label :: ANY, key :: STRING, keys :: LIST<STRING>, unique :: BOOLEAN, action :: STRING)",
  "name" : "apoc.schema.assert",
  "description" : "Drops all other existing indexes and constraints when `dropExisting` is `true` (default is `true`).\nAsserts at the end of the operation that the given indexes and unique constraints are there.",
  "returnDescription" : [ {
    "name" : "label",
    "description" : "The label associated with the constraint or index.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "key",
    "description" : "The property key associated with the constraint or index.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "keys",
    "description" : "The property keys associated with the constraint or index.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "unique",
    "description" : "Whether or not this is a uniqueness constraint.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "action",
    "description" : "The action applied to this constraint or index; can be [\"KEPT\", \"CREATED\", \"DROPPED\"]",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "indexes",
    "description" : "A map that pairs labels with lists of properties to create indexes from.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "constraints",
    "description" : "A map that pairs labels with lists of properties to create constraints from.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "dropExisting",
    "description" : "Whether or not to drop all other existing indexes and constraints.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=true, type=BOOLEAN}",
    "type" : "BOOLEAN"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.schema.nodes(config = {} :: MAP) :: (name :: STRING, label :: ANY, properties :: LIST<STRING>, status :: STRING, type :: STRING, failure :: STRING, populationProgress :: FLOAT, size :: INTEGER, valuesSelectivity :: FLOAT, userDescription :: STRING)",
  "name" : "apoc.schema.nodes",
  "description" : "Returns all indexes and constraints information for all `NODE` labels in the database.\nIt is possible to define a set of labels to include or exclude in the config parameters.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "A generated name for the index or constraint.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "label",
    "description" : "The label associated with the constraint or index.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "properties",
    "description" : "The property keys associated with the constraint or index.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "status",
    "description" : "The status of the constraint or index.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "type",
    "description" : "The type of the index or constraint.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "failure",
    "description" : "If a failure has occurred.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "populationProgress",
    "description" : "The percentage of the constraint or index population. ",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "size",
    "description" : "The number of entries in the given constraint or index.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "valuesSelectivity",
    "description" : "A ratio between 0.0 and 1.0, representing how many unique values were seen from the sampling.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "userDescription",
    "description" : "A descriptor of the constraint or index.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "{\n    labels :: LIST<STRING>,\n    excludeLabels :: LIST<STRING>,\n    relationships :: LIST<STRING>,\n    excludeRelationships :: LIST<STRING>\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.schema.properties.distinct(label :: STRING, key :: STRING) :: (value :: LIST<ANY>)",
  "name" : "apoc.schema.properties.distinct",
  "description" : "Returns all distinct `NODE` property values for the given key.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The list of distinct values for the given property.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "label",
    "description" : "The node label to find distinct properties on.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "key",
    "description" : "The name of the property to find distinct values of.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.schema.properties.distinctCount(label =  :: STRING, key =  :: STRING) :: (label :: STRING, key :: STRING, value :: ANY, count :: INTEGER)",
  "name" : "apoc.schema.properties.distinctCount",
  "description" : "Returns all distinct property values and counts for the given key.",
  "returnDescription" : [ {
    "name" : "label",
    "description" : "The label of the node.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "key",
    "description" : "The name of the property key.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The distinct value.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "count",
    "description" : "The number of occurrences of the value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "label",
    "description" : "The node label to count distinct properties on.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "key",
    "description" : "The name of the property to count distinct values of.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.schema.relationships(config = {} :: MAP) :: (name :: STRING, type :: STRING, properties :: LIST<STRING>, status :: STRING, relationshipType :: ANY)",
  "name" : "apoc.schema.relationships",
  "description" : "Returns the indexes and constraints information for all the relationship types in the database.\nIt is possible to define a set of relationship types to include or exclude in the config parameters.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "A generated name for the index or constraint.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "type",
    "description" : "The type of the index or constraint.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "properties",
    "description" : "The property keys associated with the constraint or index.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "status",
    "description" : "The status of the constraint or index.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "relationshipType",
    "description" : "The relationship type associated with the constraint or index.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "config",
    "description" : "{\n    labels :: LIST<STRING>,\n    excludeLabels :: LIST<STRING>,\n    relationships :: LIST<STRING>,\n    excludeRelationships :: LIST<STRING>\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.search.multiSearchReduced(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)",
  "name" : "apoc.search.multiSearchReduced",
  "description" : "Returns a reduced representation of the `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.",
  "returnDescription" : [ {
    "name" : "id",
    "description" : "The id of the found node.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "labels",
    "description" : "The labels of the found node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "values",
    "description" : "The matched values of the found node.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labelPropertyMap",
    "description" : "A map that pairs labels with lists of properties. This can also be represented as a JSON string.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "operator",
    "description" : "The search operator, can be one of: [\"exact\", \"starts with\", \"ends with\", \"contains\", \"<\", \">\", \"=\", \"<>\", \"<=\", \">=\", \"=~\"].",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The search value.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.search.node(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (node :: NODE)",
  "name" : "apoc.search.node",
  "description" : "Returns all the distinct `NODE` values found after a parallel search over multiple indexes.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The found node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labelPropertyMap",
    "description" : "A map that pairs labels with lists of properties. This can also be represented as a JSON string.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "operator",
    "description" : "The search operator, can be one of: [\"exact\", \"starts with\", \"ends with\", \"contains\", \"<\", \">\", \"=\", \"<>\", \"<=\", \">=\", \"=~\"].",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The search value.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.search.nodeAll(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (node :: NODE)",
  "name" : "apoc.search.nodeAll",
  "description" : "Returns all the `NODE` values found after a parallel search over multiple indexes.",
  "returnDescription" : [ {
    "name" : "node",
    "description" : "The found node.",
    "isDeprecated" : false,
    "type" : "NODE"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labelPropertyMap",
    "description" : "A map that pairs labels with lists of properties. This can also be represented as a JSON string.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "operator",
    "description" : "The search operator, can be one of: [\"exact\", \"starts with\", \"ends with\", \"contains\", \"<\", \">\", \"=\", \"<>\", \"<=\", \">=\", \"=~\"].",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The search value.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.search.nodeAllReduced(labelPropertyMap :: ANY, operator :: STRING, value :: ANY) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)",
  "name" : "apoc.search.nodeAllReduced",
  "description" : "Returns a reduced representation of the `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.",
  "returnDescription" : [ {
    "name" : "id",
    "description" : "The id of the found node.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "labels",
    "description" : "The labels of the found node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "values",
    "description" : "The matched values of the found node.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labelPropertyMap",
    "description" : "A map that pairs labels with lists of properties. This can also be represented as a JSON string.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "operator",
    "description" : "The search operator, can be one of: [\"exact\", \"starts with\", \"ends with\", \"contains\", \"<\", \">\", \"=\", \"<>\", \"<=\", \">=\", \"=~\"].",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The search value.",
    "isDeprecated" : false,
    "type" : "ANY"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.search.nodeReduced(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)",
  "name" : "apoc.search.nodeReduced",
  "description" : "Returns a reduced representation of the distinct `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.",
  "returnDescription" : [ {
    "name" : "id",
    "description" : "The id of the found node.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "labels",
    "description" : "The labels of the found node.",
    "isDeprecated" : false,
    "type" : "LIST<STRING>"
  }, {
    "name" : "values",
    "description" : "The matched values of the found node.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "labelPropertyMap",
    "description" : "A map that pairs labels with lists of properties. This can also be represented as a JSON string.",
    "isDeprecated" : false,
    "type" : "ANY"
  }, {
    "name" : "operator",
    "description" : "The search operator, can be one of: [\"exact\", \"starts with\", \"ends with\", \"contains\", \"<\", \">\", \"=\", \"<>\", \"<=\", \">=\", \"=~\"].",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "value",
    "description" : "The search value.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.spatial.geocode(location :: STRING, maxResults = 100 :: INTEGER, quotaException = false :: BOOLEAN, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)",
  "name" : "apoc.spatial.geocode",
  "description" : "Returns the geographic location (latitude, longitude, and description) of the given address using a geocoding service (default: OpenStreetMap).",
  "returnDescription" : [ {
    "name" : "location",
    "description" : "A detailed map of information on the found location.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "data",
    "description" : "A map of returned data from the given provider.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "latitude",
    "description" : "The latitude of the found location.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "longitude",
    "description" : "The longitude of the found location.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "description",
    "description" : "A description of the found location.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "location",
    "description" : "The location to search for.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "maxResults",
    "description" : "The maximum number of returned results.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=100, type=INTEGER}",
    "type" : "INTEGER"
  }, {
    "name" : "quotaException",
    "description" : "Whether or not to throw an exception when the maximum request quota is reached.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=false, type=BOOLEAN}",
    "type" : "BOOLEAN"
  }, {
    "name" : "config",
    "description" : "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.spatial.geocodeOnce(location :: STRING, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)",
  "name" : "apoc.spatial.geocodeOnce",
  "description" : "Returns the geographic location (latitude, longitude, and description) of the given address using a geocoding service (default: OpenStreetMap).\nThis procedure returns at most one result.",
  "returnDescription" : [ {
    "name" : "location",
    "description" : "A detailed map of information on the found location.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "data",
    "description" : "A map of returned data from the given provider.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "latitude",
    "description" : "The latitude of the found location.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "longitude",
    "description" : "The longitude of the found location.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "description",
    "description" : "A description of the found location.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "location",
    "description" : "The location to search for.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "config",
    "description" : "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.spatial.reverseGeocode(latitude :: FLOAT, longitude :: FLOAT, quotaException = false :: BOOLEAN, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)",
  "name" : "apoc.spatial.reverseGeocode",
  "description" : "Returns a textual address from the given geographic location (latitude, longitude) using a geocoding service (default: OpenStreetMap).\nThis procedure returns at most one result.",
  "returnDescription" : [ {
    "name" : "location",
    "description" : "A detailed map of information on the found location.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "data",
    "description" : "A map of returned data from the given provider.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "latitude",
    "description" : "The latitude of the found location.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "longitude",
    "description" : "The longitude of the found location.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "description",
    "description" : "A description of the found location.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "latitude",
    "description" : "The latitude of the location.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "longitude",
    "description" : "The longitude of the location.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  }, {
    "name" : "quotaException",
    "description" : "Whether or not to throw an exception when the maximum request quota is reached.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=false, type=BOOLEAN}",
    "type" : "BOOLEAN"
  }, {
    "name" : "config",
    "description" : "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.spatial.sortByDistance(paths :: LIST<PATH>) :: (path :: PATH, distance :: FLOAT)",
  "name" : "apoc.spatial.sortByDistance",
  "description" : "Sorts the given collection of `PATH` values by the sum of their distance based on the latitude/longitude values in the `NODE` values.",
  "returnDescription" : [ {
    "name" : "path",
    "description" : "The sorted path result.",
    "isDeprecated" : false,
    "type" : "PATH"
  }, {
    "name" : "distance",
    "description" : "The distance between the nodes.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "paths",
    "description" : "A list of paths to be sorted by the sum of distances, calculated based on the latitude/longitude values in the nodes.",
    "isDeprecated" : false,
    "type" : "LIST<PATH>"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.stats.degrees(relTypes =  :: STRING) :: (type :: STRING, direction :: STRING, total :: INTEGER, p50 :: INTEGER, p75 :: INTEGER, p90 :: INTEGER, p95 :: INTEGER, p99 :: INTEGER, p999 :: INTEGER, max :: INTEGER, min :: INTEGER, mean :: FLOAT)",
  "name" : "apoc.stats.degrees",
  "description" : "Returns the percentile groupings of the degrees on the `NODE` values connected by the given `RELATIONSHIP` types.",
  "returnDescription" : [ {
    "name" : "type",
    "description" : "The type of the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "direction",
    "description" : "The direction of the relationship.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "total",
    "description" : "The total observed relationships.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "p50",
    "description" : "The 50th percentile grouping.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "p75",
    "description" : "The 75th percentile grouping.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "p90",
    "description" : "The 90th percentile grouping.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "p95",
    "description" : "The 95th percentile grouping.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "p99",
    "description" : "The 99th percentile grouping.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "p999",
    "description" : "The 99.9th percentile grouping.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "max",
    "description" : "The max value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "min",
    "description" : "The min value.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "mean",
    "description" : "The mean value.",
    "isDeprecated" : false,
    "type" : "FLOAT"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "relTypes",
    "description" : "The relationship types to calculate the percentile grouping over. If this is empty or omitted, all relationships are used.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.text.phoneticDelta(text1 :: STRING, text2 :: STRING) :: (phonetic1 :: STRING, phonetic2 :: STRING, delta :: INTEGER)",
  "name" : "apoc.text.phoneticDelta",
  "description" : "Returns the US_ENGLISH soundex character difference between the two given `STRING` values.",
  "returnDescription" : [ {
    "name" : "phonetic1",
    "description" : "The phonetic representation of the first string.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "phonetic2",
    "description" : "The phonetic representation of the second string.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "delta",
    "description" : "The soundex character difference between the two given strings.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "text1",
    "description" : "The first string to be compared against the second.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "text2",
    "description" : "The second string to be compared against the first.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.trigger.add(name :: STRING, statement :: STRING, selector :: MAP, config = {} :: MAP) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.add",
  "description" : "Adds a trigger to the given Cypher statement.\nThe selector for this procedure is {phase:'before/after/rollback/afterAsync'}.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : "apoc.trigger.install",
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger to add.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "statement",
    "description" : "The query to run when triggered.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "config",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.trigger.drop(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.drop",
  "description" : "Eventually removes the given trigger.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "databaseName",
    "description" : "The name of the database to drop the trigger from.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "name",
    "description" : "The name of the trigger to drop.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.trigger.dropAll(databaseName :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.dropAll",
  "description" : "Eventually removes all triggers from the given database.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "databaseName",
    "description" : "The name of the database to drop the triggers from.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.trigger.install(databaseName :: STRING, name :: STRING, statement :: STRING, selector :: MAP, config = {} :: MAP) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.install",
  "description" : "Eventually adds a trigger for a given database which is invoked when a successful transaction occurs.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "databaseName",
    "description" : "The name of the database to add the trigger to.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "name",
    "description" : "The name of the trigger to add.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "statement",
    "description" : "The query to run when triggered.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "config",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.trigger.list() :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.list",
  "description" : "Lists all currently installed triggers for the session database.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.trigger.pause(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.pause",
  "description" : "Pauses the given trigger.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : "apoc.trigger.stop",
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger to pause.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.trigger.remove(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.remove",
  "description" : "Removes the given trigger.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : "apoc.trigger.drop",
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger to drop.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.trigger.removeAll() :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.removeAll",
  "description" : "Removes all previously added triggers.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : "apoc.trigger.dropAll",
  "argumentDescription" : [ ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.trigger.resume(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.resume",
  "description" : "Resumes the given paused trigger.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : "apoc.trigger.start",
  "argumentDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger to resume.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.trigger.show(databaseName :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.show",
  "description" : "Lists all eventually installed triggers for a database.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "databaseName",
    "description" : "The name of the database to show triggers on.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.trigger.start(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.start",
  "description" : "Eventually restarts the given paused trigger.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "databaseName",
    "description" : "The name of the database the trigger is on.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "name",
    "description" : "The name of the trigger to resume.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.trigger.stop(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
  "name" : "apoc.trigger.stop",
  "description" : "Eventually stops the given trigger.",
  "returnDescription" : [ {
    "name" : "name",
    "description" : "The name of the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "query",
    "description" : "The query belonging to the trigger.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "selector",
    "description" : "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "type" : "MAP"
  }, {
    "name" : "installed",
    "description" : "Whether or not the trigger was installed.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "paused",
    "description" : "Whether or not the trigger was paused.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "databaseName",
    "description" : "The name of the database the trigger is on.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "name",
    "description" : "The name of the trigger to drop.",
    "isDeprecated" : false,
    "type" : "STRING"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.util.sleep(duration :: INTEGER)",
  "name" : "apoc.util.sleep",
  "description" : "Causes the currently running Cypher to sleep for the given duration of milliseconds (the transaction termination is honored).",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "duration",
    "description" : "The milliseconds to sleep.",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.util.validate(predicate :: BOOLEAN, message :: STRING, params :: LIST<ANY>)",
  "name" : "apoc.util.validate",
  "description" : "If the given predicate is true an exception is thrown.",
  "returnDescription" : [ ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "predicate",
    "description" : "The predicate to check against.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "message",
    "description" : "The error message to throw if the given predicate evaluates to true.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given error message.",
    "isDeprecated" : false,
    "type" : "LIST<ANY>"
  } ]
}, {
  "isDeprecated" : true,
  "signature" : "apoc.warmup.run(loadProperties = false :: BOOLEAN, loadDynamicProperties = false :: BOOLEAN, loadIndexes = false :: BOOLEAN) :: (pageSize :: INTEGER, totalTime :: INTEGER, transactionWasTerminated :: BOOLEAN, nodesPerPage :: INTEGER, nodesTotal :: INTEGER, nodePages :: INTEGER, nodesTime :: INTEGER, relsPerPage :: INTEGER, relsTotal :: INTEGER, relPages :: INTEGER, relsTime :: INTEGER, relGroupsPerPage :: INTEGER, relGroupsTotal :: INTEGER, relGroupPages :: INTEGER, relGroupsTime :: INTEGER, propertiesLoaded :: BOOLEAN, dynamicPropertiesLoaded :: BOOLEAN, propsPerPage :: INTEGER, propRecordsTotal :: INTEGER, propPages :: INTEGER, propsTime :: INTEGER, stringPropsPerPage :: INTEGER, stringPropRecordsTotal :: INTEGER, stringPropPages :: INTEGER, stringPropsTime :: INTEGER, arrayPropsPerPage :: INTEGER, arrayPropRecordsTotal :: INTEGER, arrayPropPages :: INTEGER, arrayPropsTime :: INTEGER, indexesLoaded :: BOOLEAN, indexPages :: INTEGER, indexTime :: INTEGER)",
  "name" : "apoc.warmup.run",
  "description" : "Loads all `NODE` and `RELATIONSHIP` values in the database into memory.",
  "returnDescription" : [ {
    "name" : "pageSize",
    "description" : "pageSize :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "totalTime",
    "description" : "totalTime :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "transactionWasTerminated",
    "description" : "transactionWasTerminated :: BOOLEAN",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "nodesPerPage",
    "description" : "nodesPerPage :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "nodesTotal",
    "description" : "nodesTotal :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "nodePages",
    "description" : "nodePages :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "nodesTime",
    "description" : "nodesTime :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relsPerPage",
    "description" : "relsPerPage :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relsTotal",
    "description" : "relsTotal :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relPages",
    "description" : "relPages :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relsTime",
    "description" : "relsTime :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relGroupsPerPage",
    "description" : "relGroupsPerPage :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relGroupsTotal",
    "description" : "relGroupsTotal :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relGroupPages",
    "description" : "relGroupPages :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "relGroupsTime",
    "description" : "relGroupsTime :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "propertiesLoaded",
    "description" : "propertiesLoaded :: BOOLEAN",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "dynamicPropertiesLoaded",
    "description" : "dynamicPropertiesLoaded :: BOOLEAN",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "propsPerPage",
    "description" : "propsPerPage :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "propRecordsTotal",
    "description" : "propRecordsTotal :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "propPages",
    "description" : "propPages :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "propsTime",
    "description" : "propsTime :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "stringPropsPerPage",
    "description" : "stringPropsPerPage :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "stringPropRecordsTotal",
    "description" : "stringPropRecordsTotal :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "stringPropPages",
    "description" : "stringPropPages :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "stringPropsTime",
    "description" : "stringPropsTime :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "arrayPropsPerPage",
    "description" : "arrayPropsPerPage :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "arrayPropRecordsTotal",
    "description" : "arrayPropRecordsTotal :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "arrayPropPages",
    "description" : "arrayPropPages :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "arrayPropsTime",
    "description" : "arrayPropsTime :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "indexesLoaded",
    "description" : "indexesLoaded :: BOOLEAN",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "indexPages",
    "description" : "indexPages :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  }, {
    "name" : "indexTime",
    "description" : "indexTime :: INTEGER",
    "isDeprecated" : false,
    "type" : "INTEGER"
  } ],
  "deprecatedBy" : "Firstly, the procedure duplicates functionality of page cache warm up which is a part of the DBMS. Secondly, the API of this procedure is very specific to Record storage engine.",
  "argumentDescription" : [ {
    "name" : "loadProperties",
    "description" : "loadProperties = false :: BOOLEAN",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=false, type=BOOLEAN}",
    "type" : "BOOLEAN"
  }, {
    "name" : "loadDynamicProperties",
    "description" : "loadDynamicProperties = false :: BOOLEAN",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=false, type=BOOLEAN}",
    "type" : "BOOLEAN"
  }, {
    "name" : "loadIndexes",
    "description" : "loadIndexes = false :: BOOLEAN",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=false, type=BOOLEAN}",
    "type" : "BOOLEAN"
  } ]
}, {
  "isDeprecated" : false,
  "signature" : "apoc.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
  "name" : "apoc.when",
  "description" : "This procedure will run the read-only `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.",
  "returnDescription" : [ {
    "name" : "value",
    "description" : "The result returned from the evaluated Cypher query.",
    "isDeprecated" : false,
    "type" : "MAP"
  } ],
  "deprecatedBy" : null,
  "argumentDescription" : [ {
    "name" : "condition",
    "description" : "The predicate deciding if to run the `ifQuery`or not.",
    "isDeprecated" : false,
    "type" : "BOOLEAN"
  }, {
    "name" : "ifQuery",
    "description" : "The Cypher statement to run if the condition is true.",
    "isDeprecated" : false,
    "type" : "STRING"
  }, {
    "name" : "elseQuery",
    "description" : "The Cypher statement to run if the condition is false.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value=, type=STRING}",
    "type" : "STRING"
  }, {
    "name" : "params",
    "description" : "The parameters for the given Cypher statement.",
    "isDeprecated" : false,
    "default" : "DefaultParameterValue{value={}, type=MAP}",
    "type" : "MAP"
  } ]
} ]