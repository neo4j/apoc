[
  {
    "isDeprecated": true,
    "signature": "apoc.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.case",
    "description": "For each pair of conditional and read-only queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true. If none of the conditionals are true, the `ELSE` query will run instead.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the evaluated Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": "Cypher's conditional queries; WHEN ... THEN.",
    "argumentDescription": [
      {
        "name": "conditionals",
        "description": "A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "elseQuery",
        "description": "A Cypher query to evaluate if all conditionals evaluate to false.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "A map of parameters to be used in the executed Cypher query.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.cypher.runTimeboxed(statement :: STRING, params :: MAP, timeout :: INTEGER, config = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.cypher.runTimeboxed",
    "description": "Terminates a Cypher statement if it has not finished before the set timeout (ms).",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "statement",
        "description": "The Cypher statement to run.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "timeout",
        "description": "The maximum time, in milliseconds, the statement can run for.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "config",
        "description": "{ failOnError = false :: BOOLEAN, appendStatusRow = false :: BOOLEAN }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.do.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.do.case",
    "description": "For each pair of conditional queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true.\nIf none of the conditionals are true, the `ELSE` query will run instead.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the evaluated Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": "Cypher's conditional queries; WHEN ... THEN.",
    "argumentDescription": [
      {
        "name": "conditionals",
        "description": "A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "elseQuery",
        "description": "A Cypher query to evaluate if all conditionals evaluate to false.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "A map of parameters to be used in the executed Cypher query.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.do.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery :: STRING, params = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.do.when",
    "description": "Runs the given read/write `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the evaluated Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": "Cypher's conditional queries; WHEN ... THEN.",
    "argumentDescription": [
      {
        "name": "condition",
        "description": "The predicate that determines whether to execute the `ifQuery`.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "ifQuery",
        "description": "The Cypher statement to run if the condition is true.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "elseQuery",
        "description": "The Cypher statement to run if the condition is false.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.refactor.deleteAndReconnect(path :: PATH, nodes :: LIST<NODE>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
    "name": "apoc.refactor.deleteAndReconnect",
    "description": "Removes the given `NODE` values from the `PATH` (and graph, including all of its relationships) and reconnects the remaining `NODE` values.\nNote, undefined behaviour for paths that visits the same node multiple times.\nNote, nodes that are not connected in the same direction as the path will not be reconnected, for example `MATCH p=(:A)-->(b:B)<--(:C) CALL apoc.refactor.deleteAndReconnect(p, [b]) ...` will not reconnect the :A and :C nodes.",
    "returnDescription": [
      {
        "name": "nodes",
        "description": "The remaining nodes.",
        "isDeprecated": false,
        "type": "LIST<NODE>"
      },
      {
        "name": "relationships",
        "description": "The new connecting relationships.",
        "isDeprecated": false,
        "type": "LIST<RELATIONSHIP>"
      }
    ],
    "deprecatedBy": "Deprecated for removal without a direct replacement, use plain Cypher or create a custom procedure.",
    "argumentDescription": [
      {
        "name": "path",
        "description": "The path containing the nodes to delete and the remaining nodes to reconnect.",
        "isDeprecated": false,
        "type": "PATH"
      },
      {
        "name": "nodes",
        "description": "The nodes to delete.",
        "isDeprecated": false,
        "type": "LIST<NODE>"
      },
      {
        "name": "config",
        "description": "{\n    relationshipSelectionStrategy = \"incoming\" :: [\"incoming\", \"outgoing\", \"merge\"]\n    properties :: [\"overwrite\", \"discard\", \"combine\"]\n}\n",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.when",
    "description": "This procedure will run the read-only `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the evaluated Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": "Cypher's conditional queries; WHEN ... THEN.",
    "argumentDescription": [
      {
        "name": "condition",
        "description": "The predicate deciding if to run the `ifQuery`or not.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "ifQuery",
        "description": "The Cypher statement to run if the condition is true.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "elseQuery",
        "description": "The Cypher statement to run if the condition is false.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  }
]