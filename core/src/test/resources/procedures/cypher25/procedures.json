[
  {
    "isDeprecated": false,
    "signature": "apoc.cypher.runTimeboxed(statement :: STRING, params :: MAP, timeout :: INTEGER, config = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.cypher.runTimeboxed",
    "description": "Terminates a Cypher statement if it has not finished before the set timeout (ms).",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "statement",
        "description": "The Cypher statement to run.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "timeout",
        "description": "The maximum time, in milliseconds, the statement can run for.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "config",
        "description": "{ failOnError = false :: BOOLEAN, appendStatusRow = false :: BOOLEAN }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.refactor.deleteAndReconnect(path :: PATH, nodes :: LIST<NODE>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
    "name": "apoc.refactor.deleteAndReconnect",
    "description": "Removes the given `NODE` values from the `PATH` (and graph, including all of its relationships) and reconnects the remaining `NODE` values.\nNote, undefined behaviour for paths that visits the same node multiple times.\nNote, nodes that are not connected in the same direction as the path will not be reconnected, for example `MATCH p=(:A)-->(b:B)<--(:C) CALL apoc.refactor.deleteAndReconnect(p, [b]) ...` will not reconnect the :A and :C nodes.",
    "returnDescription": [
      {
        "name": "nodes",
        "description": "The remaining nodes.",
        "isDeprecated": false,
        "type": "LIST<NODE>"
      },
      {
        "name": "relationships",
        "description": "The new connecting relationships.",
        "isDeprecated": false,
        "type": "LIST<RELATIONSHIP>"
      }
    ],
    "deprecatedBy": "Deprecated for removal without a direct replacement, use plain Cypher or create a custom procedure.",
    "argumentDescription": [
      {
        "name": "path",
        "description": "The path containing the nodes to delete and the remaining nodes to reconnect.",
        "isDeprecated": false,
        "type": "PATH"
      },
      {
        "name": "nodes",
        "description": "The nodes to delete.",
        "isDeprecated": false,
        "type": "LIST<NODE>"
      },
      {
        "name": "config",
        "description": "{\n    relationshipSelectionStrategy = \"incoming\" :: [\"incoming\", \"outgoing\", \"merge\"]\n    properties :: [\"overwrite\", \"discard\", \"combine\"]\n}\n",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  }
]