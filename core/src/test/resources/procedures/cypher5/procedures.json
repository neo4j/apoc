[
  {
    "isDeprecated": false,
    "signature": "apoc.algo.cover(nodes :: ANY) :: (rel :: RELATIONSHIP)",
    "name": "apoc.algo.cover",
    "description": "Returns all `RELATIONSHIP` values connecting the given set of `NODE` values.",
    "returnDescription": [
      {
        "name": "rel",
        "description": "The relationships connected to the given nodes.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "The nodes to look for connected relationships on.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.case",
    "description": "For each pair of conditional and read-only queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true. If none of the conditionals are true, the `ELSE` query will run instead.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the evaluated Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "conditionals",
        "description": "A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "elseQuery",
        "description": "A Cypher query to evaluate if all conditionals evaluate to false.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "A map of parameters to be used in the executed Cypher query.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.coll.pairWithOffset(coll :: LIST<ANY>, offset :: INTEGER) :: (value :: LIST<ANY>)",
    "name": "apoc.coll.pairWithOffset",
    "description": "Returns a `LIST<ANY>` of pairs defined by the offset.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The created pair.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to create pairs from.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "offset",
        "description": "The offset to make each pair with from the given list.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.coll.partition(coll :: LIST<ANY>, batchSize :: INTEGER) :: (value :: LIST<ANY>)",
    "name": "apoc.coll.partition",
    "description": "Partitions the original `LIST<ANY>` into a new `LIST<ANY>` of the given batch size.\nThe final `LIST<ANY>` may be smaller than the given batch size.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The partitioned list.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "coll",
        "description": "The list to partition into smaller sublists.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "batchSize",
        "description": "The max size of each partitioned sublist.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.coll.zipToRows(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: (value :: LIST<ANY>)",
    "name": "apoc.coll.zipToRows",
    "description": "Returns the two `LIST<ANY>` values zipped together, with one row per zipped pair.",
    "returnDescription": [
      {
        "name": "value",
        "description": "A zipped pair.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "list1",
        "description": "The list to zip together with `list2`.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "list2",
        "description": "The list to zip together with `list1`.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.convert.toTree(paths :: LIST<PATH>, lowerCaseRels = true :: BOOLEAN, config = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.convert.toTree",
    "description": "Returns a stream of `MAP` values, representing the given `PATH` values as a tree with at least one root.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The resulting tree.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": "apoc.paths.toJsonTree",
    "argumentDescription": [
      {
        "name": "paths",
        "description": "A list of paths to convert into a tree.",
        "isDeprecated": false,
        "type": "LIST<PATH>"
      },
      {
        "name": "lowerCaseRels",
        "description": "Whether or not to convert relationship types to lower case.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=true, type=BOOLEAN}",
        "type": "BOOLEAN"
      },
      {
        "name": "config",
        "description": "{ nodes = {} :: MAP, rels = {} :: MAP, sortPaths = true :: BOOLEAN }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.addLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)",
    "name": "apoc.create.addLabels",
    "description": "Adds the given labels to the given `NODE` values.",
    "returnDescription": [
      {
        "name": "node",
        "description": "The updated node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "The nodes to add labels to.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "labels",
        "description": "The labels to add to the nodes.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.node(labels :: LIST<STRING>, props :: MAP) :: (node :: NODE)",
    "name": "apoc.create.node",
    "description": "Creates a `NODE` with the given dynamic labels.",
    "returnDescription": [
      {
        "name": "node",
        "description": "The created node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "labels",
        "description": "The labels to assign to the new node.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "props",
        "description": "The properties to assign to the new node.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.nodes(labels :: LIST<STRING>, props :: LIST<MAP>) :: (node :: NODE)",
    "name": "apoc.create.nodes",
    "description": "Creates `NODE` values with the given dynamic labels.",
    "returnDescription": [
      {
        "name": "node",
        "description": "The created node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "labels",
        "description": "The labels to assign to the new nodes.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "props",
        "description": "The properties to assign to the new nodes.",
        "isDeprecated": false,
        "type": "LIST<MAP>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.relationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: (rel :: RELATIONSHIP)",
    "name": "apoc.create.relationship",
    "description": "Creates a `RELATIONSHIP` with the given dynamic relationship type.",
    "returnDescription": [
      {
        "name": "rel",
        "description": "The created relationship.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "from",
        "description": "The node from which the outgoing relationship will start.",
        "isDeprecated": false,
        "type": "NODE"
      },
      {
        "name": "relType",
        "description": "The type to assign to the new relationship.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "props",
        "description": "The properties to assign to the new relationship.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "to",
        "description": "The node to which the incoming relationship will be connected.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.removeLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)",
    "name": "apoc.create.removeLabels",
    "description": "Removes the given labels from the given `NODE` values.",
    "returnDescription": [
      {
        "name": "node",
        "description": "The updated node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "The node to remove labels from.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "labels",
        "description": "The labels to remove from the given node.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.removeProperties(nodes :: ANY, keys :: LIST<STRING>) :: (node :: NODE)",
    "name": "apoc.create.removeProperties",
    "description": "Removes the given properties from the given `NODE` values.",
    "returnDescription": [
      {
        "name": "node",
        "description": "The updated node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "The nodes to remove properties from.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "keys",
        "description": "The property keys to remove from the given nodes.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.removeRelProperties(rels :: ANY, keys :: LIST<STRING>) :: (rel :: RELATIONSHIP)",
    "name": "apoc.create.removeRelProperties",
    "description": "Removes the given properties from the given `RELATIONSHIP` values.",
    "returnDescription": [
      {
        "name": "rel",
        "description": "The updated relationship.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "rels",
        "description": "The relationships to remove properties from.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "keys",
        "description": "The property keys to remove from the given nodes.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.setLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)",
    "name": "apoc.create.setLabels",
    "description": "Sets the given labels to the given `NODE` values. Non-matching labels are removed from the nodes.",
    "returnDescription": [
      {
        "name": "node",
        "description": "The updated node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "The nodes to set labels on.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "labels",
        "description": "The labels to set on the given nodes.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.setProperties(nodes :: ANY, keys :: LIST<STRING>, values :: LIST<ANY>) :: (node :: NODE)",
    "name": "apoc.create.setProperties",
    "description": "Sets the given properties to the given `NODE` values.",
    "returnDescription": [
      {
        "name": "node",
        "description": "The updated node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "The nodes to set properties on.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "keys",
        "description": "The property keys to set on the given nodes.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "values",
        "description": "The values to assign to the properties on the given nodes.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.setProperty(nodes :: ANY, key :: STRING, value :: ANY) :: (node :: NODE)",
    "name": "apoc.create.setProperty",
    "description": "Sets the given property to the given `NODE` values.",
    "returnDescription": [
      {
        "name": "node",
        "description": "The updated node.",
        "isDeprecated": false,
        "type": "NODE"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "The nodes to set a property on.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "key",
        "description": "The name of the property key to set.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "value",
        "description": "The value of the property to set.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.setRelProperties(rels :: ANY, keys :: LIST<STRING>, values :: LIST<ANY>) :: (rel :: RELATIONSHIP)",
    "name": "apoc.create.setRelProperties",
    "description": "Sets the given properties on the `RELATIONSHIP` values.",
    "returnDescription": [
      {
        "name": "rel",
        "description": "The updated relationship.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "rels",
        "description": "The relationships to set properties on.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "keys",
        "description": "The keys of the properties to set on the given relationships.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "values",
        "description": "The values of the properties to set on the given relationships.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.create.setRelProperty(rels :: ANY, key :: STRING, value :: ANY) :: (rel :: RELATIONSHIP)",
    "name": "apoc.create.setRelProperty",
    "description": "Sets the given property on the `RELATIONSHIP` values.",
    "returnDescription": [
      {
        "name": "rel",
        "description": "The updated relationship.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "rels",
        "description": "The relationships to set a property on.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "key",
        "description": "The name of the property key to set.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "value",
        "description": "The value of the property to set.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.create.uuids(count :: INTEGER) :: (row :: INTEGER, uuid :: STRING)",
    "name": "apoc.create.uuids",
    "description": "Returns a stream of UUIDs.",
    "returnDescription": [
      {
        "name": "row",
        "description": "The row number of the generated UUID.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "uuid",
        "description": "The generated UUID value.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ],
    "deprecatedBy": "Neo4j's randomUUID() function can be used as a replacement, for example: `UNWIND range(0,$count) AS row RETURN row, randomUUID() AS uuid`",
    "argumentDescription": [
      {
        "name": "count",
        "description": "The number of UUID values to generate.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.cypher.runTimeboxed(statement :: STRING, params :: MAP, timeout :: INTEGER) :: (value :: MAP)",
    "name": "apoc.cypher.runTimeboxed",
    "description": "Terminates a Cypher statement if it has not finished before the set timeout (ms).",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "statement",
        "description": "The Cypher statement to run.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "timeout",
        "description": "The maximum time, in milliseconds, the statement can run for.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.do.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.do.case",
    "description": "For each pair of conditional queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true.\nIf none of the conditionals are true, the `ELSE` query will run instead.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the evaluated Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "conditionals",
        "description": "A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.",
        "isDeprecated": false,
        "type": "LIST<ANY>"
      },
      {
        "name": "elseQuery",
        "description": "A Cypher query to evaluate if all conditionals evaluate to false.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "A map of parameters to be used in the executed Cypher query.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.do.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery :: STRING, params = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.do.when",
    "description": "Runs the given read/write `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the evaluated Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "condition",
        "description": "The predicate that determines whether to execute the `ifQuery`.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "ifQuery",
        "description": "The Cypher statement to run if the condition is true.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "elseQuery",
        "description": "The Cypher statement to run if the condition is false.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.export.arrow.all(file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
    "name": "apoc.export.arrow.all",
    "description": "Exports the full database as an arrow file.",
    "returnDescription": [
      {
        "name": "file",
        "description": "The name of the file to which the data was exported.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "source",
        "description": "A summary of the exported data.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "format",
        "description": "The format the file is exported in.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "nodes",
        "description": "The number of exported nodes.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relationships",
        "description": "The number of exported relationships.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "properties",
        "description": "The number of exported properties.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "time",
        "description": "The duration of the export.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "rows",
        "description": "The number of rows returned.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "batchSize",
        "description": "The size of the batches the export was run in.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "batches",
        "description": "The number of batches the export was run in.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "done",
        "description": "Whether the export ran successfully.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "data",
        "description": "The data returned by the export.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "file",
        "description": "The name of the file to export the data to.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "{ batchSize = 2000 :: INTEGER }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.export.arrow.graph(file :: STRING, graph :: ANY, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
    "name": "apoc.export.arrow.graph",
    "description": "Exports the given graph as an arrow file.",
    "returnDescription": [
      {
        "name": "file",
        "description": "The name of the file to which the data was exported.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "source",
        "description": "A summary of the exported data.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "format",
        "description": "The format the file is exported in.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "nodes",
        "description": "The number of exported nodes.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relationships",
        "description": "The number of exported relationships.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "properties",
        "description": "The number of exported properties.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "time",
        "description": "The duration of the export.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "rows",
        "description": "The number of rows returned.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "batchSize",
        "description": "The size of the batches the export was run in.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "batches",
        "description": "The number of batches the export was run in.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "done",
        "description": "Whether the export ran successfully.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "data",
        "description": "The data returned by the export.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "file",
        "description": "The name of the file to export the data to.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "graph",
        "description": "The graph to export.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "config",
        "description": "{ batchSize = 2000 :: INTEGER }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.export.arrow.query(file :: STRING, query :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)",
    "name": "apoc.export.arrow.query",
    "description": "Exports the results from the given Cypher query as an arrow file.",
    "returnDescription": [
      {
        "name": "file",
        "description": "The name of the file to which the data was exported.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "source",
        "description": "A summary of the exported data.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "format",
        "description": "The format the file is exported in.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "nodes",
        "description": "The number of exported nodes.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relationships",
        "description": "The number of exported relationships.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "properties",
        "description": "The number of exported properties.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "time",
        "description": "The duration of the export.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "rows",
        "description": "The number of rows returned.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "batchSize",
        "description": "The size of the batches the export was run in.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "batches",
        "description": "The number of batches the export was run in.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "done",
        "description": "Whether the export ran successfully.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "data",
        "description": "The data returned by the export.",
        "isDeprecated": false,
        "type": "ANY"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "file",
        "description": "The name of the file to which the data will be exported.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "query",
        "description": "The query to use to collect the data for export.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "{ batchSize = 2000 :: INTEGER }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.export.arrow.stream.all(config = {} :: MAP) :: (value :: BYTEARRAY)",
    "name": "apoc.export.arrow.stream.all",
    "description": "Exports the full database as an arrow byte array.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The data as a bytearray.",
        "isDeprecated": false,
        "type": "BYTEARRAY"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "config",
        "description": "{ batchSize = 2000 :: INTEGER }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.export.arrow.stream.graph(graph :: ANY, config = {} :: MAP) :: (value :: BYTEARRAY)",
    "name": "apoc.export.arrow.stream.graph",
    "description": "Exports the given graph as an arrow byte array.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The data as a bytearray.",
        "isDeprecated": false,
        "type": "BYTEARRAY"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "graph",
        "description": "The graph to export.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "config",
        "description": "{ batchSize = 2000 :: INTEGER }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.export.arrow.stream.query(query :: STRING, config = {} :: MAP) :: (value :: BYTEARRAY)",
    "name": "apoc.export.arrow.stream.query",
    "description": "Exports the given Cypher query as an arrow byte array.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The data as a bytearray.",
        "isDeprecated": false,
        "type": "BYTEARRAY"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "query",
        "description": "The query used to collect the data for export.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "{ batchSize = 2000 :: INTEGER }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.load.arrow(file :: STRING, config = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.load.arrow",
    "description": "Imports `NODE` and `RELATIONSHIP` values from the provided arrow file.",
    "returnDescription": [
      {
        "name": "value",
        "description": "A map of data loaded from the given file.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "file",
        "description": "The name of the file to import data from.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "This value is never used.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.load.arrow.stream(source :: BYTEARRAY, config = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.load.arrow.stream",
    "description": "Imports `NODE` and `RELATIONSHIP` values from the provided arrow byte array.",
    "returnDescription": [
      {
        "name": "value",
        "description": "A map of data loaded from the given file.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "source",
        "description": "The data to load.",
        "isDeprecated": false,
        "type": "BYTEARRAY"
      },
      {
        "name": "config",
        "description": "This value is never used.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.load.jsonParams(urlOrKeyOrBinary :: ANY, headers :: MAP, payload :: STRING, path =  :: STRING, config = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.load.jsonParams",
    "description": "Loads a JSON document from a URL (e.g. web-API) as a stream of values if the given JSON document is a `LIST<ANY>`.\nIf the given JSON file is a `MAP`, this procedure imports a single value instead.",
    "returnDescription": [
      {
        "name": "value",
        "description": "A map of data loaded from the given file.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "urlOrKeyOrBinary",
        "description": "The name of the file or binary data to import the data from. Note that a URL needs to be properly encoded to conform with the URI standard.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "headers",
        "description": "Headers to be used when connecting to the given URL.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "payload",
        "description": "The payload to send when connecting to the given URL.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "path",
        "description": "A JSON path expression used to extract specific subparts of the JSON document (extracted by a link:https://en.wikipedia.org/wiki/JSONPath[JSONPath] expression). The default is: ``.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = \"\"NONE\"\" :: [\"\"NONE\"\", \"\"BYTES\"\", \"\"GZIP\"\", \"\"BZIP2\"\", \"\"DEFLATE\"\", \"\"BLOCK_LZ4\"\", \"\"FRAMED_SNAPPY”]\n}\n",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.log.stream(path :: STRING, config = {} :: MAP) :: (lineNo :: INTEGER, line :: STRING, path :: STRING)",
    "name": "apoc.log.stream",
    "description": "Returns the file contents from the given log, optionally returning only the last n lines.\nThis procedure requires users to have an admin role.",
    "returnDescription": [
      {
        "name": "lineNo",
        "description": "The line number.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "line",
        "description": "The content of the line.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "path",
        "description": "The path to the log file.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ],
    "deprecatedBy": "This procedure is being moved to APOC Extended.",
    "argumentDescription": [
      {
        "name": "path",
        "description": "The name of the log file to read.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "config",
        "description": "{ last :: INTEGER }",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.nodes.delete(nodes :: ANY, batchSize :: INTEGER) :: (value :: INTEGER)",
    "name": "apoc.nodes.delete",
    "description": "Deletes all `NODE` values with the given ids.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The number of deleted nodes.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "nodes",
        "description": "The nodes to be deleted. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.",
        "isDeprecated": false,
        "type": "ANY"
      },
      {
        "name": "batchSize",
        "description": "The number of node values to delete in a single batch.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.refactor.categorize(sourceKey :: STRING, type :: STRING, outgoing :: BOOLEAN, label :: STRING, targetKey :: STRING, copiedKeys :: LIST<STRING>, batchSize :: INTEGER)",
    "name": "apoc.refactor.categorize",
    "description": "Creates new category `NODE` values from `NODE` values in the graph with the specified `sourceKey` as one of its property keys.\nThe new category `NODE` values are then connected to the original `NODE` values with a `RELATIONSHIP` of the given type.",
    "returnDescription": [],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "sourceKey",
        "description": "The property key to add to the on the new node.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "type",
        "description": "The relationship type to connect to the new node.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "outgoing",
        "description": "Whether the relationship should be outgoing or not.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "label",
        "description": "The label of the new node.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "targetKey",
        "description": "The name by which the source key value will be referenced on the new node.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "copiedKeys",
        "description": "A list of additional property keys to be copied to the new node.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "batchSize",
        "description": "The max size of each batch.",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.refactor.deleteAndReconnect(path :: PATH, nodes :: LIST<NODE>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)",
    "name": "apoc.refactor.deleteAndReconnect",
    "description": "Removes the given `NODE` values from the `PATH` (and graph, including all of its relationships) and reconnects the remaining `NODE` values.\nNote, undefined behaviour for paths that visits the same node multiple times.\nNote, nodes that are not connected in the same direction as the path will not be reconnected, for example `MATCH p=(:A)-->(b:B)<--(:C) CALL apoc.refactor.deleteAndReconnect(p, [b]) ...` will not reconnect the :A and :C nodes.",
    "returnDescription": [
      {
        "name": "nodes",
        "description": "The remaining nodes.",
        "isDeprecated": false,
        "type": "LIST<NODE>"
      },
      {
        "name": "relationships",
        "description": "The new connecting relationships.",
        "isDeprecated": false,
        "type": "LIST<RELATIONSHIP>"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "path",
        "description": "The path containing the nodes to delete and the remaining nodes to reconnect.",
        "isDeprecated": false,
        "type": "PATH"
      },
      {
        "name": "nodes",
        "description": "The nodes to delete.",
        "isDeprecated": false,
        "type": "LIST<NODE>"
      },
      {
        "name": "config",
        "description": "{\n    relationshipSelectionStrategy = \"incoming\" :: [\"incoming\", \"outgoing\", \"merge\"]\n    properties :: [\"overwrite\", \"discard\", \"combine\"]\n}\n",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.refactor.rename.label(oldLabel :: STRING, newLabel :: STRING, nodes = [] :: LIST<NODE>) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)",
    "name": "apoc.refactor.rename.label",
    "description": "Renames the given label from `oldLabel` to `newLabel` for all `NODE` values.\nIf a `LIST<NODE>` is provided, the renaming is applied to the `NODE` values within this `LIST<NODE>` only.",
    "returnDescription": [
      {
        "name": "batches",
        "description": "The number of batches the operation was run in.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "total",
        "description": "The total number of renamings performed.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "timeTaken",
        "description": "The time taken to complete the operation.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "committedOperations",
        "description": "The total number of committed operations.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "failedOperations",
        "description": "The total number of failed operations.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "failedBatches",
        "description": "The total number of failed batches.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "retries",
        "description": "The total number of retries.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "errorMessages",
        "description": "The collected error messages.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "batch",
        "description": "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "operations",
        "description": "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "constraints",
        "description": "Constraints associated with the given label or type.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "indexes",
        "description": "Indexes associated with the given label or type.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "oldLabel",
        "description": "The label to rename.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "newLabel",
        "description": "The new name to give the label.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "nodes",
        "description": "The nodes to apply the new name to. If this list is empty, all nodes with the old label will be renamed.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<NODE>}",
        "type": "LIST<NODE>"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.refactor.rename.type(oldType :: STRING, newType :: STRING, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)",
    "name": "apoc.refactor.rename.type",
    "description": "Renames all `RELATIONSHIP` values with type `oldType` to `newType`.\nIf a `LIST<RELATIONSHIP>` is provided, the renaming is applied to the `RELATIONSHIP` values within this `LIST<RELATIONSHIP>` only.",
    "returnDescription": [
      {
        "name": "batches",
        "description": "The number of batches the operation was run in.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "total",
        "description": "The total number of renamings performed.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "timeTaken",
        "description": "The time taken to complete the operation.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "committedOperations",
        "description": "The total number of committed operations.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "failedOperations",
        "description": "The total number of failed operations.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "failedBatches",
        "description": "The total number of failed batches.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "retries",
        "description": "The total number of retries.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "errorMessages",
        "description": "The collected error messages.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "batch",
        "description": "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "operations",
        "description": "{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "constraints",
        "description": "Constraints associated with the given label or type.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      },
      {
        "name": "indexes",
        "description": "Indexes associated with the given label or type.",
        "isDeprecated": false,
        "type": "LIST<STRING>"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "oldType",
        "description": "The type to rename.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "newType",
        "description": "The new type for the relationship.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "rels",
        "description": "The relationships to apply the new name to. If this list is empty, all relationships with the old type will be renamed.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}",
        "type": "LIST<RELATIONSHIP>"
      },
      {
        "name": "config",
        "description": "{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = \"BATCH\" :: STRING\n}\n",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.refactor.setType(rel :: RELATIONSHIP, newType :: STRING) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)",
    "name": "apoc.refactor.setType",
    "description": "Changes the type of the given `RELATIONSHIP`.",
    "returnDescription": [
      {
        "name": "input",
        "description": "The id of the given relationship.",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "output",
        "description": "The id of the new relationship with the updated type.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      },
      {
        "name": "error",
        "description": "The message if an error occurred.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "rel",
        "description": "The relationship to change the type of.",
        "isDeprecated": false,
        "type": "RELATIONSHIP"
      },
      {
        "name": "newType",
        "description": "The new type for the relationship.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.trigger.add(name :: STRING, statement :: STRING, selector :: MAP, config = {} :: MAP) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
    "name": "apoc.trigger.add",
    "description": "Adds a trigger to the given Cypher statement.\nThe selector for this procedure is {phase:'before/after/rollback/afterAsync'}.",
    "returnDescription": [
      {
        "name": "name",
        "description": "The name of the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "query",
        "description": "The query belonging to the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "selector",
        "description": "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "installed",
        "description": "Whether or not the trigger was installed.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "paused",
        "description": "Whether or not the trigger was paused.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      }
    ],
    "deprecatedBy": "apoc.trigger.install",
    "argumentDescription": [
      {
        "name": "name",
        "description": "The name of the trigger to add.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "statement",
        "description": "The query to run when triggered.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "selector",
        "description": "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "config",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.trigger.pause(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
    "name": "apoc.trigger.pause",
    "description": "Pauses the given trigger.",
    "returnDescription": [
      {
        "name": "name",
        "description": "The name of the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "query",
        "description": "The query belonging to the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "selector",
        "description": "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "installed",
        "description": "Whether or not the trigger was installed.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "paused",
        "description": "Whether or not the trigger was paused.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      }
    ],
    "deprecatedBy": "apoc.trigger.stop",
    "argumentDescription": [
      {
        "name": "name",
        "description": "The name of the trigger to pause.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.trigger.remove(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
    "name": "apoc.trigger.remove",
    "description": "Removes the given trigger.",
    "returnDescription": [
      {
        "name": "name",
        "description": "The name of the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "query",
        "description": "The query belonging to the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "selector",
        "description": "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "installed",
        "description": "Whether or not the trigger was installed.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "paused",
        "description": "Whether or not the trigger was paused.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      }
    ],
    "deprecatedBy": "apoc.trigger.drop",
    "argumentDescription": [
      {
        "name": "name",
        "description": "The name of the trigger to drop.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.trigger.removeAll() :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
    "name": "apoc.trigger.removeAll",
    "description": "Removes all previously added triggers.",
    "returnDescription": [
      {
        "name": "name",
        "description": "The name of the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "query",
        "description": "The query belonging to the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "selector",
        "description": "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "installed",
        "description": "Whether or not the trigger was installed.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "paused",
        "description": "Whether or not the trigger was paused.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      }
    ],
    "deprecatedBy": "apoc.trigger.dropAll",
    "argumentDescription": []
  },
  {
    "isDeprecated": true,
    "signature": "apoc.trigger.resume(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)",
    "name": "apoc.trigger.resume",
    "description": "Resumes the given paused trigger.",
    "returnDescription": [
      {
        "name": "name",
        "description": "The name of the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "query",
        "description": "The query belonging to the trigger.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "selector",
        "description": "{ phase = \"before\" :: [\"before\", \"rollback\", \"after\", \"afterAsync\"] }",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "type": "MAP"
      },
      {
        "name": "installed",
        "description": "Whether or not the trigger was installed.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "paused",
        "description": "Whether or not the trigger was paused.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      }
    ],
    "deprecatedBy": "apoc.trigger.start",
    "argumentDescription": [
      {
        "name": "name",
        "description": "The name of the trigger to resume.",
        "isDeprecated": false,
        "type": "STRING"
      }
    ]
  },
  {
    "isDeprecated": true,
    "signature": "apoc.warmup.run(loadProperties = false :: BOOLEAN, loadDynamicProperties = false :: BOOLEAN, loadIndexes = false :: BOOLEAN) :: (pageSize :: INTEGER, totalTime :: INTEGER, transactionWasTerminated :: BOOLEAN, nodesPerPage :: INTEGER, nodesTotal :: INTEGER, nodePages :: INTEGER, nodesTime :: INTEGER, relsPerPage :: INTEGER, relsTotal :: INTEGER, relPages :: INTEGER, relsTime :: INTEGER, relGroupsPerPage :: INTEGER, relGroupsTotal :: INTEGER, relGroupPages :: INTEGER, relGroupsTime :: INTEGER, propertiesLoaded :: BOOLEAN, dynamicPropertiesLoaded :: BOOLEAN, propsPerPage :: INTEGER, propRecordsTotal :: INTEGER, propPages :: INTEGER, propsTime :: INTEGER, stringPropsPerPage :: INTEGER, stringPropRecordsTotal :: INTEGER, stringPropPages :: INTEGER, stringPropsTime :: INTEGER, arrayPropsPerPage :: INTEGER, arrayPropRecordsTotal :: INTEGER, arrayPropPages :: INTEGER, arrayPropsTime :: INTEGER, indexesLoaded :: BOOLEAN, indexPages :: INTEGER, indexTime :: INTEGER)",
    "name": "apoc.warmup.run",
    "description": "Loads all `NODE` and `RELATIONSHIP` values in the database into memory.",
    "returnDescription": [
      {
        "name": "pageSize",
        "description": "pageSize :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "totalTime",
        "description": "totalTime :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "transactionWasTerminated",
        "description": "transactionWasTerminated :: BOOLEAN",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "nodesPerPage",
        "description": "nodesPerPage :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "nodesTotal",
        "description": "nodesTotal :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "nodePages",
        "description": "nodePages :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "nodesTime",
        "description": "nodesTime :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relsPerPage",
        "description": "relsPerPage :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relsTotal",
        "description": "relsTotal :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relPages",
        "description": "relPages :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relsTime",
        "description": "relsTime :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relGroupsPerPage",
        "description": "relGroupsPerPage :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relGroupsTotal",
        "description": "relGroupsTotal :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relGroupPages",
        "description": "relGroupPages :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "relGroupsTime",
        "description": "relGroupsTime :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "propertiesLoaded",
        "description": "propertiesLoaded :: BOOLEAN",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "dynamicPropertiesLoaded",
        "description": "dynamicPropertiesLoaded :: BOOLEAN",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "propsPerPage",
        "description": "propsPerPage :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "propRecordsTotal",
        "description": "propRecordsTotal :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "propPages",
        "description": "propPages :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "propsTime",
        "description": "propsTime :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "stringPropsPerPage",
        "description": "stringPropsPerPage :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "stringPropRecordsTotal",
        "description": "stringPropRecordsTotal :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "stringPropPages",
        "description": "stringPropPages :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "stringPropsTime",
        "description": "stringPropsTime :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "arrayPropsPerPage",
        "description": "arrayPropsPerPage :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "arrayPropRecordsTotal",
        "description": "arrayPropRecordsTotal :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "arrayPropPages",
        "description": "arrayPropPages :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "arrayPropsTime",
        "description": "arrayPropsTime :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "indexesLoaded",
        "description": "indexesLoaded :: BOOLEAN",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "indexPages",
        "description": "indexPages :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      },
      {
        "name": "indexTime",
        "description": "indexTime :: INTEGER",
        "isDeprecated": false,
        "type": "INTEGER"
      }
    ],
    "deprecatedBy": "Firstly, the procedure duplicates functionality of page cache warm up which is a part of the DBMS. Secondly, the API of this procedure is very specific to Record storage engine.",
    "argumentDescription": [
      {
        "name": "loadProperties",
        "description": "loadProperties = false :: BOOLEAN",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=false, type=BOOLEAN}",
        "type": "BOOLEAN"
      },
      {
        "name": "loadDynamicProperties",
        "description": "loadDynamicProperties = false :: BOOLEAN",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=false, type=BOOLEAN}",
        "type": "BOOLEAN"
      },
      {
        "name": "loadIndexes",
        "description": "loadIndexes = false :: BOOLEAN",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=false, type=BOOLEAN}",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "isDeprecated": false,
    "signature": "apoc.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)",
    "name": "apoc.when",
    "description": "This procedure will run the read-only `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.",
    "returnDescription": [
      {
        "name": "value",
        "description": "The result returned from the evaluated Cypher query.",
        "isDeprecated": false,
        "type": "MAP"
      }
    ],
    "deprecatedBy": null,
    "argumentDescription": [
      {
        "name": "condition",
        "description": "The predicate deciding if to run the `ifQuery`or not.",
        "isDeprecated": false,
        "type": "BOOLEAN"
      },
      {
        "name": "ifQuery",
        "description": "The Cypher statement to run if the condition is true.",
        "isDeprecated": false,
        "type": "STRING"
      },
      {
        "name": "elseQuery",
        "description": "The Cypher statement to run if the condition is false.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value=, type=STRING}",
        "type": "STRING"
      },
      {
        "name": "params",
        "description": "The parameters for the given Cypher statement.",
        "isDeprecated": false,
        "default": "DefaultParameterValue{value={}, type=MAP}",
        "type": "MAP"
      }
    ]
  }
]