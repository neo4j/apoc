import org.gradle.api.internal.artifacts.DefaultExcludeRule

plugins {
  id 'java'
  id 'maven-publish'
  id('com.gradleup.shadow') version '8.3.6'
}

archivesBaseName = "apoc"

jar {
  manifest {
    attributes 'Implementation-Title': "APOC Core"
    attributes 'Implementation-Vendor': "Neo4j"
    attributes 'Implementation-Version': version
  }
  archiveClassifier.set('')
  duplicatesStrategy = 'exclude'
}


configurations {
  apt
}

shadowJar {
  archiveClassifier.set('core')
  duplicatesStrategy = 'exclude'
}

tasks.register('combinedJar', Jar) {
  dependsOn(project(':common').jar)
  dependsOn(project.jar)

  archiveClassifier.set('all')

  manifest {
    attributes 'Implementation-Title': "APOC Core"
    attributes 'Implementation-Vendor': "Neo4j"
    attributes 'Implementation-Version': version
  }

  from(zipTree(project(':common').tasks.jar.archiveFile))
  from(zipTree(project.tasks.jar.archiveFile))
}

tasks.register('combinedSources', Jar) {
  from sourceSets.main.allJava
  from project(':common').sourceSets.main.allJava
  archiveClassifier = 'all-sources'
}

tasks.register('combinedJavaDoc', Jar) {
  from javadoc
  archiveClassifier = 'all-javadoc'
}

javadoc {
  failOnError = false
  options.addStringOption('Xdoclint:none', '-quiet')
}


dependencies {
  apt project(':processor')
  apt group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective

  // These will be dependencies packaged with the .jar
  implementation project(":common")
  implementation group: 'com.opencsv', name: 'opencsv', version: '5.7.1', {
    exclude group: 'commons-beanutils', module: 'commons-beanutils'
    exclude group: 'org.apache.commons', module: 'commons-collections4'
  }
  implementation group: 'org.roaringbitmap', name: 'RoaringBitmap', version: '0.7.17'

  def arrowExclusions = {
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    exclude group: 'io.netty', module: 'netty-common'
    exclude group: 'io.netty', module: 'netty-buffer'
  }

  // These will be dependencies not packaged with the .jar
  // They need to be provided either through the database or in an extra .jar
  compileOnly group: 'org.apache.arrow', name: 'arrow-vector', version: apacheArrowVersion, arrowExclusions
  compileOnly group: 'org.apache.arrow', name: 'arrow-memory-netty', version: apacheArrowVersion, arrowExclusions

  compileOnly group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective
  compileOnly group: 'com.google.guava', name: 'guava', version: '33.0.0-jre'

  // These dependencies affect the tests only, they will not be packaged in the resulting .jar
  testImplementation project(":common").sourceSets.test.output
  testImplementation project(':test-utils')
  testImplementation "com.neo4j:enterprise-it-test-support:$neo4jVersionEffective"
  testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
  testImplementation group: 'org.mock-server', name: 'mockserver-netty', version: '5.15.0', {
    exclude group: 'org.slf4j', module: 'slf4j-api'
  }
  testImplementation 'org.assertj:assertj-core:3.26.3'
  testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:4.1.0'

  configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-nop'
    exclude group: 'ch.qos.logback', module: 'logback-classic'
  }
}

publishing {
  repositories {
    maven {
      name = 'pipeline'
      url = "file://${project(':core').buildDir}/repo"
    }
    if (System.getenv("CODEARTIFACT_PUBLISH_URL") ?: "" != "") {
      maven {
        name = 'codeartifact-publish'
        url System.getenv('CODEARTIFACT_PUBLISH_URL')
        credentials {
          username System.getenv('CODEARTIFACT_USERNAME')
          password System.getenv('CODEARTIFACT_TOKEN')
        }
      }
    }
  }
  publications {
    shadow(MavenPublication) { publication ->
      artifactId("apoc-core")
      artifact(mySourcesJar)
      artifact(myJavadocJar)

      artifact(combinedJar)
      artifact(combinedSources)
      artifact(combinedJavaDoc)

      from components.java

      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = 'neo4j-apoc-core'
        description = 'Core package for Neo4j Procedures'
        url = 'http://github.com/neo4j/apoc'
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            comments = 'Note that this license is for the project itself, and not for its dependencies.'
            distribution = 'repo'
          }
        }
        developers {
          developer {
            id = 'neo4j'
            name = 'The Neo4j Team'
            url = 'https://neo4j.com/'
            organization = 'Neo4j Inc.'
            organizationUrl = 'https://neo4j.com/'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/neo4j/apoc.git'
          developerConnection = 'scm:git:git@github.com:neo4j/apoc.git'
          url = 'https://github.com/neo4j/apoc'
        }
      }
    }
  }
}

tasks.register('copyRuntimeLibs', Copy) {
  into "lib"
  from configurations.testRuntimeClasspath
}