import org.gradle.api.internal.artifacts.DefaultExcludeRule

plugins {
  id 'java'
  id 'maven-publish'
}

archivesBaseName = "apoc"

configurations {
  apt
}

javadoc {
  failOnError = false
  options.addStringOption('Xdoclint:none', '-quiet')
}

dependencies {
  apt project(':processor')
  apt group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective

  def withoutServers = {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'org.eclipse.jetty.aggregate'
    exclude group: 'org.apache.hive', module: 'hive-service'
  }

  // These will be dependencies packaged with the .jar
  api group: 'com.jayway.jsonpath', name: 'json-path', version: '2.9.0'
  api group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.9'
  // We need this to avoid seeing SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder" on startup
  api group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'


  // These will be dependencies not packaged with the .jar
  // They need to be provided either through the database or in an extra .jar
  compileOnly group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective
  compileOnly group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.643'
  // If updated check if the transitive dependency to javax.servlet.jsp:jsp-api:2.1 has also updated
  // and remove the manual licensing check for it in licenses-3rdparties.gradle
  compileOnly group: 'org.apache.hadoop', name: 'hadoop-common', version: '3.4.2', withoutServers
  compileOnly group: 'com.google.cloud', name: 'google-cloud-storage', version: '2.54.0'
  compileOnly group: 'com.github.seancfoley', name: 'ipaddress', version: '5.3.3'
  compileOnly group: 'org.apache.commons', name: 'commons-lang3', version:  '3.18.0'

  // These dependencies affect the tests only, they will not be packaged in the resulting .jar
  testImplementation project(':test-utils')
  testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
  testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  testImplementation group: 'org.neo4j.community', name: 'it-test-support', version: neo4jVersionEffective // , classifier: "tests"
  testImplementation group: 'org.neo4j', name: 'log-test-utils', version: neo4jVersionEffective // , classifier: "tests"
  testImplementation group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersionEffective, classifier: "tests"
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.26.3'
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.2.0'
  testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.1'

  constraints {
    // Remove when json-path has updated transitive dependency
    api('net.minidev:json-smart:2.5.2') {
      because 'CVE-2024-57699'
    }
    api('org.apache.commons:commons-lang3:3.18.0') {
      because 'CVE-2025-48924'
    }
  }

  configurations.configureEach {
    exclude group: 'org.slf4j', module: 'slf4j-nop'
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'org.ow2.asm', module: 'asm'
  }
}


tasks.register('testJar', Jar) {
  dependsOn testClasses
  archiveClassifier = 'tests'
  from sourceSets.test.output
}

tasks.register('copyRuntimeLibs', Copy) {
  into "lib"
  from configurations.testRuntimeClasspath
}

publishing {
  repositories {
    maven {
      name = 'pipeline'
      url = "file://${project(':core').buildDir}/repo"
    }
    if (System.getenv("CODEARTIFACT_PUBLISH_URL") ?: "" != "") {
      maven {
        name = 'codeartifact-publish'
        url System.getenv('CODEARTIFACT_PUBLISH_URL')
        credentials {
          username System.getenv('CODEARTIFACT_USERNAME')
          password System.getenv('CODEARTIFACT_TOKEN')
        }
      }
    }
  }
  publications {
    shadow(MavenPublication) { publication ->
      artifactId("apoc-common")
      artifact(mySourcesJar)
      artifact(myJavadocJar)
      artifact(testJar)

      from components.java

      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = 'neo4j-apoc-procedure-common'
        description = 'Data types package for Neo4j Procedures'
        url = 'http://github.com/neo4j/apoc'
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            comments = 'Note that this license is for the project itself, and not for its dependencies.'
            distribution = 'repo'
          }
        }
        developers {
          developer {
            id = 'neo4j'
            name = 'The Neo4j Team'
            url = 'https://neo4j.com/'
            organization = 'Neo4j Inc.'
            organizationUrl = 'https://neo4j.com/'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/neo4j/apoc.git'
          developerConnection = 'scm:git:git@github.com:neo4j/apoc.git'
          url = 'https://github.com/neo4j/apoc'
        }
      }
    }
  }
}