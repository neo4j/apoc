import org.gradle.api.internal.artifacts.DefaultExcludeRule

plugins {
    id 'java'
    id 'maven-publish'
}

archivesBaseName = "apoc"

configurations {
    apt
}

javadoc {
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
}

dependencies {
    apt project(':processor')
    apt group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective

    def withoutServers = {
        exclude group: 'org.eclipse.jetty'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'org.apache.hive', module: 'hive-service'
    }

    // These will be dependencies packaged with the .jar
    api group: 'com.jayway.jsonpath', name: 'json-path', version: '2.9.0'
    api group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.9'
    api group: 'org.apache.commons', name: 'commons-collections4', version: '4.2'
    // We need this to avoid seeing SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder" on startup
    api group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'

    // We need to force this dependency's version due to a vulnerability https://github.com/neo4j-contrib/neo4j-apoc-procedures/issues/3048
    api group: 'org.apache.commons', name: 'commons-lang3', {
        version {
            strictly '3.14.0'
        }
    }
    api group: 'com.github.seancfoley', name: 'ipaddress', version: '5.3.3'

    // These will be dependencies not packaged with the .jar
    // They need to be provided either through the database or in an extra .jar
    compileOnly group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective
    compileOnly group: 'org.apache.commons', name: 'commons-configuration2', version: '2.9.0'
    compileOnly group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.643'
    // If updated check if the transitive dependency to javax.servlet.jsp:jsp-api:2.1 has also updated
    // and remove the manual licensing check for it in licenses-3rdparties.gradle
    compileOnly group: 'org.apache.hadoop', name: 'hadoop-common', version: '3.3.6', withoutServers
    compileOnly group: 'com.google.cloud', name: 'google-cloud-storage', version: '2.26.1'

    // These dependencies affect the tests only, they will not be packaged in the resulting .jar
    testImplementation project(':test-utils')
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testImplementation group: 'org.neo4j.community', name: 'it-test-support', version: neo4jVersionEffective // , classifier: "tests"
    testImplementation group: 'org.neo4j', name: 'log-test-utils', version: neo4jVersionEffective // , classifier: "tests"
    testImplementation group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersionEffective, classifier: "tests"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.2.0'
    testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.1'

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.ow2.asm', module: 'asm'
    }
}


task testJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.testRuntimeClasspath
}

publishing {
    repositories {
        maven {
            name = 'pipeline'
            url = "file://${project(':core').buildDir}/repo"
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            artifactId("apoc-common")
            artifact(mySourcesJar)
            artifact(myJavadocJar)
            artifact(testJar)
            artifact(jar)

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "neo4j-apoc-procedure-common")
                root.appendNode("description", "Data types package for Neo4j Procedures")
                root.appendNode("url", "http://github.com/neo4j-contrib/neo4j-apoc-procedures")

                def scmNode = root.appendNode("scm")
                scmNode.appendNode("url", "http://github.com/neo4j-contrib/neo4j-apoc-procedures")

                def licensesNode = root.appendNode("licenses")
                def licenseNode = licensesNode.appendNode("license")
                licenseNode.appendNode("name", 'The Apache Software License, Version 2.0')
                licenseNode.appendNode("url", 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode("comments", 'Note that this license is for the project itself, and not for its dependencies.')
                licenseNode.appendNode("distribution", 'repo')

                def developersNode = root.appendNode("developers")
                def developerNode = developersNode.appendNode("developer")
                developerNode.appendNode("id", 'neo4j')
                developerNode.appendNode("name", 'The Neo4j Team')
                developerNode.appendNode("url", 'https://neo4j.com/')
                developerNode.appendNode("organization", 'Neo4j Inc.')
                developerNode.appendNode("organizationUrl", 'https://neo4j.com/')

                def dependenciesNode = root.get("dependencies")[0]
                if (dependenciesNode == null) {
                    dependenciesNode = root.appendNode("dependencies")
                }

                configurations.default.allDependencies.findAll { dependency -> dependency.group != "org.neo4j.procedure" }.forEach {
                    def dependency = dependenciesNode.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                    dependency.appendNode('scope', "compile")

                    def myExcludeRules = it.excludeRules
                    if (myExcludeRules.size() == 0) {
                        myExcludeRules = new HashSet<>()
                    }

                    myExcludeRules.add(new DefaultExcludeRule("org.slf4j", "slf4j-nop"))

                    // for exclusions
                    if (myExcludeRules.size() > 0) {
                        def exclusions = dependency.appendNode('exclusions')
                        myExcludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('artifactId', ex.module ? ex.module : "*")
                            exclusion.appendNode('groupId', ex.group)
                        }
                    }
                }
            }
        }
    }
}